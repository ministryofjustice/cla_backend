version: 2.1
orbs:
  slack: circleci/slack@3.4.2
  cla-end-to-end-tests: ministryofjustice/cla-end-to-end-tests@volatile
  aws-cli: circleci/aws-cli@4.0.0 # use v4 of this orb
  aws-ecr: circleci/aws-ecr@9.0.0 # this orb doesn't support OIDC v2, so we use aws-cli to authenticate


# ------------------
# EXECUTORS
# these are ones we use rather than from the orb
# ------------------

executors:
  build-executor:
    docker:
      - image: docker:19.03-git
  cloud-platform-executor:
    docker:
      - image: ministryofjustice/cloud-platform-tools:2.1
  python2-executor:
    docker:
      - image: cimg/python:2.7
  python3-executor:
    docker:
      - image: cimg/python:3.7

# ------------------
#
# REUSABLE YAML
#
# ------------------

#jobs:
#  # TODO add in build push and tag for migration

references:
  aws_cli_setup: &aws_cli_setup
    aws-cli/setup:
      role_arn: $ECR_ROLE_TO_ASSUME # this will use the env var
      region: $ECR_REGION # this will use the env var
      # Authenticate to the ECR repository using the standard command

  aws_login: &aws_login
    run: |
      aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com

  configure_source_tag: &configure_source_tag
      run:
        name: Create build tag for main application image
        command: |
          build_tag=application:$CIRCLE_SHA1
          echo "export BUILD_TAG=$build_tag" >> $BASH_ENV
          source $BASH_ENV

  configure_target_tags: &configure_target_tags
#    TODO make this a comma separated list including latest if branch is main/master could even be a script
#          echo "export TARGET_TAGS=$target_tag_include_sha, $target_tag_no_sha" >> $BASH_ENV
      run:
        name: Create target tag for main application image
        command: |
          source .circleci/define_build_environment_variables
          target_tag_include_sha=$ECR_DOCKER_REPOSITORY:$CLEANED_BRANCH_NAME.$short_sha
          target_tag_no_sha=$ECR_DOCKER_REPOSITORY:$CLEANED_BRANCH_NAME
          echo "export TARGET_TAGS=test1, test2" >> $BASH_ENV
          source $BASH_ENV

  # Build the Docker image
  # TODO make target conditional
#  add in datamigration build
  build_docker_image: &build_docker_image
      aws-ecr/build_and_push_image:
        auth:
          - aws-cli/setup:
              role_arn: $ECR_ROLE_TO_ASSUME
        setup_remote_docker: true
        remote_docker_version: docker:19.03-git
        remote_docker_layer_caching: true
        push_image: false
        account_id: $AWS_ECR_REGISTRY_ID
        tag: $BUILD_TAG
        region: $ECR_REGION # this will use the env var
        repo: $ECR_REPOSITORY # this will use the env var
        extra_build_args: |
          --build-arg target=production \
          --build-arg label build.git.sha=$CIRCLE_SHA1 \
          --build-arg label build.git.branch=$CIRCLE_BRANCH \
          --build-arg label build.url=$CIRCLE_BUILD_URL

  # Tag Docker images
  tag_images: &tag_images
      aws-ecr/tag_image:
        source_tag: $BUILD_TAG
        target_tag: $TARGET_TAGS
        repo: $ECR_REPOSITORY # this will use the env var

  # push the Docker image
  push_images: &push_images
      aws-ecr/push_image:
        tag: $TARGET_TAGS
        repo: $ECR_REPOSITORY

  # Check python version
  check_python: &check_python
      run:
        name: Validate Python version
        command: |
          docker run --rm --tty --interactive $BUILD_TAG python --version | grep "2.7"

# ------------------
#
# JOBS
#
# ------------------

jobs:
  build:
    executor: build-executor
    steps:
      - checkout
      - *configure_source_tag
      - *configure_target_tags
      - *aws_cli_setup
      - *aws_login
      - *build_docker_image
      - *check_python
      - *tag_images
      - *push_images

  build_old:
    docker:
      - image: docker:19.03-git
    steps:
      - checkout
      - setup_remote_docker:
          version: "19.03.13"
          docker_layer_caching: true
      - run:
          name: Login to the ECR Docker registry
          command: |
            apk add --no-cache --no-progress py3-pip
            pip install awscli
            ecr_login="$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)"
            ${ecr_login}
      - run:
          name: Build Docker image
          command: |
            DOCKER_BUILDKIT=1 docker build --tag application:$CIRCLE_SHA1 \
              --target production \
              --label build.git.sha=$CIRCLE_SHA1 \
              --label build.git.branch=$CIRCLE_BRANCH \
              --label build.url=$CIRCLE_BUILD_URL \
              .
            docker build --tag database-migration bin/database-migration
      - run:
          name: Validate Python version
          command: |
            docker run --rm --tty --interactive application:$CIRCLE_SHA1 python --version | grep "2.7"
      - run:
          name: Tag and push Docker images
          command: .circleci/tag_and_push_docker_image application:$CIRCLE_SHA1
  lint:
    executor: python2-executor
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            pip install virtualenv
            virtualenv lint-env
      - restore_cache:
          keys:
            - pip-v1-{{ checksum "requirements/generated/requirements-lint.txt" }}
      - run:
          name: Install dependencies
          command: |
            source lint-env/bin/activate
            pip install --requirement requirements/generated/requirements-lint.txt
      - save_cache:
          key: pip-v1-{{ checksum "requirements/generated/requirements-lint.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          name: Lint with flake8 (warnings only)
          command: |
            source lint-env/bin/activate
            flake8 cla_backend
  formatting:
    executor: python3-executor
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            pip install virtualenv
            virtualenv formatting-env
      - restore_cache:
          keys:
            - pip-v1-black-18.9b0
      - run:
          name: Install dependencies
          command: |
            source formatting-env/bin/activate
            pip install black>=18.9b0
      - save_cache:
          key: pip-v1-black-18.9b0
          paths:
            - "~/.cache/pip"
      - run:
          name: Check formatting with Black
          command: |
            source lint-env/bin/activate
            black --check cla_backend
  pip-compile:
    executor: python2-executor
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            echo "Installing ibcurl4-gnutls-dev because it is required for pycurl"
            sudo apt-get update
            sudo apt-get install -y libcurl4-gnutls-dev
            pip install virtualenv
            virtualenv pip-compile-env
      - restore_cache:
          keys:
            - pip-v1-pip-compile
      - run:
          name: Install dependencies
          command: |
            source pip-compile-env/bin/activate
            pip install pre-commit==1.14.2
      - save_cache:
          key: pip-v1-pip-compile
          paths:
            - "~/.cache/pip"
      - run:
          name: Check for changes with pip-compile
          command: |
            source pip-compile-env/bin/activate
            ls requirements/source/* | xargs pre-commit run pip-compile --files
  test:
    docker:
      - image: cimg/python:2.7
        environment:
          DB_NAME: circle_test
          DB_USER: postgres
          DJANGO_SETTINGS_MODULE: cla_backend.settings.circle
      - image: postgres:14.7-bullseye
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: circle_test
    steps:
      - checkout
      - run:
          name: Setup Postgres
          command: |
            dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Setup Python environment
          command: |
            echo "Installing ibcurl4-gnutls-dev because it is required for pycurl"
            sudo apt-get update
            sudo apt-get install -y libcurl4-gnutls-dev
            sudo apt-get update && sudo apt-get install -y libpython2.7 firefox
            pip install virtualenv
            virtualenv env
            source env/bin/activate
            pip install pip==18.1
      - restore_cache:
          keys:
            - pip-v2-{{ checksum "requirements/generated/requirements-testing.txt" }}
      - run:
          name: Install dependencies
          command: |
            source env/bin/activate
            pip install --requirement requirements/generated/requirements-testing.txt
      - save_cache:
          key: pip-v2-{{ checksum "requirements/generated/requirements-testing.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          name: Run tests with coverage
          command: |
            source env/bin/activate
            coverage run manage.py test --verbosity=2
            coverage report -m
            coverage html
            coveralls
      - store_artifacts:
          path: htmlcov
          destination: coverage
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports

  deploy:
    parameters:
      namespace:
        type: string
      dynamic_hostname:
        type: boolean
    executor: cloud-platform-executor
    shell: /bin/sh -leo pipefail
    environment:
      BASH_ENV: /etc/profile
    steps:
      - checkout
      - run:
          # todo make this step reusable command here and below
          name: Install helm v3
          command: |
            wget https://get.helm.sh/helm-v3.2.4-linux-amd64.tar.gz
            tar -zxvf helm-v3.2.4-linux-amd64.tar.gz
            mv linux-amd64/helm /usr/local/bin/helm
    #todo check to see if this needs updating to short lived credentials and replace with reused command
      - run:
          name: Authenticate with cluster
          command: |
            .circleci/authenticate_with_kubernetes_cluster
      - deploy:
          name: Deploy to << parameters.namespace >>
          command: |
            export INGRESS_CLUSTER_NAME=`kubectl get configmap ingress-cluster -o jsonpath='{.data.name}'`
            export INGRESS_CLUSTER_WEIGHT=`kubectl get configmap ingress-cluster -o jsonpath='{.data.weight}'`
            source .circleci/define_build_environment_variables << parameters.namespace >> << parameters.dynamic_hostname >>
            pip3 install requests
            export PINGDOM_IPS=`python3 bin/pingdom_ips.py`
            ./bin/<< parameters.namespace >>_deploy.sh << parameters.dynamic_hostname >>
            echo "export RELEASE_HOST=$RELEASE_HOST" >> $BASH_ENV
      - slack/notify:
          message: ':tada: (<< parameters.namespace >>) Deployed branch $CIRCLE_BRANCH'
          title: '$RELEASE_HOST'
          title_link: 'https://$RELEASE_HOST/admin/'

  cleanup_merged:
    executor: cloud-platform-executor
    steps:
      - checkout
      - run:
          name: Install helm v3
          command: |
            wget https://get.helm.sh/helm-v3.2.4-linux-amd64.tar.gz
            tar -zxvf helm-v3.2.4-linux-amd64.tar.gz
            mv linux-amd64/helm /usr/local/bin/helm
      - run:
          name: Authenticate with cluster
          command: |
            .circleci/authenticate_with_kubernetes_cluster
      - run:
          name: Delete uat release
          command: |
            ./bin/delete_uat_release.sh

# ------------------
#
#WORKFLOWS
#
# ------------------

workflows:
  version: 2
  build_and_test:
    jobs:
      - lint
      - pip-compile
      - test:
          requires:
            - lint
            - pip-compile
      - cleanup_merged:
          name: cleanup_merged_live
          context:
            - laa-cla-backend
            - laa-cla-backend-live-uat
      - build:
          requires:
            - test
          context: laa-cla-backend

      - cla-end-to-end-tests/behave:
          requires:
            - build
          context: laa-cla-backend
          pre-steps:
            - checkout:
                path: cla_backend
            - run:
                command: |
                  cd cla_backend
                  source .circleci/define_build_environment_variables testing
                  echo "export CLA_BACKEND_IMAGE=$ECR_DEPLOY_IMAGE" >> $BASH_ENV
                  echo "Setting CLA Backend image $ECR_DEPLOY_IMAGE"

      - deploy:
          name: uat_deploy_live
          namespace: uat
          dynamic_hostname: true
          requires:
            - build
          filters:
            branches:
              ignore:
                - master
          context:
           - laa-cla-backend
           - laa-cla-backend-live-uat

      - static_uat_deploy_approval:
          type: approval
          requires:
            - build

      - deploy:
          name: static_uat_deploy_live
          namespace: uat
          dynamic_hostname: false
          requires:
            - static_uat_deploy_approval
          context:
           - laa-cla-backend
           - laa-cla-backend-live-uat

      - staging_deploy_approval:
          type: approval
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - django-upgrade

      - deploy:
          name: staging_deploy_live
          namespace: staging
          dynamic_hostname: false
          requires:
            - staging_deploy_approval
          context:
           - laa-cla-backend
           - laa-cla-backend-live-staging

      - training_deploy_approval:
          requires:
            - staging_deploy_live
          type: approval
          filters:
            branches:
              only:
                - django-upgrade
                - master

      - production_deploy_approval:
          requires:
            - training_deploy_live
          type: approval
          filters:
            branches:
              only:
                - master

      - deploy:
          name: training_deploy_live
          namespace: training
          dynamic_hostname: false
          requires:
            - training_deploy_approval
          context:
           - laa-cla-backend
           - laa-cla-backend-live-training

      - deploy:
          name: production_deploy_live
          namespace: production
          dynamic_hostname: false
          requires:
            - production_deploy_approval
          context:
           - laa-cla-backend
           - laa-cla-backend-live-production
