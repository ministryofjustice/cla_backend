[
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "InternalError",
        "importPath": "psycopg2",
        "description": "psycopg2",
        "isExtraImport": true,
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "InternalError",
        "importPath": "psycopg2",
        "description": "psycopg2",
        "isExtraImport": true,
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "DBDiff",
        "importPath": "pgdatadiff.pgdatadiff",
        "description": "pgdatadiff.pgdatadiff",
        "isExtraImport": true,
        "detail": "pgdatadiff.pgdatadiff",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "OneToOneUserAdminForm",
        "importPath": "core.admin.forms",
        "description": "core.admin.forms",
        "isExtraImport": true,
        "detail": "core.admin.forms",
        "documentation": {}
    },
    {
        "label": "OneToOneUserAdminForm",
        "importPath": "core.admin.forms",
        "description": "core.admin.forms",
        "isExtraImport": true,
        "detail": "core.admin.forms",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "call_command",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "call_command",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "call_command",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "call_command",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "call_command",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "call_command",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "call_command",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "call_command",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "call_command",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AnonymousUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AnonymousUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Organisation",
        "importPath": "call_centre.models",
        "description": "call_centre.models",
        "isExtraImport": true,
        "detail": "call_centre.models",
        "documentation": {}
    },
    {
        "label": "Operator",
        "importPath": "call_centre.models",
        "description": "call_centre.models",
        "isExtraImport": true,
        "detail": "call_centre.models",
        "documentation": {}
    },
    {
        "label": "Operator",
        "importPath": "call_centre.models",
        "description": "call_centre.models",
        "isExtraImport": true,
        "detail": "call_centre.models",
        "documentation": {}
    },
    {
        "label": "Caseworker",
        "importPath": "call_centre.models",
        "description": "call_centre.models",
        "isExtraImport": true,
        "detail": "call_centre.models",
        "documentation": {}
    },
    {
        "label": "OP_MANAGER_GROUP_NAME",
        "importPath": "call_centre.models",
        "description": "call_centre.models",
        "isExtraImport": true,
        "detail": "call_centre.models",
        "documentation": {}
    },
    {
        "label": "CLA_SUPERUSER_GROUP_NAME",
        "importPath": "call_centre.models",
        "description": "call_centre.models",
        "isExtraImport": true,
        "detail": "call_centre.models",
        "documentation": {}
    },
    {
        "label": "Operator",
        "importPath": "call_centre.models",
        "description": "call_centre.models",
        "isExtraImport": true,
        "detail": "call_centre.models",
        "documentation": {}
    },
    {
        "label": "Operator",
        "importPath": "call_centre.models",
        "description": "call_centre.models",
        "isExtraImport": true,
        "detail": "call_centre.models",
        "documentation": {}
    },
    {
        "label": "Operator",
        "importPath": "call_centre.models",
        "description": "call_centre.models",
        "isExtraImport": true,
        "detail": "call_centre.models",
        "documentation": {}
    },
    {
        "label": "Organisation",
        "importPath": "call_centre.models",
        "description": "call_centre.models",
        "isExtraImport": true,
        "detail": "call_centre.models",
        "documentation": {}
    },
    {
        "label": "Operator",
        "importPath": "call_centre.models",
        "description": "call_centre.models",
        "isExtraImport": true,
        "detail": "call_centre.models",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connections",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "InternalError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connections",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "DatabaseError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "localtime",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "localtime",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "localtime",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "make_aware",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "UTC",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "localtime",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "utc",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "model_utils.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "model_utils.fields",
        "description": "model_utils.fields",
        "detail": "model_utils.fields",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "override_settings",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "override_settings",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "override_settings",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "override_settings",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "SimpleTestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "NoReverseMatch",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "NoReverseMatch",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "NoReverseMatch",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.core.urlresolvers",
        "description": "django.core.urlresolvers",
        "isExtraImport": true,
        "detail": "django.core.urlresolvers",
        "documentation": {}
    },
    {
        "label": "get_random_string",
        "importPath": "django.utils.crypto",
        "description": "django.utils.crypto",
        "isExtraImport": true,
        "detail": "django.utils.crypto",
        "documentation": {}
    },
    {
        "label": "get_random_string",
        "importPath": "django.utils.crypto",
        "description": "django.utils.crypto",
        "isExtraImport": true,
        "detail": "django.utils.crypto",
        "documentation": {}
    },
    {
        "label": "get_random_string",
        "importPath": "django.utils.crypto",
        "description": "django.utils.crypto",
        "isExtraImport": true,
        "detail": "django.utils.crypto",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_user",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_user",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_user",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_user",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_user",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_user",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_user",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_user",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_user",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_user",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_user",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_user",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_user",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_user",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_user",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_user",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_user",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_user",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_user",
        "importPath": "core.tests.mommy_utils",
        "description": "core.tests.mommy_utils",
        "isExtraImport": true,
        "detail": "core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "CLAOperatorAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAOperatorAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAOperatorAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAOperatorAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAOperatorAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAOperatorAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAOperatorAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAOperatorAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAOperatorAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAOperatorAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAOperatorAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAOperatorAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAOperatorAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAOperatorAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAOperatorAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAOperatorAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAOperatorAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLACheckerAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLACheckerAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLACheckerAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLACheckerAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLACheckerAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAOperatorAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAProviderAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAProviderAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAProviderAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAProviderAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAProviderAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAProviderAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAProviderAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAProviderAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAProviderAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAProviderAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAProviderAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAProviderAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAProviderAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAProviderAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAProviderAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAOperatorAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAProviderAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAOperatorAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAOperatorAuthBaseApiTestMixin",
        "importPath": "legalaid.tests.views.test_base",
        "description": "legalaid.tests.views.test_base",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "AdaptationsMetadataAPIMixin",
        "importPath": "legalaid.tests.views.mixins.adaptations_api",
        "description": "legalaid.tests.views.mixins.adaptations_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.adaptations_api",
        "documentation": {}
    },
    {
        "label": "AdaptationsDetailsAPIMixin",
        "importPath": "legalaid.tests.views.mixins.adaptations_api",
        "description": "legalaid.tests.views.mixins.adaptations_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.adaptations_api",
        "documentation": {}
    },
    {
        "label": "AdaptationsMetadataAPIMixin",
        "importPath": "legalaid.tests.views.mixins.adaptations_api",
        "description": "legalaid.tests.views.mixins.adaptations_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.adaptations_api",
        "documentation": {}
    },
    {
        "label": "AdaptationsDetailsAPIMixin",
        "importPath": "legalaid.tests.views.mixins.adaptations_api",
        "description": "legalaid.tests.views.mixins.adaptations_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.adaptations_api",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "dateutil.parser",
        "description": "dateutil.parser",
        "isExtraImport": true,
        "detail": "dateutil.parser",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "dateutil.parser",
        "description": "dateutil.parser",
        "isExtraImport": true,
        "detail": "dateutil.parser",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "translation",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "mock",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mock",
        "description": "mock",
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "mock",
        "description": "mock",
        "isExtraImport": true,
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "mock",
        "description": "mock",
        "isExtraImport": true,
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "mock",
        "description": "mock",
        "isExtraImport": true,
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "mock",
        "description": "mock",
        "isExtraImport": true,
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "mock",
        "description": "mock",
        "isExtraImport": true,
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "mock",
        "description": "mock",
        "isExtraImport": true,
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "mock",
        "description": "mock",
        "isExtraImport": true,
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "mock_open",
        "importPath": "mock",
        "description": "mock",
        "isExtraImport": true,
        "detail": "mock",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "mixins",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "mixins",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "mixins",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "mixins",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "mixins",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "mixins",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "mixins",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "mixins",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "mixins",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "ProviderAllocationHelper",
        "importPath": "cla_provider.helpers",
        "description": "cla_provider.helpers",
        "isExtraImport": true,
        "detail": "cla_provider.helpers",
        "documentation": {}
    },
    {
        "label": "ProviderAllocationHelper",
        "importPath": "cla_provider.helpers",
        "description": "cla_provider.helpers",
        "isExtraImport": true,
        "detail": "cla_provider.helpers",
        "documentation": {}
    },
    {
        "label": "notify_case_RDSPed",
        "importPath": "cla_provider.helpers",
        "description": "cla_provider.helpers",
        "isExtraImport": true,
        "detail": "cla_provider.helpers",
        "documentation": {}
    },
    {
        "label": "ProviderAllocationHelper",
        "importPath": "cla_provider.helpers",
        "description": "cla_provider.helpers",
        "isExtraImport": true,
        "detail": "cla_provider.helpers",
        "documentation": {}
    },
    {
        "label": "notify_case_assigned",
        "importPath": "cla_provider.helpers",
        "description": "cla_provider.helpers",
        "isExtraImport": true,
        "detail": "cla_provider.helpers",
        "documentation": {}
    },
    {
        "label": "ProviderAllocationHelper",
        "importPath": "cla_provider.helpers",
        "description": "cla_provider.helpers",
        "isExtraImport": true,
        "detail": "cla_provider.helpers",
        "documentation": {}
    },
    {
        "label": "ProviderDistributionHelper",
        "importPath": "cla_provider.helpers",
        "description": "cla_provider.helpers",
        "isExtraImport": true,
        "detail": "cla_provider.helpers",
        "documentation": {}
    },
    {
        "label": "notify_case_assigned",
        "importPath": "cla_provider.helpers",
        "description": "cla_provider.helpers",
        "isExtraImport": true,
        "detail": "cla_provider.helpers",
        "documentation": {}
    },
    {
        "label": "notify_case_RDSPed",
        "importPath": "cla_provider.helpers",
        "description": "cla_provider.helpers",
        "isExtraImport": true,
        "detail": "cla_provider.helpers",
        "documentation": {}
    },
    {
        "label": "ProviderExtractFormatter",
        "importPath": "cla_provider.helpers",
        "description": "cla_provider.helpers",
        "isExtraImport": true,
        "detail": "cla_provider.helpers",
        "documentation": {}
    },
    {
        "label": "ProviderDistributionHelper",
        "importPath": "cla_provider.helpers",
        "description": "cla_provider.helpers",
        "isExtraImport": true,
        "detail": "cla_provider.helpers",
        "documentation": {}
    },
    {
        "label": "ProviderAllocationHelper",
        "importPath": "cla_provider.helpers",
        "description": "cla_provider.helpers",
        "isExtraImport": true,
        "detail": "cla_provider.helpers",
        "documentation": {}
    },
    {
        "label": "MockGovNotifyMailBox",
        "importPath": "cla_provider.tests.test_notify",
        "description": "cla_provider.tests.test_notify",
        "isExtraImport": true,
        "detail": "cla_provider.tests.test_notify",
        "documentation": {}
    },
    {
        "label": "MockGovNotifyMailBox",
        "importPath": "cla_provider.tests.test_notify",
        "description": "cla_provider.tests.test_notify",
        "isExtraImport": true,
        "detail": "cla_provider.tests.test_notify",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "CaseNotesHistory",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "EligibilityCheck",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Savings",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "PersonalDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "PersonalDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "PersonalDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "ThirdPartyDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "AdaptationDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "EligibilityCheck",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "EligibilityCheck",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "CaseNotesHistory",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Income",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Savings",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Deductions",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "PersonalDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "ThirdPartyDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "AdaptationDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "CaseKnowledgebaseAssignment",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "EODDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "EODDetailsCategory",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Property",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "EODDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "PersonalDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "PersonalDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "EligibilityCheck",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "CaseNotesHistory",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Income",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Savings",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Deductions",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "PersonalDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "ThirdPartyDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "AdaptationDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "CaseKnowledgebaseAssignment",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "EODDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "EODDetailsCategory",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Property",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "CaseNotesHistory",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "AdaptationDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "CaseKnowledgebaseAssignment",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Deductions",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "EligibilityCheck",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Income",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "PersonalDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Property",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Savings",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "ThirdPartyDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "MatterType",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "EODDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "MatterType",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "MatterType",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "ContactResearchMethod",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "PersonalDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "PersonalDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "ThirdPartyDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "EligibilityCheck",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "CaseNotesHistory",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "EODDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "EligibilityCheck",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Property",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Income",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Savings",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "PersonalDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Savings",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Income",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Deductions",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "PersonalDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "ThirdPartyDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "AdaptationDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "EligibilityCheck",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Property",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "CaseKnowledgebaseAssignment",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "PersonalDetails",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "importPath": "legalaid.models",
        "description": "legalaid.models",
        "isExtraImport": true,
        "detail": "legalaid.models",
        "documentation": {}
    },
    {
        "label": "BaseFullCaseAPIMixin",
        "importPath": "legalaid.tests.views.mixins.case_api",
        "description": "legalaid.tests.views.mixins.case_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.case_api",
        "documentation": {}
    },
    {
        "label": "FullCaseAPIMixin",
        "importPath": "legalaid.tests.views.mixins.case_api",
        "description": "legalaid.tests.views.mixins.case_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.case_api",
        "documentation": {}
    },
    {
        "label": "BaseSearchCaseAPIMixin",
        "importPath": "legalaid.tests.views.mixins.case_api",
        "description": "legalaid.tests.views.mixins.case_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.case_api",
        "documentation": {}
    },
    {
        "label": "BaseUpdateCaseTestCase",
        "importPath": "legalaid.tests.views.mixins.case_api",
        "description": "legalaid.tests.views.mixins.case_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.case_api",
        "documentation": {}
    },
    {
        "label": "FullCaseAPIMixin",
        "importPath": "legalaid.tests.views.mixins.case_api",
        "description": "legalaid.tests.views.mixins.case_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.case_api",
        "documentation": {}
    },
    {
        "label": "BaseFullCaseAPIMixin",
        "importPath": "legalaid.tests.views.mixins.case_api",
        "description": "legalaid.tests.views.mixins.case_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.case_api",
        "documentation": {}
    },
    {
        "label": "FullCaseAPIMixin",
        "importPath": "legalaid.tests.views.mixins.case_api",
        "description": "legalaid.tests.views.mixins.case_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.case_api",
        "documentation": {}
    },
    {
        "label": "BaseSearchCaseAPIMixin",
        "importPath": "legalaid.tests.views.mixins.case_api",
        "description": "legalaid.tests.views.mixins.case_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.case_api",
        "documentation": {}
    },
    {
        "label": "BaseUpdateCaseTestCase",
        "importPath": "legalaid.tests.views.mixins.case_api",
        "description": "legalaid.tests.views.mixins.case_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.case_api",
        "documentation": {}
    },
    {
        "label": "CASE_SOURCE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REQUIRES_ACTION_BY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "EXPRESSIONS_OF_DISSATISFACTION",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "GENDERS",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "ETHNICITIES",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "RELIGIONS",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "SEXUAL_ORIENTATIONS",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "DISABILITIES",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "CASE_SOURCE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REQUIRES_ACTION_BY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "GENDERS",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "ETHNICITIES",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "RELIGIONS",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "SEXUAL_ORIENTATIONS",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "DISABILITIES",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "OPERATOR_HOURS",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "CASE_SOURCE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "FEEDBACK_ISSUE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REQUIRES_ACTION_BY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "CASE_SOURCE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "CASE_SOURCE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REASONS_FOR_CONTACTING",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REASONS_FOR_CONTACTING",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "CALLBACK_WINDOW_TYPES",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "CASE_SOURCE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REQUIRES_ACTION_BY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REQUIRES_ACTION_BY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REQUIRES_ACTION_BY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REQUIRES_ACTION_BY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REQUIRES_ACTION_BY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REQUIRES_ACTION_BY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REQUIRES_ACTION_BY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REQUIRES_ACTION_BY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REQUIRES_ACTION_BY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REQUIRES_ACTION_BY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REQUIRES_ACTION_BY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REQUIRES_ACTION_BY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REQUIRES_ACTION_BY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "MATTER_TYPE_LEVELS",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "FEEDBACK_ISSUE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "FEEDBACK_ISSUE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "DIAGNOSIS_SCOPE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "DIAGNOSIS_SCOPE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "DIAGNOSIS_SCOPE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "MATTER_TYPE_LEVELS",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "DIAGNOSIS_SCOPE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "DIAGNOSIS_SCOPE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "DIAGNOSIS_SCOPE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "DIAGNOSIS_SCOPE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "MATTER_TYPE_LEVELS",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "DIAGNOSIS_SCOPE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "DIAGNOSIS_SCOPE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "RESEARCH_CONTACT_VIA",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "CONTACT_SAFETY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REQUIRES_ACTION_BY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "CASE_SOURCE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "SPECIFIC_BENEFITS",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REQUIRES_ACTION_BY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "OPERATOR_HOURS",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "CONTACT_SAFETY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "ELIGIBILITY_STATES",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "CONTACT_SAFETY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "THIRDPARTY_REASON",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "THIRDPARTY_RELATIONSHIP",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "ADAPTATION_LANGUAGES",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REQUIRES_ACTION_BY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "DIAGNOSIS_SCOPE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "EXEMPT_USER_REASON",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "ECF_STATEMENT",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "CASE_SOURCE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "OPERATOR_HOURS",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REQUIRES_ACTION_BY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "ELIGIBILITY_STATES",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "THIRDPARTY_REASON",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "THIRDPARTY_RELATIONSHIP",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "ADAPTATION_LANGUAGES",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "MATTER_TYPE_LEVELS",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "CONTACT_SAFETY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "EXEMPT_USER_REASON",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "ECF_STATEMENT",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REQUIRES_ACTION_BY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "EMAIL_SAFETY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "ELIGIBILITY_REASONS",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "EXPRESSIONS_OF_DISSATISFACTION",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "RESEARCH_CONTACT_VIA",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "CALLBACK_WINDOW_TYPES",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "CASE_SOURCE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "DISREGARDS",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "MATTER_TYPE_LEVELS",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "SPECIFIC_BENEFITS",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "CASE_SOURCE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "CASE_SOURCE",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "CONTACT_SAFETY",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "REASONS_FOR_CONTACTING",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "EXPRESSIONS_OF_DISSATISFACTION",
        "importPath": "cla_common.constants",
        "description": "cla_common.constants",
        "isExtraImport": true,
        "detail": "cla_common.constants",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "ComplaintLog",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "ComplaintLog",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "ComplaintLog",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "ComplaintLog",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "Log",
        "importPath": "cla_eventlog.models",
        "description": "cla_eventlog.models",
        "isExtraImport": true,
        "detail": "cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "ExplicitEventCodeViewTestCaseMixin",
        "importPath": "cla_eventlog.tests.test_views",
        "description": "cla_eventlog.tests.test_views",
        "isExtraImport": true,
        "detail": "cla_eventlog.tests.test_views",
        "documentation": {}
    },
    {
        "label": "ImplicitEventCodeViewTestCaseMixin",
        "importPath": "cla_eventlog.tests.test_views",
        "description": "cla_eventlog.tests.test_views",
        "isExtraImport": true,
        "detail": "cla_eventlog.tests.test_views",
        "documentation": {}
    },
    {
        "label": "EventAPIMixin",
        "importPath": "cla_eventlog.tests.test_views",
        "description": "cla_eventlog.tests.test_views",
        "isExtraImport": true,
        "detail": "cla_eventlog.tests.test_views",
        "documentation": {}
    },
    {
        "label": "LogAPIMixin",
        "importPath": "cla_eventlog.tests.test_views",
        "description": "cla_eventlog.tests.test_views",
        "isExtraImport": true,
        "detail": "cla_eventlog.tests.test_views",
        "documentation": {}
    },
    {
        "label": "ExplicitEventCodeViewTestCaseMixin",
        "importPath": "cla_eventlog.tests.test_views",
        "description": "cla_eventlog.tests.test_views",
        "isExtraImport": true,
        "detail": "cla_eventlog.tests.test_views",
        "documentation": {}
    },
    {
        "label": "ImplicitEventCodeViewTestCaseMixin",
        "importPath": "cla_eventlog.tests.test_views",
        "description": "cla_eventlog.tests.test_views",
        "isExtraImport": true,
        "detail": "cla_eventlog.tests.test_views",
        "documentation": {}
    },
    {
        "label": "EventAPIMixin",
        "importPath": "cla_eventlog.tests.test_views",
        "description": "cla_eventlog.tests.test_views",
        "isExtraImport": true,
        "detail": "cla_eventlog.tests.test_views",
        "documentation": {}
    },
    {
        "label": "LogAPIMixin",
        "importPath": "cla_eventlog.tests.test_views",
        "description": "cla_eventlog.tests.test_views",
        "isExtraImport": true,
        "detail": "cla_eventlog.tests.test_views",
        "documentation": {}
    },
    {
        "label": "DeclineHelpCaseForm",
        "importPath": "call_centre.forms",
        "description": "call_centre.forms",
        "isExtraImport": true,
        "detail": "call_centre.forms",
        "documentation": {}
    },
    {
        "label": "SuspendCaseForm",
        "importPath": "call_centre.forms",
        "description": "call_centre.forms",
        "isExtraImport": true,
        "detail": "call_centre.forms",
        "documentation": {}
    },
    {
        "label": "DeferAssignmentCaseForm",
        "importPath": "call_centre.forms",
        "description": "call_centre.forms",
        "isExtraImport": true,
        "detail": "call_centre.forms",
        "documentation": {}
    },
    {
        "label": "ProviderAllocationForm",
        "importPath": "call_centre.forms",
        "description": "call_centre.forms",
        "isExtraImport": true,
        "detail": "call_centre.forms",
        "documentation": {}
    },
    {
        "label": "DeclineHelpCaseForm",
        "importPath": "call_centre.forms",
        "description": "call_centre.forms",
        "isExtraImport": true,
        "detail": "call_centre.forms",
        "documentation": {}
    },
    {
        "label": "CallMeBackForm",
        "importPath": "call_centre.forms",
        "description": "call_centre.forms",
        "isExtraImport": true,
        "detail": "call_centre.forms",
        "documentation": {}
    },
    {
        "label": "StopCallMeBackForm",
        "importPath": "call_centre.forms",
        "description": "call_centre.forms",
        "isExtraImport": true,
        "detail": "call_centre.forms",
        "documentation": {}
    },
    {
        "label": "CaseSerializer",
        "importPath": "call_centre.serializers",
        "description": "call_centre.serializers",
        "isExtraImport": true,
        "detail": "call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "ProviderSerializer",
        "importPath": "call_centre.serializers",
        "description": "call_centre.serializers",
        "isExtraImport": true,
        "detail": "call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "CaseNotesHistoryAPIMixin",
        "importPath": "legalaid.tests.views.mixins.case_notes_history_api",
        "description": "legalaid.tests.views.mixins.case_notes_history_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.case_notes_history_api",
        "documentation": {}
    },
    {
        "label": "CaseNotesHistoryAPIMixin",
        "importPath": "legalaid.tests.views.mixins.case_notes_history_api",
        "description": "legalaid.tests.views.mixins.case_notes_history_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.case_notes_history_api",
        "documentation": {}
    },
    {
        "label": "CategoryAPIMixin",
        "importPath": "legalaid.tests.views.mixins.category_api",
        "description": "legalaid.tests.views.mixins.category_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.category_api",
        "documentation": {}
    },
    {
        "label": "CategoryAPIMixin",
        "importPath": "legalaid.tests.views.mixins.category_api",
        "description": "legalaid.tests.views.mixins.category_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.category_api",
        "documentation": {}
    },
    {
        "label": "CategoryAPIMixin",
        "importPath": "legalaid.tests.views.mixins.category_api",
        "description": "legalaid.tests.views.mixins.category_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.category_api",
        "documentation": {}
    },
    {
        "label": "SimpleResourceAPIMixin",
        "importPath": "core.tests.test_base",
        "description": "core.tests.test_base",
        "isExtraImport": true,
        "detail": "core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "SimpleResourceAPIMixin",
        "importPath": "core.tests.test_base",
        "description": "core.tests.test_base",
        "isExtraImport": true,
        "detail": "core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "SimpleResourceAPIMixin",
        "importPath": "core.tests.test_base",
        "description": "core.tests.test_base",
        "isExtraImport": true,
        "detail": "core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "SimpleResourceAPIMixin",
        "importPath": "core.tests.test_base",
        "description": "core.tests.test_base",
        "isExtraImport": true,
        "detail": "core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "SimpleResourceAPIMixin",
        "importPath": "core.tests.test_base",
        "description": "core.tests.test_base",
        "isExtraImport": true,
        "detail": "core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "SimpleResourceAPIMixin",
        "importPath": "core.tests.test_base",
        "description": "core.tests.test_base",
        "isExtraImport": true,
        "detail": "core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "SimpleResourceAPIMixin",
        "importPath": "core.tests.test_base",
        "description": "core.tests.test_base",
        "isExtraImport": true,
        "detail": "core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "NestedSimpleResourceAPIMixin",
        "importPath": "core.tests.test_base",
        "description": "core.tests.test_base",
        "isExtraImport": true,
        "detail": "core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "SimpleResourceAPIMixin",
        "importPath": "core.tests.test_base",
        "description": "core.tests.test_base",
        "isExtraImport": true,
        "detail": "core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "NestedSimpleResourceAPIMixin",
        "importPath": "core.tests.test_base",
        "description": "core.tests.test_base",
        "isExtraImport": true,
        "detail": "core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "SimpleResourceAPIMixin",
        "importPath": "core.tests.test_base",
        "description": "core.tests.test_base",
        "isExtraImport": true,
        "detail": "core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "NestedSimpleResourceAPIMixin",
        "importPath": "core.tests.test_base",
        "description": "core.tests.test_base",
        "isExtraImport": true,
        "detail": "core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "NestedSimpleResourceAPIMixin",
        "importPath": "core.tests.test_base",
        "description": "core.tests.test_base",
        "isExtraImport": true,
        "detail": "core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "SimpleResourceAPIMixin",
        "importPath": "core.tests.test_base",
        "description": "core.tests.test_base",
        "isExtraImport": true,
        "detail": "core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "NestedSimpleResourceAPIMixin",
        "importPath": "core.tests.test_base",
        "description": "core.tests.test_base",
        "isExtraImport": true,
        "detail": "core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "SimpleResourceAPIMixin",
        "importPath": "core.tests.test_base",
        "description": "core.tests.test_base",
        "isExtraImport": true,
        "detail": "core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "SimpleResourceAPIMixin",
        "importPath": "core.tests.test_base",
        "description": "core.tests.test_base",
        "isExtraImport": true,
        "detail": "core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "NestedSimpleResourceAPIMixin",
        "importPath": "core.tests.test_base",
        "description": "core.tests.test_base",
        "isExtraImport": true,
        "detail": "core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "NestedSimpleResourceAPIMixin",
        "importPath": "core.tests.test_base",
        "description": "core.tests.test_base",
        "isExtraImport": true,
        "detail": "core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "NestedSimpleResourceAPIMixin",
        "importPath": "core.tests.test_base",
        "description": "core.tests.test_base",
        "isExtraImport": true,
        "detail": "core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "CLABaseApiTestMixin",
        "importPath": "core.tests.test_base",
        "description": "core.tests.test_base",
        "isExtraImport": true,
        "detail": "core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "SimpleResourceAPIMixin",
        "importPath": "core.tests.test_base",
        "description": "core.tests.test_base",
        "isExtraImport": true,
        "detail": "core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "DiagnosisAPIMixin",
        "importPath": "diagnosis.tests.diagnosis_api",
        "description": "diagnosis.tests.diagnosis_api",
        "isExtraImport": true,
        "detail": "diagnosis.tests.diagnosis_api",
        "documentation": {}
    },
    {
        "label": "DiagnosisAPIMixin",
        "importPath": "diagnosis.tests.diagnosis_api",
        "description": "diagnosis.tests.diagnosis_api",
        "isExtraImport": true,
        "detail": "diagnosis.tests.diagnosis_api",
        "documentation": {}
    },
    {
        "label": "NestedEligibilityCheckAPIMixin",
        "importPath": "legalaid.tests.views.mixins.eligibility_check_api",
        "description": "legalaid.tests.views.mixins.eligibility_check_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.eligibility_check_api",
        "documentation": {}
    },
    {
        "label": "EligibilityCheckAPIMixin",
        "importPath": "legalaid.tests.views.mixins.eligibility_check_api",
        "description": "legalaid.tests.views.mixins.eligibility_check_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.eligibility_check_api",
        "documentation": {}
    },
    {
        "label": "NestedEligibilityCheckAPIMixin",
        "importPath": "legalaid.tests.views.mixins.eligibility_check_api",
        "description": "legalaid.tests.views.mixins.eligibility_check_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.eligibility_check_api",
        "documentation": {}
    },
    {
        "label": "NotificationAPIMixin",
        "importPath": "notifications.tests.views.mixins.notification_api",
        "description": "notifications.tests.views.mixins.notification_api",
        "isExtraImport": true,
        "detail": "notifications.tests.views.mixins.notification_api",
        "documentation": {}
    },
    {
        "label": "diversity",
        "importPath": "legalaid.utils",
        "description": "legalaid.utils",
        "isExtraImport": true,
        "detail": "legalaid.utils",
        "documentation": {}
    },
    {
        "label": "sla",
        "importPath": "legalaid.utils",
        "description": "legalaid.utils",
        "isExtraImport": true,
        "detail": "legalaid.utils",
        "documentation": {}
    },
    {
        "label": "diversity",
        "importPath": "legalaid.utils",
        "description": "legalaid.utils",
        "isExtraImport": true,
        "detail": "legalaid.utils",
        "documentation": {}
    },
    {
        "label": "diversity",
        "importPath": "legalaid.utils",
        "description": "legalaid.utils",
        "isExtraImport": true,
        "detail": "legalaid.utils",
        "documentation": {}
    },
    {
        "label": "diversity",
        "importPath": "legalaid.utils",
        "description": "legalaid.utils",
        "isExtraImport": true,
        "detail": "legalaid.utils",
        "documentation": {}
    },
    {
        "label": "diversity",
        "importPath": "legalaid.utils",
        "description": "legalaid.utils",
        "isExtraImport": true,
        "detail": "legalaid.utils",
        "documentation": {}
    },
    {
        "label": "diversity",
        "importPath": "legalaid.utils",
        "description": "legalaid.utils",
        "isExtraImport": true,
        "detail": "legalaid.utils",
        "documentation": {}
    },
    {
        "label": "diversity",
        "importPath": "legalaid.utils",
        "description": "legalaid.utils",
        "isExtraImport": true,
        "detail": "legalaid.utils",
        "documentation": {}
    },
    {
        "label": "diversity",
        "importPath": "legalaid.utils",
        "description": "legalaid.utils",
        "isExtraImport": true,
        "detail": "legalaid.utils",
        "documentation": {}
    },
    {
        "label": "diversity",
        "importPath": "legalaid.utils",
        "description": "legalaid.utils",
        "isExtraImport": true,
        "detail": "legalaid.utils",
        "documentation": {}
    },
    {
        "label": "diversity",
        "importPath": "legalaid.utils",
        "description": "legalaid.utils",
        "isExtraImport": true,
        "detail": "legalaid.utils",
        "documentation": {}
    },
    {
        "label": "diversity",
        "importPath": "legalaid.utils",
        "description": "legalaid.utils",
        "isExtraImport": true,
        "detail": "legalaid.utils",
        "documentation": {}
    },
    {
        "label": "diversity",
        "importPath": "legalaid.utils",
        "description": "legalaid.utils",
        "isExtraImport": true,
        "detail": "legalaid.utils",
        "documentation": {}
    },
    {
        "label": "PersonalDetailsAPIMixin",
        "importPath": "legalaid.tests.views.mixins.personal_details_api",
        "description": "legalaid.tests.views.mixins.personal_details_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.personal_details_api",
        "documentation": {}
    },
    {
        "label": "PersonalDetailsAPIMixin",
        "importPath": "legalaid.tests.views.mixins.personal_details_api",
        "description": "legalaid.tests.views.mixins.personal_details_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.personal_details_api",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "cycle",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "cycle",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "groupby",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "groupby",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "cycle",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "parser",
        "importPath": "dateutil",
        "description": "dateutil",
        "isExtraImport": true,
        "detail": "dateutil",
        "documentation": {}
    },
    {
        "label": "parser",
        "importPath": "dateutil",
        "description": "dateutil",
        "isExtraImport": true,
        "detail": "dateutil",
        "documentation": {}
    },
    {
        "label": "ProviderAllocation",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "Provider",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "Provider",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "OutOfHoursRota",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "ProviderPreAllocation",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "Staff",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "Staff",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "Staff",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "ProviderAllocation",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "Staff",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "Provider",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "ProviderAllocation",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "OutOfHoursRota",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "ProviderPreAllocation",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "Staff",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "ProviderPreAllocation",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "Provider",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "OutOfHoursRota",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "CSVUpload",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "CSVUpload",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "Provider",
        "importPath": "cla_provider.models",
        "description": "cla_provider.models",
        "isExtraImport": true,
        "detail": "cla_provider.models",
        "documentation": {}
    },
    {
        "label": "ThirdPartyDetailsApiMixin",
        "importPath": "legalaid.tests.views.mixins.third_party_api",
        "description": "legalaid.tests.views.mixins.third_party_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.third_party_api",
        "documentation": {}
    },
    {
        "label": "ThirdPartyDetailsApiMixin",
        "importPath": "legalaid.tests.views.mixins.third_party_api",
        "description": "legalaid.tests.views.mixins.third_party_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.third_party_api",
        "documentation": {}
    },
    {
        "label": "TimerAPIMixin",
        "importPath": "timer.tests.test_views",
        "description": "timer.tests.test_views",
        "isExtraImport": true,
        "detail": "timer.tests.test_views",
        "documentation": {}
    },
    {
        "label": "UserAPIMixin",
        "importPath": "legalaid.tests.views.mixins.user_api",
        "description": "legalaid.tests.views.mixins.user_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.user_api",
        "documentation": {}
    },
    {
        "label": "UserAPIMixin",
        "importPath": "legalaid.tests.views.mixins.user_api",
        "description": "legalaid.tests.views.mixins.user_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.user_api",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "model_mommy.recipe",
        "description": "model_mommy.recipe",
        "isExtraImport": true,
        "detail": "model_mommy.recipe",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "model_mommy.recipe",
        "description": "model_mommy.recipe",
        "isExtraImport": true,
        "detail": "model_mommy.recipe",
        "documentation": {}
    },
    {
        "label": "foreign_key",
        "importPath": "model_mommy.recipe",
        "description": "model_mommy.recipe",
        "isExtraImport": true,
        "detail": "model_mommy.recipe",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "model_mommy.recipe",
        "description": "model_mommy.recipe",
        "isExtraImport": true,
        "detail": "model_mommy.recipe",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "model_mommy.recipe",
        "description": "model_mommy.recipe",
        "isExtraImport": true,
        "detail": "model_mommy.recipe",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "model_mommy.recipe",
        "description": "model_mommy.recipe",
        "isExtraImport": true,
        "detail": "model_mommy.recipe",
        "documentation": {}
    },
    {
        "label": "seq",
        "importPath": "model_mommy.recipe",
        "description": "model_mommy.recipe",
        "isExtraImport": true,
        "detail": "model_mommy.recipe",
        "documentation": {}
    },
    {
        "label": "foreign_key",
        "importPath": "model_mommy.recipe",
        "description": "model_mommy.recipe",
        "isExtraImport": true,
        "detail": "model_mommy.recipe",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "model_mommy.recipe",
        "description": "model_mommy.recipe",
        "isExtraImport": true,
        "detail": "model_mommy.recipe",
        "documentation": {}
    },
    {
        "label": "foreign_key",
        "importPath": "model_mommy.recipe",
        "description": "model_mommy.recipe",
        "isExtraImport": true,
        "detail": "model_mommy.recipe",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "model_mommy.recipe",
        "description": "model_mommy.recipe",
        "isExtraImport": true,
        "detail": "model_mommy.recipe",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "model_mommy.recipe",
        "description": "model_mommy.recipe",
        "isExtraImport": true,
        "detail": "model_mommy.recipe",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "model_mommy.recipe",
        "description": "model_mommy.recipe",
        "isExtraImport": true,
        "detail": "model_mommy.recipe",
        "documentation": {}
    },
    {
        "label": "seq",
        "importPath": "model_mommy.recipe",
        "description": "model_mommy.recipe",
        "isExtraImport": true,
        "detail": "model_mommy.recipe",
        "documentation": {}
    },
    {
        "label": "foreign_key",
        "importPath": "model_mommy.recipe",
        "description": "model_mommy.recipe",
        "isExtraImport": true,
        "detail": "model_mommy.recipe",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "model_mommy.recipe",
        "description": "model_mommy.recipe",
        "isExtraImport": true,
        "detail": "model_mommy.recipe",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "model_mommy.recipe",
        "description": "model_mommy.recipe",
        "isExtraImport": true,
        "detail": "model_mommy.recipe",
        "documentation": {}
    },
    {
        "label": "seq",
        "importPath": "model_mommy.recipe",
        "description": "model_mommy.recipe",
        "isExtraImport": true,
        "detail": "model_mommy.recipe",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "model_mommy.recipe",
        "description": "model_mommy.recipe",
        "isExtraImport": true,
        "detail": "model_mommy.recipe",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "django.utils.six",
        "description": "django.utils.six",
        "isExtraImport": true,
        "detail": "django.utils.six",
        "documentation": {}
    },
    {
        "label": "text_type",
        "importPath": "django.utils.six",
        "description": "django.utils.six",
        "isExtraImport": true,
        "detail": "django.utils.six",
        "documentation": {}
    },
    {
        "label": "text_type",
        "importPath": "django.utils.six",
        "description": "django.utils.six",
        "isExtraImport": true,
        "detail": "django.utils.six",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "django.utils.six",
        "description": "django.utils.six",
        "isExtraImport": true,
        "detail": "django.utils.six",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "django.utils.six",
        "description": "django.utils.six",
        "isExtraImport": true,
        "detail": "django.utils.six",
        "documentation": {}
    },
    {
        "label": "text_type",
        "importPath": "django.utils.six",
        "description": "django.utils.six",
        "isExtraImport": true,
        "detail": "django.utils.six",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog",
        "description": "cla_eventlog",
        "isExtraImport": true,
        "detail": "cla_eventlog",
        "documentation": {}
    },
    {
        "label": "EventTestCaseMixin",
        "importPath": "cla_eventlog.tests.base",
        "description": "cla_eventlog.tests.base",
        "isExtraImport": true,
        "detail": "cla_eventlog.tests.base",
        "documentation": {}
    },
    {
        "label": "EventTestCaseMixin",
        "importPath": "cla_eventlog.tests.base",
        "description": "cla_eventlog.tests.base",
        "isExtraImport": true,
        "detail": "cla_eventlog.tests.base",
        "documentation": {}
    },
    {
        "label": "EventTestCaseMixin",
        "importPath": "cla_eventlog.tests.base",
        "description": "cla_eventlog.tests.base",
        "isExtraImport": true,
        "detail": "cla_eventlog.tests.base",
        "documentation": {}
    },
    {
        "label": "EventTestCaseMixin",
        "importPath": "cla_eventlog.tests.base",
        "description": "cla_eventlog.tests.base",
        "isExtraImport": true,
        "detail": "cla_eventlog.tests.base",
        "documentation": {}
    },
    {
        "label": "EventTestCaseMixin",
        "importPath": "cla_eventlog.tests.base",
        "description": "cla_eventlog.tests.base",
        "isExtraImport": true,
        "detail": "cla_eventlog.tests.base",
        "documentation": {}
    },
    {
        "label": "EventTestCaseMixin",
        "importPath": "cla_eventlog.tests.base",
        "description": "cla_eventlog.tests.base",
        "isExtraImport": true,
        "detail": "cla_eventlog.tests.base",
        "documentation": {}
    },
    {
        "label": "LOG_TYPES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_LEVELS",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_TYPES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_LEVELS",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_ROLES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_LEVELS",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_TYPES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_LEVELS",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_TYPES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_LEVELS",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_TYPES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_TYPES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_LEVELS",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_TYPES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_ROLES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_LEVELS",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_TYPES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_LEVELS",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_LEVELS",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_TYPES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_TYPES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_LEVELS",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_TYPES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_LEVELS",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_ROLES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_LEVELS",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_TYPES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_LEVELS",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_ROLES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_ROLES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_LEVELS",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_LEVELS",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_TYPES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_TYPES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_LEVELS",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_TYPES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_LEVELS",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_ROLES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_TYPES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_LEVELS",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_LEVELS",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_TYPES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_LEVELS",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_ROLES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_TYPES",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_LEVELS",
        "importPath": "cla_eventlog.constants",
        "description": "cla_eventlog.constants",
        "isExtraImport": true,
        "detail": "cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "BaseCaseLogFormTestCaseMixin",
        "importPath": "cla_eventlog.tests.test_forms",
        "description": "cla_eventlog.tests.test_forms",
        "isExtraImport": true,
        "detail": "cla_eventlog.tests.test_forms",
        "documentation": {}
    },
    {
        "label": "EventSpecificLogFormTestCaseMixin",
        "importPath": "cla_eventlog.tests.test_forms",
        "description": "cla_eventlog.tests.test_forms",
        "isExtraImport": true,
        "detail": "cla_eventlog.tests.test_forms",
        "documentation": {}
    },
    {
        "label": "BaseCaseLogFormTestCaseMixin",
        "importPath": "cla_eventlog.tests.test_forms",
        "description": "cla_eventlog.tests.test_forms",
        "isExtraImport": true,
        "detail": "cla_eventlog.tests.test_forms",
        "documentation": {}
    },
    {
        "label": "EventSpecificLogFormTestCaseMixin",
        "importPath": "cla_eventlog.tests.test_forms",
        "description": "cla_eventlog.tests.test_forms",
        "isExtraImport": true,
        "detail": "cla_eventlog.tests.test_forms",
        "documentation": {}
    },
    {
        "label": "CallCentreFixedOperatingHours",
        "importPath": "call_centre.tests.test_utils",
        "description": "call_centre.tests.test_utils",
        "isExtraImport": true,
        "detail": "call_centre.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "CallCentreFixedOperatingHours",
        "importPath": "call_centre.tests.test_utils",
        "description": "call_centre.tests.test_utils",
        "isExtraImport": true,
        "detail": "call_centre.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "CallCentreFixedOperatingHours",
        "importPath": "call_centre.tests.test_utils",
        "description": "call_centre.tests.test_utils",
        "isExtraImport": true,
        "detail": "call_centre.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "CallCentreFixedOperatingHours",
        "importPath": "call_centre.tests.test_utils",
        "description": "call_centre.tests.test_utils",
        "isExtraImport": true,
        "detail": "call_centre.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "CallCentreFixedOperatingHours",
        "importPath": "call_centre.tests.test_utils",
        "description": "call_centre.tests.test_utils",
        "isExtraImport": true,
        "detail": "call_centre.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "patterns",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "OAuth2Authentication",
        "importPath": "oauth2_provider.ext.rest_framework",
        "description": "oauth2_provider.ext.rest_framework",
        "isExtraImport": true,
        "detail": "oauth2_provider.ext.rest_framework",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "importPath": "cla_backend.urls",
        "description": "cla_backend.urls",
        "isExtraImport": true,
        "detail": "cla_backend.urls",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "oauth2_provider.models",
        "description": "oauth2_provider.models",
        "isExtraImport": true,
        "detail": "oauth2_provider.models",
        "documentation": {}
    },
    {
        "label": "AccessToken",
        "importPath": "oauth2_provider.models",
        "description": "oauth2_provider.models",
        "isExtraImport": true,
        "detail": "oauth2_provider.models",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "oauth2_provider.models",
        "description": "oauth2_provider.models",
        "isExtraImport": true,
        "detail": "oauth2_provider.models",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "oauth2_provider.models",
        "description": "oauth2_provider.models",
        "isExtraImport": true,
        "detail": "oauth2_provider.models",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "oauth2_provider.models",
        "description": "oauth2_provider.models",
        "isExtraImport": true,
        "detail": "oauth2_provider.models",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "oauth2_provider.models",
        "description": "oauth2_provider.models",
        "isExtraImport": true,
        "detail": "oauth2_provider.models",
        "documentation": {}
    },
    {
        "label": "AccessToken",
        "importPath": "oauth2_provider.models",
        "description": "oauth2_provider.models",
        "isExtraImport": true,
        "detail": "oauth2_provider.models",
        "documentation": {}
    },
    {
        "label": "AccessToken",
        "importPath": "oauth2_provider.models",
        "description": "oauth2_provider.models",
        "isExtraImport": true,
        "detail": "oauth2_provider.models",
        "documentation": {}
    },
    {
        "label": "Application",
        "importPath": "oauth2_provider.models",
        "description": "oauth2_provider.models",
        "isExtraImport": true,
        "detail": "oauth2_provider.models",
        "documentation": {}
    },
    {
        "label": "AccessToken",
        "importPath": "oauth2_provider.models",
        "description": "oauth2_provider.models",
        "isExtraImport": true,
        "detail": "oauth2_provider.models",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "skip",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "jsonpatch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jsonpatch",
        "description": "jsonpatch",
        "detail": "jsonpatch",
        "documentation": {}
    },
    {
        "label": "format_patch",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "getattrd",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "format_patch",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "remember_cwd",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "remember_cwd",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "OpeningHours",
        "importPath": "cla_common.call_centre_availability",
        "description": "cla_common.call_centre_availability",
        "isExtraImport": true,
        "detail": "cla_common.call_centre_availability",
        "documentation": {}
    },
    {
        "label": "OpeningHours",
        "importPath": "cla_common.call_centre_availability",
        "description": "cla_common.call_centre_availability",
        "isExtraImport": true,
        "detail": "cla_common.call_centre_availability",
        "documentation": {}
    },
    {
        "label": "on_bank_holiday",
        "importPath": "cla_common.call_centre_availability",
        "description": "cla_common.call_centre_availability",
        "isExtraImport": true,
        "detail": "cla_common.call_centre_availability",
        "documentation": {}
    },
    {
        "label": "SLOT_INTERVAL_MINS",
        "importPath": "cla_common.call_centre_availability",
        "description": "cla_common.call_centre_availability",
        "isExtraImport": true,
        "detail": "cla_common.call_centre_availability",
        "documentation": {}
    },
    {
        "label": "OpeningHours",
        "importPath": "cla_common.call_centre_availability",
        "description": "cla_common.call_centre_availability",
        "isExtraImport": true,
        "detail": "cla_common.call_centre_availability",
        "documentation": {}
    },
    {
        "label": "available_days",
        "importPath": "cla_common.call_centre_availability",
        "description": "cla_common.call_centre_availability",
        "isExtraImport": true,
        "detail": "cla_common.call_centre_availability",
        "documentation": {}
    },
    {
        "label": "on_sunday",
        "importPath": "cla_common.call_centre_availability",
        "description": "cla_common.call_centre_availability",
        "isExtraImport": true,
        "detail": "cla_common.call_centre_availability",
        "documentation": {}
    },
    {
        "label": "on_bank_holiday",
        "importPath": "cla_common.call_centre_availability",
        "description": "cla_common.call_centre_availability",
        "isExtraImport": true,
        "detail": "cla_common.call_centre_availability",
        "documentation": {}
    },
    {
        "label": "OpeningHours",
        "importPath": "cla_common.call_centre_availability",
        "description": "cla_common.call_centre_availability",
        "isExtraImport": true,
        "detail": "cla_common.call_centre_availability",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "importPath": "cla_eventlog.events",
        "description": "cla_eventlog.events",
        "isExtraImport": true,
        "detail": "cla_eventlog.events",
        "documentation": {}
    },
    {
        "label": "None_if_owned_by_op_or_op_manager",
        "importPath": "cla_eventlog.events",
        "description": "cla_eventlog.events",
        "isExtraImport": true,
        "detail": "cla_eventlog.events",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "importPath": "cla_eventlog.events",
        "description": "cla_eventlog.events",
        "isExtraImport": true,
        "detail": "cla_eventlog.events",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "importPath": "cla_eventlog.events",
        "description": "cla_eventlog.events",
        "isExtraImport": true,
        "detail": "cla_eventlog.events",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "importPath": "cla_eventlog.events",
        "description": "cla_eventlog.events",
        "isExtraImport": true,
        "detail": "cla_eventlog.events",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "importPath": "cla_eventlog.events",
        "description": "cla_eventlog.events",
        "isExtraImport": true,
        "detail": "cla_eventlog.events",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "importPath": "cla_eventlog.events",
        "description": "cla_eventlog.events",
        "isExtraImport": true,
        "detail": "cla_eventlog.events",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "importPath": "cla_eventlog.events",
        "description": "cla_eventlog.events",
        "isExtraImport": true,
        "detail": "cla_eventlog.events",
        "documentation": {}
    },
    {
        "label": "None_if_owned_by_op_or_op_manager",
        "importPath": "cla_eventlog.events",
        "description": "cla_eventlog.events",
        "isExtraImport": true,
        "detail": "cla_eventlog.events",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "importPath": "cla_eventlog.events",
        "description": "cla_eventlog.events",
        "isExtraImport": true,
        "detail": "cla_eventlog.events",
        "documentation": {}
    },
    {
        "label": "None_if_owned_by_op_or_op_manager",
        "importPath": "cla_eventlog.events",
        "description": "cla_eventlog.events",
        "isExtraImport": true,
        "detail": "cla_eventlog.events",
        "documentation": {}
    },
    {
        "label": "NON_FIELD_ERRORS",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "NON_FIELD_ERRORS",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ImproperlyConfigured",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ImproperlyConfigured",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ImproperlyConfigured",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "MultipleObjectsReturned",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "MultipleObjectsReturned",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ImproperlyConfigured",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ugettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ugettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ugettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ugettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ugettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ugettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ugettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "to_locale",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ugettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ugettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ErrorList",
        "importPath": "django.forms.util",
        "description": "django.forms.util",
        "isExtraImport": true,
        "detail": "django.forms.util",
        "documentation": {}
    },
    {
        "label": "ErrorList",
        "importPath": "django.forms.util",
        "description": "django.forms.util",
        "isExtraImport": true,
        "detail": "django.forms.util",
        "documentation": {}
    },
    {
        "label": "Article",
        "importPath": "knowledgebase.models",
        "description": "knowledgebase.models",
        "isExtraImport": true,
        "detail": "knowledgebase.models",
        "documentation": {}
    },
    {
        "label": "Article",
        "importPath": "knowledgebase.models",
        "description": "knowledgebase.models",
        "isExtraImport": true,
        "detail": "knowledgebase.models",
        "documentation": {}
    },
    {
        "label": "TelephoneNumber",
        "importPath": "knowledgebase.models",
        "description": "knowledgebase.models",
        "isExtraImport": true,
        "detail": "knowledgebase.models",
        "documentation": {}
    },
    {
        "label": "ArticleCategory",
        "importPath": "knowledgebase.models",
        "description": "knowledgebase.models",
        "isExtraImport": true,
        "detail": "knowledgebase.models",
        "documentation": {}
    },
    {
        "label": "ArticleCategoryMatrix",
        "importPath": "knowledgebase.models",
        "description": "knowledgebase.models",
        "isExtraImport": true,
        "detail": "knowledgebase.models",
        "documentation": {}
    },
    {
        "label": "ArticleCategory",
        "importPath": "knowledgebase.models",
        "description": "knowledgebase.models",
        "isExtraImport": true,
        "detail": "knowledgebase.models",
        "documentation": {}
    },
    {
        "label": "Article",
        "importPath": "knowledgebase.models",
        "description": "knowledgebase.models",
        "isExtraImport": true,
        "detail": "knowledgebase.models",
        "documentation": {}
    },
    {
        "label": "TelephoneNumber",
        "importPath": "knowledgebase.models",
        "description": "knowledgebase.models",
        "isExtraImport": true,
        "detail": "knowledgebase.models",
        "documentation": {}
    },
    {
        "label": "ArticleCategoryMatrix",
        "importPath": "knowledgebase.models",
        "description": "knowledgebase.models",
        "isExtraImport": true,
        "detail": "knowledgebase.models",
        "documentation": {}
    },
    {
        "label": "Article",
        "importPath": "knowledgebase.models",
        "description": "knowledgebase.models",
        "isExtraImport": true,
        "detail": "knowledgebase.models",
        "documentation": {}
    },
    {
        "label": "TelephoneNumber",
        "importPath": "knowledgebase.models",
        "description": "knowledgebase.models",
        "isExtraImport": true,
        "detail": "knowledgebase.models",
        "documentation": {}
    },
    {
        "label": "ArticleCategoryMatrix",
        "importPath": "knowledgebase.models",
        "description": "knowledgebase.models",
        "isExtraImport": true,
        "detail": "knowledgebase.models",
        "documentation": {}
    },
    {
        "label": "ArticleCategory",
        "importPath": "knowledgebase.models",
        "description": "knowledgebase.models",
        "isExtraImport": true,
        "detail": "knowledgebase.models",
        "documentation": {}
    },
    {
        "label": "Article",
        "importPath": "knowledgebase.models",
        "description": "knowledgebase.models",
        "isExtraImport": true,
        "detail": "knowledgebase.models",
        "documentation": {}
    },
    {
        "label": "BaseCallMeBackForm",
        "importPath": "legalaid.forms",
        "description": "legalaid.forms",
        "isExtraImport": true,
        "detail": "legalaid.forms",
        "documentation": {}
    },
    {
        "label": "BaseCallMeBackForm",
        "importPath": "legalaid.forms",
        "description": "legalaid.forms",
        "isExtraImport": true,
        "detail": "legalaid.forms",
        "documentation": {}
    },
    {
        "label": "get_sla_time",
        "importPath": "legalaid.forms",
        "description": "legalaid.forms",
        "isExtraImport": true,
        "detail": "legalaid.forms",
        "documentation": {}
    },
    {
        "label": "get_sla_time",
        "importPath": "legalaid.forms",
        "description": "legalaid.forms",
        "isExtraImport": true,
        "detail": "legalaid.forms",
        "documentation": {}
    },
    {
        "label": "get_sla_time",
        "importPath": "legalaid.forms",
        "description": "legalaid.forms",
        "isExtraImport": true,
        "detail": "legalaid.forms",
        "documentation": {}
    },
    {
        "label": "get_sla_time",
        "importPath": "legalaid.forms",
        "description": "legalaid.forms",
        "isExtraImport": true,
        "detail": "legalaid.forms",
        "documentation": {}
    },
    {
        "label": "BaseCaseLogForm",
        "importPath": "cla_eventlog.forms",
        "description": "cla_eventlog.forms",
        "isExtraImport": true,
        "detail": "cla_eventlog.forms",
        "documentation": {}
    },
    {
        "label": "EventSpecificLogForm",
        "importPath": "cla_eventlog.forms",
        "description": "cla_eventlog.forms",
        "isExtraImport": true,
        "detail": "cla_eventlog.forms",
        "documentation": {}
    },
    {
        "label": "EventSpecificLogForm",
        "importPath": "cla_eventlog.forms",
        "description": "cla_eventlog.forms",
        "isExtraImport": true,
        "detail": "cla_eventlog.forms",
        "documentation": {}
    },
    {
        "label": "BaseCaseLogForm",
        "importPath": "cla_eventlog.forms",
        "description": "cla_eventlog.forms",
        "isExtraImport": true,
        "detail": "cla_eventlog.forms",
        "documentation": {}
    },
    {
        "label": "EventSpecificLogForm",
        "importPath": "cla_eventlog.forms",
        "description": "cla_eventlog.forms",
        "isExtraImport": true,
        "detail": "cla_eventlog.forms",
        "documentation": {}
    },
    {
        "label": "BaseCaseLogForm",
        "importPath": "cla_eventlog.forms",
        "description": "cla_eventlog.forms",
        "isExtraImport": true,
        "detail": "cla_eventlog.forms",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "pre_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "pre_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "pre_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_delete",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "pre_delete",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "model_utils.models",
        "description": "model_utils.models",
        "isExtraImport": true,
        "detail": "model_utils.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "model_utils.models",
        "description": "model_utils.models",
        "isExtraImport": true,
        "detail": "model_utils.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "model_utils.models",
        "description": "model_utils.models",
        "isExtraImport": true,
        "detail": "model_utils.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "model_utils.models",
        "description": "model_utils.models",
        "isExtraImport": true,
        "detail": "model_utils.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "model_utils.models",
        "description": "model_utils.models",
        "isExtraImport": true,
        "detail": "model_utils.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "model_utils.models",
        "description": "model_utils.models",
        "isExtraImport": true,
        "detail": "model_utils.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "model_utils.models",
        "description": "model_utils.models",
        "isExtraImport": true,
        "detail": "model_utils.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "model_utils.models",
        "description": "model_utils.models",
        "isExtraImport": true,
        "detail": "model_utils.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "model_utils.models",
        "description": "model_utils.models",
        "isExtraImport": true,
        "detail": "model_utils.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "model_utils.models",
        "description": "model_utils.models",
        "isExtraImport": true,
        "detail": "model_utils.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "model_utils.models",
        "description": "model_utils.models",
        "isExtraImport": true,
        "detail": "model_utils.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "model_utils.models",
        "description": "model_utils.models",
        "isExtraImport": true,
        "detail": "model_utils.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "model_utils.models",
        "description": "model_utils.models",
        "isExtraImport": true,
        "detail": "model_utils.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "model_utils.models",
        "description": "model_utils.models",
        "isExtraImport": true,
        "detail": "model_utils.models",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "importPath": "model_utils.models",
        "description": "model_utils.models",
        "isExtraImport": true,
        "detail": "model_utils.models",
        "documentation": {}
    },
    {
        "label": "ClientIDPermission",
        "importPath": "core.permissions",
        "description": "core.permissions",
        "isExtraImport": true,
        "detail": "core.permissions",
        "documentation": {}
    },
    {
        "label": "ClientIDPermission",
        "importPath": "core.permissions",
        "description": "core.permissions",
        "isExtraImport": true,
        "detail": "core.permissions",
        "documentation": {}
    },
    {
        "label": "IsProviderPermission",
        "importPath": "core.permissions",
        "description": "core.permissions",
        "isExtraImport": true,
        "detail": "core.permissions",
        "documentation": {}
    },
    {
        "label": "BasePermission",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "BasePermission",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "BasePermission",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdminUser",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "UUIDSerializer",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "ClaModelSerializer",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "JSONField",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "ClaModelSerializer",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "JSONField",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "UUIDSerializer",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "ClaModelSerializer",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "UUIDSerializer",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "ClaModelSerializer",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "PartialUpdateExcludeReadonlySerializerMixin",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "JSONField",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "ClaModelSerializer",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "LogSerializerBase",
        "importPath": "cla_eventlog.serializers",
        "description": "cla_eventlog.serializers",
        "isExtraImport": true,
        "detail": "cla_eventlog.serializers",
        "documentation": {}
    },
    {
        "label": "LogSerializerBase",
        "importPath": "cla_eventlog.serializers",
        "description": "cla_eventlog.serializers",
        "isExtraImport": true,
        "detail": "cla_eventlog.serializers",
        "documentation": {}
    },
    {
        "label": "LogSerializerBase",
        "importPath": "cla_eventlog.serializers",
        "description": "cla_eventlog.serializers",
        "isExtraImport": true,
        "detail": "cla_eventlog.serializers",
        "documentation": {}
    },
    {
        "label": "EligibilityCheckSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "PropertySerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "SavingsSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "CaseSerializerFull",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "ProviderSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "OutOfHoursRotaSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "ExtendedUserSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "AdaptationDetailsSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "IncomeSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "DeductionsSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "PersonalDetailsSerializerFull",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "ThirdPartyPersonalDetailsSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "ThirdPartyDetailsSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "PersonSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "FeedbackSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "CaseArchivedSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "CaseNotesHistorySerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "CSVUploadSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "EODDetailsSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "UUIDSerializer",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "EligibilityCheckSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "PropertySerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "PersonalDetailsSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "CaseSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "IncomeSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "SavingsSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "DeductionsSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "PersonSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "AdaptationDetailsSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "ThirdPartyDetailsSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "EligibilityCheckSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "SavingsSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "PropertySerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "CaseSerializerFull",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "ProviderSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "ExtendedUserSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "AdaptationDetailsSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "IncomeSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "DeductionsSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "PersonalDetailsSerializerFull",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "ThirdPartyPersonalDetailsSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "ThirdPartyDetailsSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "PersonSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "FeedbackSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "CaseNotesHistorySerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "CSVUploadSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "ContactResearchMethodSerializerBase",
        "importPath": "legalaid.serializers",
        "description": "legalaid.serializers",
        "isExtraImport": true,
        "detail": "legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "date_format",
        "importPath": "django.utils.formats",
        "description": "django.utils.formats",
        "isExtraImport": true,
        "detail": "django.utils.formats",
        "documentation": {}
    },
    {
        "label": "date_format",
        "importPath": "django.utils.formats",
        "description": "django.utils.formats",
        "isExtraImport": true,
        "detail": "django.utils.formats",
        "documentation": {}
    },
    {
        "label": "date_format",
        "importPath": "django.utils.formats",
        "description": "django.utils.formats",
        "isExtraImport": true,
        "detail": "django.utils.formats",
        "documentation": {}
    },
    {
        "label": "GovUkNotify",
        "importPath": "govuk_notify.api",
        "description": "govuk_notify.api",
        "isExtraImport": true,
        "detail": "govuk_notify.api",
        "documentation": {}
    },
    {
        "label": "GovUkNotify",
        "importPath": "govuk_notify.api",
        "description": "govuk_notify.api",
        "isExtraImport": true,
        "detail": "govuk_notify.api",
        "documentation": {}
    },
    {
        "label": "GovUkNotify",
        "importPath": "govuk_notify.api",
        "description": "govuk_notify.api",
        "isExtraImport": true,
        "detail": "govuk_notify.api",
        "documentation": {}
    },
    {
        "label": "GovUkNotify",
        "importPath": "govuk_notify.api",
        "description": "govuk_notify.api",
        "isExtraImport": true,
        "detail": "govuk_notify.api",
        "documentation": {}
    },
    {
        "label": "UserRateThrottle",
        "importPath": "rest_framework.throttling",
        "description": "rest_framework.throttling",
        "isExtraImport": true,
        "detail": "rest_framework.throttling",
        "documentation": {}
    },
    {
        "label": "AnonRateThrottle",
        "importPath": "rest_framework.throttling",
        "description": "rest_framework.throttling",
        "isExtraImport": true,
        "detail": "rest_framework.throttling",
        "documentation": {}
    },
    {
        "label": "NestedSimpleRouter",
        "importPath": "core.drf.router",
        "description": "core.drf.router",
        "isExtraImport": true,
        "detail": "core.drf.router",
        "documentation": {}
    },
    {
        "label": "NestedCLARouter",
        "importPath": "core.drf.router",
        "description": "core.drf.router",
        "isExtraImport": true,
        "detail": "core.drf.router",
        "documentation": {}
    },
    {
        "label": "AdvancedSimpleRouter",
        "importPath": "core.drf.router",
        "description": "core.drf.router",
        "isExtraImport": true,
        "detail": "core.drf.router",
        "documentation": {}
    },
    {
        "label": "NestedSimpleRouter",
        "importPath": "core.drf.router",
        "description": "core.drf.router",
        "isExtraImport": true,
        "detail": "core.drf.router",
        "documentation": {}
    },
    {
        "label": "NestedCLARouter",
        "importPath": "core.drf.router",
        "description": "core.drf.router",
        "isExtraImport": true,
        "detail": "core.drf.router",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "relativedelta",
        "importPath": "dateutil.relativedelta",
        "description": "dateutil.relativedelta",
        "isExtraImport": true,
        "detail": "dateutil.relativedelta",
        "documentation": {}
    },
    {
        "label": "relativedelta",
        "importPath": "dateutil.relativedelta",
        "description": "dateutil.relativedelta",
        "isExtraImport": true,
        "detail": "dateutil.relativedelta",
        "documentation": {}
    },
    {
        "label": "relativedelta",
        "importPath": "dateutil.relativedelta",
        "description": "dateutil.relativedelta",
        "isExtraImport": true,
        "detail": "dateutil.relativedelta",
        "documentation": {}
    },
    {
        "label": "relativedelta",
        "importPath": "dateutil.relativedelta",
        "description": "dateutil.relativedelta",
        "isExtraImport": true,
        "detail": "dateutil.relativedelta",
        "documentation": {}
    },
    {
        "label": "MO",
        "importPath": "dateutil.relativedelta",
        "description": "dateutil.relativedelta",
        "isExtraImport": true,
        "detail": "dateutil.relativedelta",
        "documentation": {}
    },
    {
        "label": "TU",
        "importPath": "dateutil.relativedelta",
        "description": "dateutil.relativedelta",
        "isExtraImport": true,
        "detail": "dateutil.relativedelta",
        "documentation": {}
    },
    {
        "label": "relativedelta",
        "importPath": "dateutil.relativedelta",
        "description": "dateutil.relativedelta",
        "isExtraImport": true,
        "detail": "dateutil.relativedelta",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Max",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Min",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "SET_NULL",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "CaseArchived",
        "importPath": "historic.models",
        "description": "historic.models",
        "isExtraImport": true,
        "detail": "historic.models",
        "documentation": {}
    },
    {
        "label": "CaseArchived",
        "importPath": "historic.models",
        "description": "historic.models",
        "isExtraImport": true,
        "detail": "historic.models",
        "documentation": {}
    },
    {
        "label": "CaseArchived",
        "importPath": "historic.models",
        "description": "historic.models",
        "isExtraImport": true,
        "detail": "historic.models",
        "documentation": {}
    },
    {
        "label": "IsManagerOrMePermission",
        "importPath": "legalaid.permissions",
        "description": "legalaid.permissions",
        "isExtraImport": true,
        "detail": "legalaid.permissions",
        "documentation": {}
    },
    {
        "label": "IsManagerOrMePermission",
        "importPath": "legalaid.permissions",
        "description": "legalaid.permissions",
        "isExtraImport": true,
        "detail": "legalaid.permissions",
        "documentation": {}
    },
    {
        "label": "IsManagerOrMePermission",
        "importPath": "legalaid.permissions",
        "description": "legalaid.permissions",
        "isExtraImport": true,
        "detail": "legalaid.permissions",
        "documentation": {}
    },
    {
        "label": "detail_route",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "list_route",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "detail_route",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "detail_route",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "detail_route",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "detail_route",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "detail_route",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "OrderingFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "SearchFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "BaseFilterBackend",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "SearchFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "OrderingFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "OrderingFilter",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "rest_framework.filters",
        "description": "rest_framework.filters",
        "isExtraImport": true,
        "detail": "rest_framework.filters",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "BaseEventViewSet",
        "importPath": "cla_eventlog.views",
        "description": "cla_eventlog.views",
        "isExtraImport": true,
        "detail": "cla_eventlog.views",
        "documentation": {}
    },
    {
        "label": "BaseLogViewSet",
        "importPath": "cla_eventlog.views",
        "description": "cla_eventlog.views",
        "isExtraImport": true,
        "detail": "cla_eventlog.views",
        "documentation": {}
    },
    {
        "label": "BaseEventViewSet",
        "importPath": "cla_eventlog.views",
        "description": "cla_eventlog.views",
        "isExtraImport": true,
        "detail": "cla_eventlog.views",
        "documentation": {}
    },
    {
        "label": "BaseLogViewSet",
        "importPath": "cla_eventlog.views",
        "description": "cla_eventlog.views",
        "isExtraImport": true,
        "detail": "cla_eventlog.views",
        "documentation": {}
    },
    {
        "label": "FormActionMixin",
        "importPath": "core.drf.mixins",
        "description": "core.drf.mixins",
        "isExtraImport": true,
        "detail": "core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "ClaCreateModelMixin",
        "importPath": "core.drf.mixins",
        "description": "core.drf.mixins",
        "isExtraImport": true,
        "detail": "core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "ClaUpdateModelMixin",
        "importPath": "core.drf.mixins",
        "description": "core.drf.mixins",
        "isExtraImport": true,
        "detail": "core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "ClaCreateModelMixin",
        "importPath": "core.drf.mixins",
        "description": "core.drf.mixins",
        "isExtraImport": true,
        "detail": "core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "ClaUpdateModelMixin",
        "importPath": "core.drf.mixins",
        "description": "core.drf.mixins",
        "isExtraImport": true,
        "detail": "core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "NestedGenericModelMixin",
        "importPath": "core.drf.mixins",
        "description": "core.drf.mixins",
        "isExtraImport": true,
        "detail": "core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "ClaCreateModelMixin",
        "importPath": "core.drf.mixins",
        "description": "core.drf.mixins",
        "isExtraImport": true,
        "detail": "core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "ClaUpdateModelMixin",
        "importPath": "core.drf.mixins",
        "description": "core.drf.mixins",
        "isExtraImport": true,
        "detail": "core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "FormActionMixin",
        "importPath": "core.drf.mixins",
        "description": "core.drf.mixins",
        "isExtraImport": true,
        "detail": "core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "NestedGenericModelMixin",
        "importPath": "core.drf.mixins",
        "description": "core.drf.mixins",
        "isExtraImport": true,
        "detail": "core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "ClaCreateModelMixin",
        "importPath": "core.drf.mixins",
        "description": "core.drf.mixins",
        "isExtraImport": true,
        "detail": "core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "ClaUpdateModelMixin",
        "importPath": "core.drf.mixins",
        "description": "core.drf.mixins",
        "isExtraImport": true,
        "detail": "core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "ClaRetrieveModelMixinWithSelfInstance",
        "importPath": "core.drf.mixins",
        "description": "core.drf.mixins",
        "isExtraImport": true,
        "detail": "core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "NestedGenericModelMixin",
        "importPath": "core.drf.mixins",
        "description": "core.drf.mixins",
        "isExtraImport": true,
        "detail": "core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "ClaCreateModelMixin",
        "importPath": "core.drf.mixins",
        "description": "core.drf.mixins",
        "isExtraImport": true,
        "detail": "core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "ClaUpdateModelMixin",
        "importPath": "core.drf.mixins",
        "description": "core.drf.mixins",
        "isExtraImport": true,
        "detail": "core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "NestedGenericModelMixin",
        "importPath": "core.drf.mixins",
        "description": "core.drf.mixins",
        "isExtraImport": true,
        "detail": "core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "JsonPatchViewSetMixin",
        "importPath": "core.drf.mixins",
        "description": "core.drf.mixins",
        "isExtraImport": true,
        "detail": "core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "FormActionMixin",
        "importPath": "core.drf.mixins",
        "description": "core.drf.mixins",
        "isExtraImport": true,
        "detail": "core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "ClaCreateModelMixin",
        "importPath": "core.drf.mixins",
        "description": "core.drf.mixins",
        "isExtraImport": true,
        "detail": "core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "ClaUpdateModelMixin",
        "importPath": "core.drf.mixins",
        "description": "core.drf.mixins",
        "isExtraImport": true,
        "detail": "core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "ClaRetrieveModelMixinWithSelfInstance",
        "importPath": "core.drf.mixins",
        "description": "core.drf.mixins",
        "isExtraImport": true,
        "detail": "core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "CompatGenericViewSet",
        "importPath": "core.drf.viewsets",
        "description": "core.drf.viewsets",
        "isExtraImport": true,
        "detail": "core.drf.viewsets",
        "documentation": {}
    },
    {
        "label": "CompatGenericViewSet",
        "importPath": "core.drf.viewsets",
        "description": "core.drf.viewsets",
        "isExtraImport": true,
        "detail": "core.drf.viewsets",
        "documentation": {}
    },
    {
        "label": "CompatGenericViewSet",
        "importPath": "core.drf.viewsets",
        "description": "core.drf.viewsets",
        "isExtraImport": true,
        "detail": "core.drf.viewsets",
        "documentation": {}
    },
    {
        "label": "CompatGenericViewSet",
        "importPath": "core.drf.viewsets",
        "description": "core.drf.viewsets",
        "isExtraImport": true,
        "detail": "core.drf.viewsets",
        "documentation": {}
    },
    {
        "label": "CompatGenericViewSet",
        "importPath": "core.drf.viewsets",
        "description": "core.drf.viewsets",
        "isExtraImport": true,
        "detail": "core.drf.viewsets",
        "documentation": {}
    },
    {
        "label": "CompatGenericViewSet",
        "importPath": "core.drf.viewsets",
        "description": "core.drf.viewsets",
        "isExtraImport": true,
        "detail": "core.drf.viewsets",
        "documentation": {}
    },
    {
        "label": "CompatGenericViewSet",
        "importPath": "core.drf.viewsets",
        "description": "core.drf.viewsets",
        "isExtraImport": true,
        "detail": "core.drf.viewsets",
        "documentation": {}
    },
    {
        "label": "StandardResultsSetPagination",
        "importPath": "core.drf.paginator",
        "description": "core.drf.paginator",
        "isExtraImport": true,
        "detail": "core.drf.paginator",
        "documentation": {}
    },
    {
        "label": "StandardResultsSetPagination",
        "importPath": "core.drf.paginator",
        "description": "core.drf.paginator",
        "isExtraImport": true,
        "detail": "core.drf.paginator",
        "documentation": {}
    },
    {
        "label": "StandardResultsSetPagination",
        "importPath": "core.drf.paginator",
        "description": "core.drf.paginator",
        "isExtraImport": true,
        "detail": "core.drf.paginator",
        "documentation": {}
    },
    {
        "label": "StandardResultsSetPagination",
        "importPath": "core.drf.paginator",
        "description": "core.drf.paginator",
        "isExtraImport": true,
        "detail": "core.drf.paginator",
        "documentation": {}
    },
    {
        "label": "CaseNotesHistoryResultsSetPagination",
        "importPath": "core.drf.paginator",
        "description": "core.drf.paginator",
        "isExtraImport": true,
        "detail": "core.drf.paginator",
        "documentation": {}
    },
    {
        "label": "BaseNotificationViewSet",
        "importPath": "notifications.views",
        "description": "notifications.views",
        "isExtraImport": true,
        "detail": "notifications.views",
        "documentation": {}
    },
    {
        "label": "BaseComplaintViewSet",
        "importPath": "complaints.views",
        "description": "complaints.views",
        "isExtraImport": true,
        "detail": "complaints.views",
        "documentation": {}
    },
    {
        "label": "BaseComplaintConstantsView",
        "importPath": "complaints.views",
        "description": "complaints.views",
        "isExtraImport": true,
        "detail": "complaints.views",
        "documentation": {}
    },
    {
        "label": "BaseComplaintCategoryViewSet",
        "importPath": "complaints.views",
        "description": "complaints.views",
        "isExtraImport": true,
        "detail": "complaints.views",
        "documentation": {}
    },
    {
        "label": "BaseComplaintLogViewset",
        "importPath": "complaints.views",
        "description": "complaints.views",
        "isExtraImport": true,
        "detail": "complaints.views",
        "documentation": {}
    },
    {
        "label": "BaseTimerViewSet",
        "importPath": "timer.views",
        "description": "timer.views",
        "isExtraImport": true,
        "detail": "timer.views",
        "documentation": {}
    },
    {
        "label": "BaseUserViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseCategoryViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseNestedEligibilityCheckViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseMatterTypeViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseMediaCodeViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "FullPersonalDetailsViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseThirdPartyDetailsViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseAdaptationDetailsViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseAdaptationDetailsMetadataViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "FullCaseViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseCaseNotesHistoryViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "AscCaseOrderingFilter",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseCSVUploadReadOnlyViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseCaseLogMixin",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseEODDetailsViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseContactResearchMethodViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseCategoryViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseEligibilityCheckViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseCaseLogMixin",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseUserViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseNestedEligibilityCheckViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseCategoryViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseMatterTypeViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseMediaCodeViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "FullPersonalDetailsViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseThirdPartyDetailsViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseAdaptationDetailsViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseAdaptationDetailsMetadataViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseContactResearchMethodViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "FullCaseViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseFeedbackViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseCaseNotesHistoryViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseCSVUploadViewSet",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "DescCaseOrderingFilter",
        "importPath": "legalaid.views",
        "description": "legalaid.views",
        "isExtraImport": true,
        "detail": "legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseArticleViewSet",
        "importPath": "knowledgebase.views",
        "description": "knowledgebase.views",
        "isExtraImport": true,
        "detail": "knowledgebase.views",
        "documentation": {}
    },
    {
        "label": "BaseArticleCategoryViewSet",
        "importPath": "knowledgebase.views",
        "description": "knowledgebase.views",
        "isExtraImport": true,
        "detail": "knowledgebase.views",
        "documentation": {}
    },
    {
        "label": "BaseArticleViewSet",
        "importPath": "knowledgebase.views",
        "description": "knowledgebase.views",
        "isExtraImport": true,
        "detail": "knowledgebase.views",
        "documentation": {}
    },
    {
        "label": "ArticleCategoryFilter",
        "importPath": "knowledgebase.views",
        "description": "knowledgebase.views",
        "isExtraImport": true,
        "detail": "knowledgebase.views",
        "documentation": {}
    },
    {
        "label": "BaseDiagnosisViewSet",
        "importPath": "diagnosis.views",
        "description": "diagnosis.views",
        "isExtraImport": true,
        "detail": "diagnosis.views",
        "documentation": {}
    },
    {
        "label": "DiagnosisModelMixin",
        "importPath": "diagnosis.views",
        "description": "diagnosis.views",
        "isExtraImport": true,
        "detail": "diagnosis.views",
        "documentation": {}
    },
    {
        "label": "BaseDiagnosisViewSet",
        "importPath": "diagnosis.views",
        "description": "diagnosis.views",
        "isExtraImport": true,
        "detail": "diagnosis.views",
        "documentation": {}
    },
    {
        "label": "BaseGuidanceNoteViewSet",
        "importPath": "guidance.views",
        "description": "guidance.views",
        "isExtraImport": true,
        "detail": "guidance.views",
        "documentation": {}
    },
    {
        "label": "AuditLog",
        "importPath": "cla_auditlog.models",
        "description": "cla_auditlog.models",
        "isExtraImport": true,
        "detail": "cla_auditlog.models",
        "documentation": {}
    },
    {
        "label": "AuditLog",
        "importPath": "cla_auditlog.models",
        "description": "cla_auditlog.models",
        "isExtraImport": true,
        "detail": "cla_auditlog.models",
        "documentation": {}
    },
    {
        "label": "AuditLog",
        "importPath": "cla_auditlog.models",
        "description": "cla_auditlog.models",
        "isExtraImport": true,
        "detail": "cla_auditlog.models",
        "documentation": {}
    },
    {
        "label": "AuditLog",
        "importPath": "cla_auditlog.models",
        "description": "cla_auditlog.models",
        "isExtraImport": true,
        "detail": "cla_auditlog.models",
        "documentation": {}
    },
    {
        "label": "AuditLog",
        "importPath": "cla_auditlog.models",
        "description": "cla_auditlog.models",
        "isExtraImport": true,
        "detail": "cla_auditlog.models",
        "documentation": {}
    },
    {
        "label": "AuditLog",
        "importPath": "cla_auditlog.models",
        "description": "cla_auditlog.models",
        "isExtraImport": true,
        "detail": "cla_auditlog.models",
        "documentation": {}
    },
    {
        "label": "uuidfield.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuidfield.fields",
        "description": "uuidfield.fields",
        "detail": "uuidfield.fields",
        "documentation": {}
    },
    {
        "label": "CaseSerializer",
        "importPath": "checker.serializers",
        "description": "checker.serializers",
        "isExtraImport": true,
        "detail": "checker.serializers",
        "documentation": {}
    },
    {
        "label": "DiagnosisTraversal",
        "importPath": "diagnosis.models",
        "description": "diagnosis.models",
        "isExtraImport": true,
        "detail": "diagnosis.models",
        "documentation": {}
    },
    {
        "label": "DiagnosisTraversal",
        "importPath": "diagnosis.models",
        "description": "diagnosis.models",
        "isExtraImport": true,
        "detail": "diagnosis.models",
        "documentation": {}
    },
    {
        "label": "DiagnosisTraversal",
        "importPath": "diagnosis.models",
        "description": "diagnosis.models",
        "isExtraImport": true,
        "detail": "diagnosis.models",
        "documentation": {}
    },
    {
        "label": "DiagnosisTraversal",
        "importPath": "diagnosis.models",
        "description": "diagnosis.models",
        "isExtraImport": true,
        "detail": "diagnosis.models",
        "documentation": {}
    },
    {
        "label": "DiagnosisTraversal",
        "importPath": "diagnosis.models",
        "description": "diagnosis.models",
        "isExtraImport": true,
        "detail": "diagnosis.models",
        "documentation": {}
    },
    {
        "label": "DiagnosisTraversal",
        "importPath": "diagnosis.models",
        "description": "diagnosis.models",
        "isExtraImport": true,
        "detail": "diagnosis.models",
        "documentation": {}
    },
    {
        "label": "DiagnosisTraversal",
        "importPath": "diagnosis.models",
        "description": "diagnosis.models",
        "isExtraImport": true,
        "detail": "diagnosis.models",
        "documentation": {}
    },
    {
        "label": "DiagnosisTraversal",
        "importPath": "diagnosis.models",
        "description": "diagnosis.models",
        "isExtraImport": true,
        "detail": "diagnosis.models",
        "documentation": {}
    },
    {
        "label": "DiagnosisTraversal",
        "importPath": "diagnosis.models",
        "description": "diagnosis.models",
        "isExtraImport": true,
        "detail": "diagnosis.models",
        "documentation": {}
    },
    {
        "label": "DiagnosisTraversal",
        "importPath": "diagnosis.models",
        "description": "diagnosis.models",
        "isExtraImport": true,
        "detail": "diagnosis.models",
        "documentation": {}
    },
    {
        "label": "DiagnosisTraversal",
        "importPath": "diagnosis.models",
        "description": "diagnosis.models",
        "isExtraImport": true,
        "detail": "diagnosis.models",
        "documentation": {}
    },
    {
        "label": "ReasonForContacting",
        "importPath": "checker.models",
        "description": "checker.models",
        "isExtraImport": true,
        "detail": "checker.models",
        "documentation": {}
    },
    {
        "label": "ReasonForContacting",
        "importPath": "checker.models",
        "description": "checker.models",
        "isExtraImport": true,
        "detail": "checker.models",
        "documentation": {}
    },
    {
        "label": "ReasonForContacting",
        "importPath": "checker.models",
        "description": "checker.models",
        "isExtraImport": true,
        "detail": "checker.models",
        "documentation": {}
    },
    {
        "label": "ReasonForContactingCategory",
        "importPath": "checker.models",
        "description": "checker.models",
        "isExtraImport": true,
        "detail": "checker.models",
        "documentation": {}
    },
    {
        "label": "ReasonForContactingCategory",
        "importPath": "checker.models",
        "description": "checker.models",
        "isExtraImport": true,
        "detail": "checker.models",
        "documentation": {}
    },
    {
        "label": "ReasonForContacting",
        "importPath": "checker.models",
        "description": "checker.models",
        "isExtraImport": true,
        "detail": "checker.models",
        "documentation": {}
    },
    {
        "label": "ReasonForContacting",
        "importPath": "checker.models",
        "description": "checker.models",
        "isExtraImport": true,
        "detail": "checker.models",
        "documentation": {}
    },
    {
        "label": "ReasonForContacting",
        "importPath": "checker.models",
        "description": "checker.models",
        "isExtraImport": true,
        "detail": "checker.models",
        "documentation": {}
    },
    {
        "label": "ReasonForContacting",
        "importPath": "checker.models",
        "description": "checker.models",
        "isExtraImport": true,
        "detail": "checker.models",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "UUIDField",
        "importPath": "uuidfield",
        "description": "uuidfield",
        "isExtraImport": true,
        "detail": "uuidfield",
        "documentation": {}
    },
    {
        "label": "UUIDField",
        "importPath": "uuidfield",
        "description": "uuidfield",
        "isExtraImport": true,
        "detail": "uuidfield",
        "documentation": {}
    },
    {
        "label": "UUIDField",
        "importPath": "uuidfield",
        "description": "uuidfield",
        "isExtraImport": true,
        "detail": "uuidfield",
        "documentation": {}
    },
    {
        "label": "UUIDField",
        "importPath": "uuidfield",
        "description": "uuidfield",
        "isExtraImport": true,
        "detail": "uuidfield",
        "documentation": {}
    },
    {
        "label": "SimpleLazyObject",
        "importPath": "django.utils.functional",
        "description": "django.utils.functional",
        "isExtraImport": true,
        "detail": "django.utils.functional",
        "documentation": {}
    },
    {
        "label": "lazy",
        "importPath": "django.utils.functional",
        "description": "django.utils.functional",
        "isExtraImport": true,
        "detail": "django.utils.functional",
        "documentation": {}
    },
    {
        "label": "SimpleLazyObject",
        "importPath": "django.utils.functional",
        "description": "django.utils.functional",
        "isExtraImport": true,
        "detail": "django.utils.functional",
        "documentation": {}
    },
    {
        "label": "get_graph",
        "importPath": "diagnosis.graph",
        "description": "diagnosis.graph",
        "isExtraImport": true,
        "detail": "diagnosis.graph",
        "documentation": {}
    },
    {
        "label": "get_graph",
        "importPath": "diagnosis.graph",
        "description": "diagnosis.graph",
        "isExtraImport": true,
        "detail": "diagnosis.graph",
        "documentation": {}
    },
    {
        "label": "get_graph",
        "importPath": "diagnosis.graph",
        "description": "diagnosis.graph",
        "isExtraImport": true,
        "detail": "diagnosis.graph",
        "documentation": {}
    },
    {
        "label": "DiagnosisSerializer",
        "importPath": "diagnosis.serializers",
        "description": "diagnosis.serializers",
        "isExtraImport": true,
        "detail": "diagnosis.serializers",
        "documentation": {}
    },
    {
        "label": "DiagnosisSerializer",
        "importPath": "diagnosis.serializers",
        "description": "diagnosis.serializers",
        "isExtraImport": true,
        "detail": "diagnosis.serializers",
        "documentation": {}
    },
    {
        "label": "DiagnosisSerializer",
        "importPath": "diagnosis.serializers",
        "description": "diagnosis.serializers",
        "isExtraImport": true,
        "detail": "diagnosis.serializers",
        "documentation": {}
    },
    {
        "label": "get_web_user",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "get_web_user",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "get_web_user",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "BaseCaseTestCase",
        "importPath": "call_centre.tests.api.test_case_api",
        "description": "call_centre.tests.api.test_case_api",
        "isExtraImport": true,
        "detail": "call_centre.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "ComplaintTestMixin",
        "importPath": "complaints.tests.test_complaints_api",
        "description": "complaints.tests.test_complaints_api",
        "isExtraImport": true,
        "detail": "complaints.tests.test_complaints_api",
        "documentation": {}
    },
    {
        "label": "Choices",
        "importPath": "extended_choices",
        "description": "extended_choices",
        "isExtraImport": true,
        "detail": "extended_choices",
        "documentation": {}
    },
    {
        "label": "Choices",
        "importPath": "extended_choices",
        "description": "extended_choices",
        "isExtraImport": true,
        "detail": "extended_choices",
        "documentation": {}
    },
    {
        "label": "Choices",
        "importPath": "extended_choices",
        "description": "extended_choices",
        "isExtraImport": true,
        "detail": "extended_choices",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "NoArgsCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "LabelCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "CommandError",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "NoArgsCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "LabelCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "NoArgsCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "NoArgsCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "atomic",
        "importPath": "django.db.transaction",
        "description": "django.db.transaction",
        "isExtraImport": true,
        "detail": "django.db.transaction",
        "documentation": {}
    },
    {
        "label": "atomic",
        "importPath": "django.db.transaction",
        "description": "django.db.transaction",
        "isExtraImport": true,
        "detail": "django.db.transaction",
        "documentation": {}
    },
    {
        "label": "atomic",
        "importPath": "django.db.transaction",
        "description": "django.db.transaction",
        "isExtraImport": true,
        "detail": "django.db.transaction",
        "documentation": {}
    },
    {
        "label": "atomic",
        "importPath": "django.db.transaction",
        "description": "django.db.transaction",
        "isExtraImport": true,
        "detail": "django.db.transaction",
        "documentation": {}
    },
    {
        "label": "ConnectionDoesNotExist",
        "importPath": "django.db.utils",
        "description": "django.db.utils",
        "isExtraImport": true,
        "detail": "django.db.utils",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db.utils",
        "description": "django.db.utils",
        "isExtraImport": true,
        "detail": "django.db.utils",
        "documentation": {}
    },
    {
        "label": "InternalError",
        "importPath": "django.db.utils",
        "description": "django.db.utils",
        "isExtraImport": true,
        "detail": "django.db.utils",
        "documentation": {}
    },
    {
        "label": "ConnectionDoesNotExist",
        "importPath": "django.db.utils",
        "description": "django.db.utils",
        "isExtraImport": true,
        "detail": "django.db.utils",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "AccessAttempt",
        "importPath": "cla_auth.models",
        "description": "cla_auth.models",
        "isExtraImport": true,
        "detail": "cla_auth.models",
        "documentation": {}
    },
    {
        "label": "AccessAttempt",
        "importPath": "cla_auth.models",
        "description": "cla_auth.models",
        "isExtraImport": true,
        "detail": "cla_auth.models",
        "documentation": {}
    },
    {
        "label": "AccessAttempt",
        "importPath": "cla_auth.models",
        "description": "cla_auth.models",
        "isExtraImport": true,
        "detail": "cla_auth.models",
        "documentation": {}
    },
    {
        "label": "AccessAttempt",
        "importPath": "cla_auth.models",
        "description": "cla_auth.models",
        "isExtraImport": true,
        "detail": "cla_auth.models",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "get_ip",
        "importPath": "ipware.ip",
        "description": "ipware.ip",
        "isExtraImport": true,
        "detail": "ipware.ip",
        "documentation": {}
    },
    {
        "label": "Throttled",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthenticationFailed",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthenticationFailed",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "APIException",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "MethodNotAllowed",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ParseError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ParseError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "TokenView",
        "importPath": "oauth2_provider.views",
        "description": "oauth2_provider.views",
        "isExtraImport": true,
        "detail": "oauth2_provider.views",
        "documentation": {}
    },
    {
        "label": "OAuth2Error",
        "importPath": "oauthlib.oauth2.rfc6749",
        "description": "oauthlib.oauth2.rfc6749",
        "isExtraImport": true,
        "detail": "oauthlib.oauth2.rfc6749",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "delete_option_no_personal_details",
        "importPath": "cla_butler.constants",
        "description": "cla_butler.constants",
        "isExtraImport": true,
        "detail": "cla_butler.constants",
        "documentation": {}
    },
    {
        "label": "delete_option_three_years",
        "importPath": "cla_butler.constants",
        "description": "cla_butler.constants",
        "isExtraImport": true,
        "detail": "cla_butler.constants",
        "documentation": {}
    },
    {
        "label": "delete_option_three_years",
        "importPath": "cla_butler.constants",
        "description": "cla_butler.constants",
        "isExtraImport": true,
        "detail": "cla_butler.constants",
        "documentation": {}
    },
    {
        "label": "delete_option_no_personal_details",
        "importPath": "cla_butler.constants",
        "description": "cla_butler.constants",
        "isExtraImport": true,
        "detail": "cla_butler.constants",
        "documentation": {}
    },
    {
        "label": "delete_option_three_years",
        "importPath": "cla_butler.constants",
        "description": "cla_butler.constants",
        "isExtraImport": true,
        "detail": "cla_butler.constants",
        "documentation": {}
    },
    {
        "label": "delete_option_no_personal_details",
        "importPath": "cla_butler.constants",
        "description": "cla_butler.constants",
        "isExtraImport": true,
        "detail": "cla_butler.constants",
        "documentation": {}
    },
    {
        "label": "DeleteOldData",
        "importPath": "cla_butler.tasks",
        "description": "cla_butler.tasks",
        "isExtraImport": true,
        "detail": "cla_butler.tasks",
        "documentation": {}
    },
    {
        "label": "DiversityDataCheckTask",
        "importPath": "cla_butler.tasks",
        "description": "cla_butler.tasks",
        "isExtraImport": true,
        "detail": "cla_butler.tasks",
        "documentation": {}
    },
    {
        "label": "DiversityDataReencryptTask",
        "importPath": "cla_butler.tasks",
        "description": "cla_butler.tasks",
        "isExtraImport": true,
        "detail": "cla_butler.tasks",
        "documentation": {}
    },
    {
        "label": "DeleteOldData",
        "importPath": "cla_butler.tasks",
        "description": "cla_butler.tasks",
        "isExtraImport": true,
        "detail": "cla_butler.tasks",
        "documentation": {}
    },
    {
        "label": "DeleteOldData",
        "importPath": "cla_butler.tasks",
        "description": "cla_butler.tasks",
        "isExtraImport": true,
        "detail": "cla_butler.tasks",
        "documentation": {}
    },
    {
        "label": "get_pks",
        "importPath": "cla_butler.tasks",
        "description": "cla_butler.tasks",
        "isExtraImport": true,
        "detail": "cla_butler.tasks",
        "documentation": {}
    },
    {
        "label": "DiversityDataCheckTask",
        "importPath": "cla_butler.tasks",
        "description": "cla_butler.tasks",
        "isExtraImport": true,
        "detail": "cla_butler.tasks",
        "documentation": {}
    },
    {
        "label": "DiversityDataReencryptTask",
        "importPath": "cla_butler.tasks",
        "description": "cla_butler.tasks",
        "isExtraImport": true,
        "detail": "cla_butler.tasks",
        "documentation": {}
    },
    {
        "label": "DiversityDataCheck",
        "importPath": "cla_butler.models",
        "description": "cla_butler.models",
        "isExtraImport": true,
        "detail": "cla_butler.models",
        "documentation": {}
    },
    {
        "label": "ACTION",
        "importPath": "cla_butler.models",
        "description": "cla_butler.models",
        "isExtraImport": true,
        "detail": "cla_butler.models",
        "documentation": {}
    },
    {
        "label": "DiversityDataCheck",
        "importPath": "cla_butler.models",
        "description": "cla_butler.models",
        "isExtraImport": true,
        "detail": "cla_butler.models",
        "documentation": {}
    },
    {
        "label": "ACTION",
        "importPath": "cla_butler.models",
        "description": "cla_butler.models",
        "isExtraImport": true,
        "detail": "cla_butler.models",
        "documentation": {}
    },
    {
        "label": "DiversityDataCheck",
        "importPath": "cla_butler.models",
        "description": "cla_butler.models",
        "isExtraImport": true,
        "detail": "cla_butler.models",
        "documentation": {}
    },
    {
        "label": "ACTION",
        "importPath": "cla_butler.models",
        "description": "cla_butler.models",
        "isExtraImport": true,
        "detail": "cla_butler.models",
        "documentation": {}
    },
    {
        "label": "STATUS",
        "importPath": "cla_butler.models",
        "description": "cla_butler.models",
        "isExtraImport": true,
        "detail": "cla_butler.models",
        "documentation": {}
    },
    {
        "label": "DiversityDataCheck",
        "importPath": "cla_butler.models",
        "description": "cla_butler.models",
        "isExtraImport": true,
        "detail": "cla_butler.models",
        "documentation": {}
    },
    {
        "label": "ACTION",
        "importPath": "cla_butler.models",
        "description": "cla_butler.models",
        "isExtraImport": true,
        "detail": "cla_butler.models",
        "documentation": {}
    },
    {
        "label": "DiversityDataCheck",
        "importPath": "cla_butler.models",
        "description": "cla_butler.models",
        "isExtraImport": true,
        "detail": "cla_butler.models",
        "documentation": {}
    },
    {
        "label": "ACTION",
        "importPath": "cla_butler.models",
        "description": "cla_butler.models",
        "isExtraImport": true,
        "detail": "cla_butler.models",
        "documentation": {}
    },
    {
        "label": "STATUS",
        "importPath": "cla_butler.models",
        "description": "cla_butler.models",
        "isExtraImport": true,
        "detail": "cla_butler.models",
        "documentation": {}
    },
    {
        "label": "DiversityDataCheck",
        "importPath": "cla_butler.models",
        "description": "cla_butler.models",
        "isExtraImport": true,
        "detail": "cla_butler.models",
        "documentation": {}
    },
    {
        "label": "ACTION",
        "importPath": "cla_butler.models",
        "description": "cla_butler.models",
        "isExtraImport": true,
        "detail": "cla_butler.models",
        "documentation": {}
    },
    {
        "label": "STATUS",
        "importPath": "cla_butler.models",
        "description": "cla_butler.models",
        "isExtraImport": true,
        "detail": "cla_butler.models",
        "documentation": {}
    },
    {
        "label": "LogEntry",
        "importPath": "django.contrib.admin.models",
        "description": "django.contrib.admin.models",
        "isExtraImport": true,
        "detail": "django.contrib.admin.models",
        "documentation": {}
    },
    {
        "label": "LogEntry",
        "importPath": "django.contrib.admin.models",
        "description": "django.contrib.admin.models",
        "isExtraImport": true,
        "detail": "django.contrib.admin.models",
        "documentation": {}
    },
    {
        "label": "LogEntry",
        "importPath": "django.contrib.admin.models",
        "description": "django.contrib.admin.models",
        "isExtraImport": true,
        "detail": "django.contrib.admin.models",
        "documentation": {}
    },
    {
        "label": "LogEntry",
        "importPath": "django.contrib.admin.models",
        "description": "django.contrib.admin.models",
        "isExtraImport": true,
        "detail": "django.contrib.admin.models",
        "documentation": {}
    },
    {
        "label": "QuerysetToFile",
        "importPath": "cla_butler.qs_to_file",
        "description": "cla_butler.qs_to_file",
        "isExtraImport": true,
        "detail": "cla_butler.qs_to_file",
        "documentation": {}
    },
    {
        "label": "Complaint",
        "importPath": "complaints.models",
        "description": "complaints.models",
        "isExtraImport": true,
        "detail": "complaints.models",
        "documentation": {}
    },
    {
        "label": "Complaint",
        "importPath": "complaints.models",
        "description": "complaints.models",
        "isExtraImport": true,
        "detail": "complaints.models",
        "documentation": {}
    },
    {
        "label": "Complaint",
        "importPath": "complaints.models",
        "description": "complaints.models",
        "isExtraImport": true,
        "detail": "complaints.models",
        "documentation": {}
    },
    {
        "label": "Complaint",
        "importPath": "complaints.models",
        "description": "complaints.models",
        "isExtraImport": true,
        "detail": "complaints.models",
        "documentation": {}
    },
    {
        "label": "Complaint",
        "importPath": "complaints.models",
        "description": "complaints.models",
        "isExtraImport": true,
        "detail": "complaints.models",
        "documentation": {}
    },
    {
        "label": "timer.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "timer.models",
        "description": "timer.models",
        "detail": "timer.models",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "timer.models",
        "description": "timer.models",
        "isExtraImport": true,
        "detail": "timer.models",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "timer.models",
        "description": "timer.models",
        "isExtraImport": true,
        "detail": "timer.models",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "timer.models",
        "description": "timer.models",
        "isExtraImport": true,
        "detail": "timer.models",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "timer.models",
        "description": "timer.models",
        "isExtraImport": true,
        "detail": "timer.models",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "timer.models",
        "description": "timer.models",
        "isExtraImport": true,
        "detail": "timer.models",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "timer.models",
        "description": "timer.models",
        "isExtraImport": true,
        "detail": "timer.models",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "timer.models",
        "description": "timer.models",
        "isExtraImport": true,
        "detail": "timer.models",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "timer.models",
        "description": "timer.models",
        "isExtraImport": true,
        "detail": "timer.models",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "timer.models",
        "description": "timer.models",
        "isExtraImport": true,
        "detail": "timer.models",
        "documentation": {}
    },
    {
        "label": "management",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "validators",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "management",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "validators",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "management",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "CreateSampleDiversityData",
        "importPath": "cla_butler.tests.mixins",
        "description": "cla_butler.tests.mixins",
        "isExtraImport": true,
        "detail": "cla_butler.tests.mixins",
        "documentation": {}
    },
    {
        "label": "CreateSampleDiversityData",
        "importPath": "cla_butler.tests.mixins",
        "description": "cla_butler.tests.mixins",
        "isExtraImport": true,
        "detail": "cla_butler.tests.mixins",
        "documentation": {}
    },
    {
        "label": "CreateSampleDiversityData",
        "importPath": "cla_butler.tests.mixins",
        "description": "cla_butler.tests.mixins",
        "isExtraImport": true,
        "detail": "cla_butler.tests.mixins",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "cla_butler.management.commands.diversity_data_reencrypt",
        "description": "cla_butler.management.commands.diversity_data_reencrypt",
        "isExtraImport": true,
        "detail": "cla_butler.management.commands.diversity_data_reencrypt",
        "documentation": {}
    },
    {
        "label": "freeze_time",
        "importPath": "freezegun",
        "description": "freezegun",
        "isExtraImport": true,
        "detail": "freezegun",
        "documentation": {}
    },
    {
        "label": "freeze_time",
        "importPath": "freezegun",
        "description": "freezegun",
        "isExtraImport": true,
        "detail": "freezegun",
        "documentation": {}
    },
    {
        "label": "freeze_time",
        "importPath": "freezegun",
        "description": "freezegun",
        "isExtraImport": true,
        "detail": "freezegun",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "parse_datetime",
        "importPath": "django.utils.dateparse",
        "description": "django.utils.dateparse",
        "isExtraImport": true,
        "detail": "django.utils.dateparse",
        "documentation": {}
    },
    {
        "label": "JSONField",
        "importPath": "jsonfield",
        "description": "jsonfield",
        "isExtraImport": true,
        "detail": "jsonfield",
        "documentation": {}
    },
    {
        "label": "JSONField",
        "importPath": "jsonfield",
        "description": "jsonfield",
        "isExtraImport": true,
        "detail": "jsonfield",
        "documentation": {}
    },
    {
        "label": "JSONField",
        "importPath": "jsonfield",
        "description": "jsonfield",
        "isExtraImport": true,
        "detail": "jsonfield",
        "documentation": {}
    },
    {
        "label": "JSONField",
        "importPath": "jsonfield",
        "description": "jsonfield",
        "isExtraImport": true,
        "detail": "jsonfield",
        "documentation": {}
    },
    {
        "label": "JSONField",
        "importPath": "jsonfield",
        "description": "jsonfield",
        "isExtraImport": true,
        "detail": "jsonfield",
        "documentation": {}
    },
    {
        "label": "cla_common.money_interval.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cla_common.money_interval.fields",
        "description": "cla_common.money_interval.fields",
        "detail": "cla_common.money_interval.fields",
        "documentation": {}
    },
    {
        "label": "MoneyIntervalField",
        "importPath": "cla_common.money_interval.fields",
        "description": "cla_common.money_interval.fields",
        "isExtraImport": true,
        "detail": "cla_common.money_interval.fields",
        "documentation": {}
    },
    {
        "label": "MoneyIntervalField",
        "importPath": "cla_common.money_interval.fields",
        "description": "cla_common.money_interval.fields",
        "isExtraImport": true,
        "detail": "cla_common.money_interval.fields",
        "documentation": {}
    },
    {
        "label": "MoneyIntervalField",
        "importPath": "cla_common.money_interval.fields",
        "description": "cla_common.money_interval.fields",
        "isExtraImport": true,
        "detail": "cla_common.money_interval.fields",
        "documentation": {}
    },
    {
        "label": "MoneyIntervalField",
        "importPath": "cla_common.money_interval.fields",
        "description": "cla_common.money_interval.fields",
        "isExtraImport": true,
        "detail": "cla_common.money_interval.fields",
        "documentation": {}
    },
    {
        "label": "MoneyInterval",
        "importPath": "cla_common.money_interval.models",
        "description": "cla_common.money_interval.models",
        "isExtraImport": true,
        "detail": "cla_common.money_interval.models",
        "documentation": {}
    },
    {
        "label": "MoneyInterval",
        "importPath": "cla_common.money_interval.models",
        "description": "cla_common.money_interval.models",
        "isExtraImport": true,
        "detail": "cla_common.money_interval.models",
        "documentation": {}
    },
    {
        "label": "MoneyInterval",
        "importPath": "cla_common.money_interval.models",
        "description": "cla_common.money_interval.models",
        "isExtraImport": true,
        "detail": "cla_common.money_interval.models",
        "documentation": {}
    },
    {
        "label": "MoneyInterval",
        "importPath": "cla_common.money_interval.models",
        "description": "cla_common.money_interval.models",
        "isExtraImport": true,
        "detail": "cla_common.money_interval.models",
        "documentation": {}
    },
    {
        "label": "MoneyInterval",
        "importPath": "cla_common.money_interval.models",
        "description": "cla_common.money_interval.models",
        "isExtraImport": true,
        "detail": "cla_common.money_interval.models",
        "documentation": {}
    },
    {
        "label": "MoneyInterval",
        "importPath": "cla_common.money_interval.models",
        "description": "cla_common.money_interval.models",
        "isExtraImport": true,
        "detail": "cla_common.money_interval.models",
        "documentation": {}
    },
    {
        "label": "MoneyInterval",
        "importPath": "cla_common.money_interval.models",
        "description": "cla_common.money_interval.models",
        "isExtraImport": true,
        "detail": "cla_common.money_interval.models",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "django.contrib.sessions.models",
        "description": "django.contrib.sessions.models",
        "isExtraImport": true,
        "detail": "django.contrib.sessions.models",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "call_centre_availability",
        "importPath": "cla_common",
        "description": "cla_common",
        "isExtraImport": true,
        "detail": "cla_common",
        "documentation": {}
    },
    {
        "label": "call_centre_availability",
        "importPath": "cla_common",
        "description": "cla_common",
        "isExtraImport": true,
        "detail": "cla_common",
        "documentation": {}
    },
    {
        "label": "call_centre_availability",
        "importPath": "cla_common",
        "description": "cla_common",
        "isExtraImport": true,
        "detail": "cla_common",
        "documentation": {}
    },
    {
        "label": "get_sla_time",
        "importPath": "legalaid.utils.sla",
        "description": "legalaid.utils.sla",
        "isExtraImport": true,
        "detail": "legalaid.utils.sla",
        "documentation": {}
    },
    {
        "label": "get_day_sla_time",
        "importPath": "legalaid.utils.sla",
        "description": "legalaid.utils.sla",
        "isExtraImport": true,
        "detail": "legalaid.utils.sla",
        "documentation": {}
    },
    {
        "label": "is_in_business_hours",
        "importPath": "legalaid.utils.sla",
        "description": "legalaid.utils.sla",
        "isExtraImport": true,
        "detail": "legalaid.utils.sla",
        "documentation": {}
    },
    {
        "label": "operator_hours",
        "importPath": "legalaid.utils.sla",
        "description": "legalaid.utils.sla",
        "isExtraImport": true,
        "detail": "legalaid.utils.sla",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "UTC",
        "importPath": "pytz",
        "description": "pytz",
        "isExtraImport": true,
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "ReportsS3",
        "importPath": "cla_backend.libs.aws.s3",
        "description": "cla_backend.libs.aws.s3",
        "isExtraImport": true,
        "detail": "cla_backend.libs.aws.s3",
        "documentation": {}
    },
    {
        "label": "ClientError",
        "importPath": "cla_backend.libs.aws.s3",
        "description": "cla_backend.libs.aws.s3",
        "isExtraImport": true,
        "detail": "cla_backend.libs.aws.s3",
        "documentation": {}
    },
    {
        "label": "ReportsS3",
        "importPath": "cla_backend.libs.aws.s3",
        "description": "cla_backend.libs.aws.s3",
        "isExtraImport": true,
        "detail": "cla_backend.libs.aws.s3",
        "documentation": {}
    },
    {
        "label": "ReportsS3",
        "importPath": "cla_backend.libs.aws.s3",
        "description": "cla_backend.libs.aws.s3",
        "isExtraImport": true,
        "detail": "cla_backend.libs.aws.s3",
        "documentation": {}
    },
    {
        "label": "ReportsS3",
        "importPath": "cla_backend.libs.aws.s3",
        "description": "cla_backend.libs.aws.s3",
        "isExtraImport": true,
        "detail": "cla_backend.libs.aws.s3",
        "documentation": {}
    },
    {
        "label": "jsonfield.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jsonfield.fields",
        "description": "jsonfield.fields",
        "detail": "jsonfield.fields",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "cla_eventlog.management.commands.add_72h_to_context",
        "description": "cla_eventlog.management.commands.add_72h_to_context",
        "isExtraImport": true,
        "detail": "cla_eventlog.management.commands.add_72h_to_context",
        "documentation": {}
    },
    {
        "label": "EventRegistry",
        "importPath": "cla_eventlog.registry",
        "description": "cla_eventlog.registry",
        "isExtraImport": true,
        "detail": "cla_eventlog.registry",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "importPath": "cla_eventlog.registry",
        "description": "cla_eventlog.registry",
        "isExtraImport": true,
        "detail": "cla_eventlog.registry",
        "documentation": {}
    },
    {
        "label": "get_timer",
        "importPath": "timer.utils",
        "description": "timer.utils",
        "isExtraImport": true,
        "detail": "timer.utils",
        "documentation": {}
    },
    {
        "label": "get_timer",
        "importPath": "timer.utils",
        "description": "timer.utils",
        "isExtraImport": true,
        "detail": "timer.utils",
        "documentation": {}
    },
    {
        "label": "create_timer",
        "importPath": "timer.utils",
        "description": "timer.utils",
        "isExtraImport": true,
        "detail": "timer.utils",
        "documentation": {}
    },
    {
        "label": "get_or_create_timer",
        "importPath": "timer.utils",
        "description": "timer.utils",
        "isExtraImport": true,
        "detail": "timer.utils",
        "documentation": {}
    },
    {
        "label": "stop_timer",
        "importPath": "timer.utils",
        "description": "timer.utils",
        "isExtraImport": true,
        "detail": "timer.utils",
        "documentation": {}
    },
    {
        "label": "GenericForeignKey",
        "importPath": "django.contrib.contenttypes.fields",
        "description": "django.contrib.contenttypes.fields",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.fields",
        "documentation": {}
    },
    {
        "label": "GenericRelation",
        "importPath": "django.contrib.contenttypes.fields",
        "description": "django.contrib.contenttypes.fields",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.fields",
        "documentation": {}
    },
    {
        "label": "ReadOnlyPasswordHashField",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "ReadOnlyPasswordHashField",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "AdminPasswordChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "widgets",
        "importPath": "django.contrib.admin",
        "description": "django.contrib.admin",
        "isExtraImport": true,
        "detail": "django.contrib.admin",
        "documentation": {}
    },
    {
        "label": "widgets",
        "importPath": "django.contrib.admin",
        "description": "django.contrib.admin",
        "isExtraImport": true,
        "detail": "django.contrib.admin",
        "documentation": {}
    },
    {
        "label": "widgets",
        "importPath": "django.contrib.admin",
        "description": "django.contrib.admin",
        "isExtraImport": true,
        "detail": "django.contrib.admin",
        "documentation": {}
    },
    {
        "label": "AdminSite",
        "importPath": "django.contrib.admin",
        "description": "django.contrib.admin",
        "isExtraImport": true,
        "detail": "django.contrib.admin",
        "documentation": {}
    },
    {
        "label": "PasswordInput",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "core.validators",
        "description": "core.validators",
        "detail": "core.validators",
        "documentation": {}
    },
    {
        "label": "validate_first_of_month",
        "importPath": "core.validators",
        "description": "core.validators",
        "isExtraImport": true,
        "detail": "core.validators",
        "documentation": {}
    },
    {
        "label": "validate_first_of_month",
        "importPath": "core.validators",
        "description": "core.validators",
        "isExtraImport": true,
        "detail": "core.validators",
        "documentation": {}
    },
    {
        "label": "CaseSerializer",
        "importPath": "cla_provider.serializers",
        "description": "cla_provider.serializers",
        "isExtraImport": true,
        "detail": "cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "RejectCaseForm",
        "importPath": "cla_provider.forms",
        "description": "cla_provider.forms",
        "isExtraImport": true,
        "detail": "cla_provider.forms",
        "documentation": {}
    },
    {
        "label": "CloseCaseForm",
        "importPath": "cla_provider.forms",
        "description": "cla_provider.forms",
        "isExtraImport": true,
        "detail": "cla_provider.forms",
        "documentation": {}
    },
    {
        "label": "AcceptCaseForm",
        "importPath": "cla_provider.forms",
        "description": "cla_provider.forms",
        "isExtraImport": true,
        "detail": "cla_provider.forms",
        "documentation": {}
    },
    {
        "label": "RejectCaseForm",
        "importPath": "cla_provider.forms",
        "description": "cla_provider.forms",
        "isExtraImport": true,
        "detail": "cla_provider.forms",
        "documentation": {}
    },
    {
        "label": "SplitCaseForm",
        "importPath": "cla_provider.forms",
        "description": "cla_provider.forms",
        "isExtraImport": true,
        "detail": "cla_provider.forms",
        "documentation": {}
    },
    {
        "label": "ProviderExtractForm",
        "importPath": "cla_provider.forms",
        "description": "cla_provider.forms",
        "isExtraImport": true,
        "detail": "cla_provider.forms",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "InvalidOperation",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "InvalidOperation",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "legalaid.utils.csvupload.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "legalaid.utils.csvupload.validators",
        "description": "legalaid.utils.csvupload.validators",
        "detail": "legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "ProviderCSVValidator",
        "importPath": "legalaid.utils.csvupload.validators",
        "description": "legalaid.utils.csvupload.validators",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "CONTRACT_EIGHTEEN_DISCRIMINATION",
        "importPath": "legalaid.utils.csvupload.contracts",
        "description": "legalaid.utils.csvupload.contracts",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "CONTRACT_EIGHTEEN_EDUCATION",
        "importPath": "legalaid.utils.csvupload.contracts",
        "description": "legalaid.utils.csvupload.contracts",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "contract_2018_category_spec",
        "importPath": "legalaid.utils.csvupload.contracts",
        "description": "legalaid.utils.csvupload.contracts",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "get_applicable_contract",
        "importPath": "legalaid.utils.csvupload.contracts",
        "description": "legalaid.utils.csvupload.contracts",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "get_applicable_contract",
        "importPath": "legalaid.utils.csvupload.contracts",
        "description": "legalaid.utils.csvupload.contracts",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "get_determination_codes",
        "importPath": "legalaid.utils.csvupload.contracts",
        "description": "legalaid.utils.csvupload.contracts",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "get_valid_outcomes",
        "importPath": "legalaid.utils.csvupload.contracts",
        "description": "legalaid.utils.csvupload.contracts",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "get_valid_matter_type1",
        "importPath": "legalaid.utils.csvupload.contracts",
        "description": "legalaid.utils.csvupload.contracts",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "get_valid_matter_type2",
        "importPath": "legalaid.utils.csvupload.contracts",
        "description": "legalaid.utils.csvupload.contracts",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "get_valid_stage_reached",
        "importPath": "legalaid.utils.csvupload.contracts",
        "description": "legalaid.utils.csvupload.contracts",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "contract_2018_fixed_fee_codes",
        "importPath": "legalaid.utils.csvupload.contracts",
        "description": "legalaid.utils.csvupload.contracts",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "contract_2018_signposting_codes",
        "importPath": "legalaid.utils.csvupload.contracts",
        "description": "legalaid.utils.csvupload.contracts",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "contact_2018_outcome_codes_requiring_signposting_code",
        "importPath": "legalaid.utils.csvupload.contracts",
        "description": "legalaid.utils.csvupload.contracts",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "CONTRACT_THIRTEEN",
        "importPath": "legalaid.utils.csvupload.contracts",
        "description": "legalaid.utils.csvupload.contracts",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "CONTRACT_EIGHTEEN",
        "importPath": "legalaid.utils.csvupload.contracts",
        "description": "legalaid.utils.csvupload.contracts",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "CONTRACT_EIGHTEEN_DISCRIMINATION",
        "importPath": "legalaid.utils.csvupload.contracts",
        "description": "legalaid.utils.csvupload.contracts",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "CONTRACT_EIGHTEEN_EDUCATION",
        "importPath": "legalaid.utils.csvupload.contracts",
        "description": "legalaid.utils.csvupload.contracts",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "objectify",
        "importPath": "lxml",
        "description": "lxml",
        "isExtraImport": true,
        "detail": "lxml",
        "documentation": {}
    },
    {
        "label": "etree",
        "importPath": "lxml",
        "description": "lxml",
        "isExtraImport": true,
        "detail": "lxml",
        "documentation": {}
    },
    {
        "label": "etree",
        "importPath": "lxml",
        "description": "lxml",
        "isExtraImport": true,
        "detail": "lxml",
        "documentation": {}
    },
    {
        "label": "objectify",
        "importPath": "lxml",
        "description": "lxml",
        "isExtraImport": true,
        "detail": "lxml",
        "documentation": {}
    },
    {
        "label": "ProviderExtractAPIMixin",
        "importPath": "legalaid.tests.views.mixins.provider_extract_api",
        "description": "legalaid.tests.views.mixins.provider_extract_api",
        "isExtraImport": true,
        "detail": "legalaid.tests.views.mixins.provider_extract_api",
        "documentation": {}
    },
    {
        "label": "LegacyCHSAuthentication",
        "importPath": "cla_provider.authentication",
        "description": "cla_provider.authentication",
        "isExtraImport": true,
        "detail": "cla_provider.authentication",
        "documentation": {}
    },
    {
        "label": "LegacyCHSAuthentication",
        "importPath": "cla_provider.authentication",
        "description": "cla_provider.authentication",
        "isExtraImport": true,
        "detail": "cla_provider.authentication",
        "documentation": {}
    },
    {
        "label": "get_full_case",
        "importPath": "legalaid.tests.test_models",
        "description": "legalaid.tests.test_models",
        "isExtraImport": true,
        "detail": "legalaid.tests.test_models",
        "documentation": {}
    },
    {
        "label": "check_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "BaseAuthentication",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "SessionAuthentication",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "get_template",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "eod_details",
        "importPath": "legalaid.tests.mommy_recipes",
        "description": "legalaid.tests.mommy_recipes",
        "isExtraImport": true,
        "detail": "legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "Choices",
        "importPath": "model_utils",
        "description": "model_utils",
        "isExtraImport": true,
        "detail": "model_utils",
        "documentation": {}
    },
    {
        "label": "Choices",
        "importPath": "model_utils",
        "description": "model_utils",
        "isExtraImport": true,
        "detail": "model_utils",
        "documentation": {}
    },
    {
        "label": "COMPLAINT_SOURCE",
        "importPath": "complaints.constants",
        "description": "complaints.constants",
        "isExtraImport": true,
        "detail": "complaints.constants",
        "documentation": {}
    },
    {
        "label": "SLA_DAYS",
        "importPath": "complaints.constants",
        "description": "complaints.constants",
        "isExtraImport": true,
        "detail": "complaints.constants",
        "documentation": {}
    },
    {
        "label": "HOLDING_LETTER_SLA_DAYS",
        "importPath": "complaints.constants",
        "description": "complaints.constants",
        "isExtraImport": true,
        "detail": "complaints.constants",
        "documentation": {}
    },
    {
        "label": "SLA_DAYS",
        "importPath": "complaints.constants",
        "description": "complaints.constants",
        "isExtraImport": true,
        "detail": "complaints.constants",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "NullBooleanField",
        "importPath": "core.fields",
        "description": "core.fields",
        "isExtraImport": true,
        "detail": "core.fields",
        "documentation": {}
    },
    {
        "label": "capfirst",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "force_text",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "ComplaintLogForm",
        "importPath": "complaints.forms",
        "description": "complaints.forms",
        "isExtraImport": true,
        "detail": "complaints.forms",
        "documentation": {}
    },
    {
        "label": "bleach",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bleach",
        "description": "bleach",
        "detail": "bleach",
        "documentation": {}
    },
    {
        "label": "markdown",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "markdown",
        "description": "markdown",
        "detail": "markdown",
        "documentation": {}
    },
    {
        "label": "AdminPagedownWidget",
        "importPath": "pagedown.widgets",
        "description": "pagedown.widgets",
        "isExtraImport": true,
        "detail": "pagedown.widgets",
        "documentation": {}
    },
    {
        "label": "SessionSecurityMiddleware",
        "importPath": "session_security.middleware",
        "description": "session_security.middleware",
        "isExtraImport": true,
        "detail": "session_security.middleware",
        "documentation": {}
    },
    {
        "label": "IS_POPUP_VAR",
        "importPath": "django.contrib.admin.options",
        "description": "django.contrib.admin.options",
        "isExtraImport": true,
        "detail": "django.contrib.admin.options",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "sensitive_post_parameters",
        "importPath": "django.views.decorators.debug",
        "description": "django.views.decorators.debug",
        "isExtraImport": true,
        "detail": "django.views.decorators.debug",
        "documentation": {}
    },
    {
        "label": "require_POST",
        "importPath": "django.views.decorators.http",
        "description": "django.views.decorators.http",
        "isExtraImport": true,
        "detail": "django.views.decorators.http",
        "documentation": {}
    },
    {
        "label": "TemplateResponse",
        "importPath": "django.template.response",
        "description": "django.template.response",
        "isExtraImport": true,
        "detail": "django.template.response",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "strip_tags",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "EMPTY_VALUES",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "SingleRelatedObjectDescriptor",
        "importPath": "django.db.models.fields.related",
        "description": "django.db.models.fields.related",
        "isExtraImport": true,
        "detail": "django.db.models.fields.related",
        "documentation": {}
    },
    {
        "label": "ReverseSingleRelatedObjectDescriptor",
        "importPath": "django.db.models.fields.related",
        "description": "django.db.models.fields.related",
        "isExtraImport": true,
        "detail": "django.db.models.fields.related",
        "documentation": {}
    },
    {
        "label": "PageNumberPagination",
        "importPath": "rest_framework.pagination",
        "description": "rest_framework.pagination",
        "isExtraImport": true,
        "detail": "rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "BaseRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "flatten",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "replace_methodname",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "Route",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DynamicDetailRoute",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DynamicListRoute",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "Route",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "format_suffix_patterns",
        "importPath": "rest_framework.urlpatterns",
        "description": "rest_framework.urlpatterns",
        "isExtraImport": true,
        "detail": "rest_framework.urlpatterns",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "rest_framework.reverse",
        "description": "rest_framework.reverse",
        "isExtraImport": true,
        "detail": "rest_framework.reverse",
        "documentation": {}
    },
    {
        "label": "NestedSimpleRouter",
        "importPath": "rest_framework_nested.routers",
        "description": "rest_framework_nested.routers",
        "isExtraImport": true,
        "detail": "rest_framework_nested.routers",
        "documentation": {}
    },
    {
        "label": "NestedSimpleRouter",
        "importPath": "rest_framework_nested.routers",
        "description": "rest_framework_nested.routers",
        "isExtraImport": true,
        "detail": "rest_framework_nested.routers",
        "documentation": {}
    },
    {
        "label": "GenericViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "smtp",
        "importPath": "django.core.mail.backends",
        "description": "django.core.mail.backends",
        "isExtraImport": true,
        "detail": "django.core.mail.backends",
        "documentation": {}
    },
    {
        "label": "textwrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "textwrap",
        "description": "textwrap",
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "shlex",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shlex",
        "description": "shlex",
        "detail": "shlex",
        "documentation": {}
    },
    {
        "label": "popen_wrapper",
        "importPath": "django.core.management.utils",
        "description": "django.core.management.utils",
        "isExtraImport": true,
        "detail": "django.core.management.utils",
        "documentation": {}
    },
    {
        "label": "polib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "polib",
        "description": "polib",
        "detail": "polib",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "cla_backend.celery",
        "description": "cla_backend.celery",
        "isExtraImport": true,
        "detail": "cla_backend.celery",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "cla_backend.celery",
        "description": "cla_backend.celery",
        "isExtraImport": true,
        "detail": "cla_backend.celery",
        "documentation": {}
    },
    {
        "label": "MarkdownAdminField",
        "importPath": "core.admin.fields",
        "description": "core.admin.fields",
        "isExtraImport": true,
        "detail": "core.admin.fields",
        "documentation": {}
    },
    {
        "label": "MarkdownAdminField",
        "importPath": "core.admin.fields",
        "description": "core.admin.fields",
        "isExtraImport": true,
        "detail": "core.admin.fields",
        "documentation": {}
    },
    {
        "label": "DEFAULT_MARKDOWN_WHITELIST",
        "importPath": "core.admin.fields",
        "description": "core.admin.fields",
        "isExtraImport": true,
        "detail": "core.admin.fields",
        "documentation": {}
    },
    {
        "label": "MarkdownAdminField",
        "importPath": "core.admin.fields",
        "description": "core.admin.fields",
        "isExtraImport": true,
        "detail": "core.admin.fields",
        "documentation": {}
    },
    {
        "label": "ClaSessionSecurityMiddleware",
        "importPath": "cla_backend.apps.core.admin.middleware",
        "description": "cla_backend.apps.core.admin.middleware",
        "isExtraImport": true,
        "detail": "cla_backend.apps.core.admin.middleware",
        "documentation": {}
    },
    {
        "label": "mommy",
        "importPath": "model_mommy",
        "description": "model_mommy",
        "isExtraImport": true,
        "detail": "model_mommy",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "types",
        "description": "types",
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "BooleanField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "CharField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "SerializerMethodField",
        "importPath": "rest_framework.fields",
        "description": "rest_framework.fields",
        "isExtraImport": true,
        "detail": "rest_framework.fields",
        "documentation": {}
    },
    {
        "label": "Operation",
        "importPath": "django.db.migrations.operations.base",
        "description": "django.db.migrations.operations.base",
        "isExtraImport": true,
        "detail": "django.db.migrations.operations.base",
        "documentation": {}
    },
    {
        "label": "ModelSerializer",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "PartialUpdateSerializerMixin",
        "importPath": "rest_framework_extensions.serializers",
        "description": "rest_framework_extensions.serializers",
        "isExtraImport": true,
        "detail": "rest_framework_extensions.serializers",
        "documentation": {}
    },
    {
        "label": "get_fields_for_partial_update",
        "importPath": "rest_framework_extensions.serializers",
        "description": "rest_framework_extensions.serializers",
        "isExtraImport": true,
        "detail": "rest_framework_extensions.serializers",
        "documentation": {}
    },
    {
        "label": "legalaid.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "legalaid.fields",
        "description": "legalaid.fields",
        "detail": "legalaid.fields",
        "documentation": {}
    },
    {
        "label": "MoneyField",
        "importPath": "legalaid.fields",
        "description": "legalaid.fields",
        "isExtraImport": true,
        "detail": "legalaid.fields",
        "documentation": {}
    },
    {
        "label": "MoneyFieldDRF",
        "importPath": "legalaid.fields",
        "description": "legalaid.fields",
        "isExtraImport": true,
        "detail": "legalaid.fields",
        "documentation": {}
    },
    {
        "label": "MoneyField",
        "importPath": "legalaid.fields",
        "description": "legalaid.fields",
        "isExtraImport": true,
        "detail": "legalaid.fields",
        "documentation": {}
    },
    {
        "label": "MoneyIntervalDRFField",
        "importPath": "core.drf.fields",
        "description": "core.drf.fields",
        "isExtraImport": true,
        "detail": "core.drf.fields",
        "documentation": {}
    },
    {
        "label": "ThreePartDateField",
        "importPath": "core.drf.fields",
        "description": "core.drf.fields",
        "isExtraImport": true,
        "detail": "core.drf.fields",
        "documentation": {}
    },
    {
        "label": "FieldDoesNotExist",
        "importPath": "django.db.models.fields",
        "description": "django.db.models.fields",
        "isExtraImport": true,
        "detail": "django.db.models.fields",
        "documentation": {}
    },
    {
        "label": "get_runner",
        "importPath": "django.test.utils",
        "description": "django.test.utils",
        "isExtraImport": true,
        "detail": "django.test.utils",
        "documentation": {}
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "closing",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "defaults",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "sentry_sdk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sentry_sdk",
        "description": "sentry_sdk",
        "detail": "sentry_sdk",
        "documentation": {}
    },
    {
        "label": "capture_message",
        "importPath": "sentry_sdk",
        "description": "sentry_sdk",
        "isExtraImport": true,
        "detail": "sentry_sdk",
        "documentation": {}
    },
    {
        "label": "push_scope",
        "importPath": "sentry_sdk",
        "description": "sentry_sdk",
        "isExtraImport": true,
        "detail": "sentry_sdk",
        "documentation": {}
    },
    {
        "label": "MockedGraph",
        "importPath": "diagnosis.tests.utils",
        "description": "diagnosis.tests.utils",
        "isExtraImport": true,
        "detail": "diagnosis.tests.utils",
        "documentation": {}
    },
    {
        "label": "MockedGraph",
        "importPath": "diagnosis.tests.utils",
        "description": "diagnosis.tests.utils",
        "isExtraImport": true,
        "detail": "diagnosis.tests.utils",
        "documentation": {}
    },
    {
        "label": "get_node_scope_value",
        "importPath": "diagnosis.utils",
        "description": "diagnosis.utils",
        "isExtraImport": true,
        "detail": "diagnosis.utils",
        "documentation": {}
    },
    {
        "label": "codecs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs",
        "description": "codecs",
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "join",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "abspath",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "dirname",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "abspath",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "dirname",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "curdir",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "pardir",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "sep",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "pathsep",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "defpath",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "extsep",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "altsep",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "devnull",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "engines",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "force_text",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_text",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "Promise",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "smart_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "networkx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx",
        "description": "networkx",
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "SlugRelatedField",
        "importPath": "rest_framework.relations",
        "description": "rest_framework.relations",
        "isExtraImport": true,
        "detail": "rest_framework.relations",
        "documentation": {}
    },
    {
        "label": "striptags",
        "importPath": "django.template.defaultfilters",
        "description": "django.template.defaultfilters",
        "isExtraImport": true,
        "detail": "django.template.defaultfilters",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "django.template.defaultfilters",
        "description": "django.template.defaultfilters",
        "isExtraImport": true,
        "detail": "django.template.defaultfilters",
        "documentation": {}
    },
    {
        "label": "title",
        "importPath": "django.template.defaultfilters",
        "description": "django.template.defaultfilters",
        "isExtraImport": true,
        "detail": "django.template.defaultfilters",
        "documentation": {}
    },
    {
        "label": "GovUkNotify",
        "importPath": "cla_backend.apps.govuk_notify.api",
        "description": "cla_backend.apps.govuk_notify.api",
        "isExtraImport": true,
        "detail": "cla_backend.apps.govuk_notify.api",
        "documentation": {}
    },
    {
        "label": "NotifyEmailOrchestrator",
        "importPath": "cla_backend.apps.govuk_notify.api",
        "description": "cla_backend.apps.govuk_notify.api",
        "isExtraImport": true,
        "detail": "cla_backend.apps.govuk_notify.api",
        "documentation": {}
    },
    {
        "label": "NotificationsAPIClient",
        "importPath": "notifications_python_client.notifications",
        "description": "notifications_python_client.notifications",
        "isExtraImport": true,
        "detail": "notifications_python_client.notifications",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "importPath": "notifications_python_client.errors",
        "description": "notifications_python_client.errors",
        "isExtraImport": true,
        "detail": "notifications_python_client.errors",
        "documentation": {}
    },
    {
        "label": "djorm_pgfulltext.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "djorm_pgfulltext.fields",
        "description": "djorm_pgfulltext.fields",
        "detail": "djorm_pgfulltext.fields",
        "documentation": {}
    },
    {
        "label": "VectorField",
        "importPath": "djorm_pgfulltext.fields",
        "description": "djorm_pgfulltext.fields",
        "isExtraImport": true,
        "detail": "djorm_pgfulltext.fields",
        "documentation": {}
    },
    {
        "label": "Note",
        "importPath": "guidance.models",
        "description": "guidance.models",
        "isExtraImport": true,
        "detail": "guidance.models",
        "documentation": {}
    },
    {
        "label": "SearchManager",
        "importPath": "djorm_pgfulltext.models",
        "description": "djorm_pgfulltext.models",
        "isExtraImport": true,
        "detail": "djorm_pgfulltext.models",
        "documentation": {}
    },
    {
        "label": "make_option",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "make_option",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "is_iterable",
        "importPath": "django.utils.itercompat",
        "description": "django.utils.itercompat",
        "isExtraImport": true,
        "detail": "django.utils.itercompat",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "knowledgebase",
        "description": "knowledgebase",
        "isExtraImport": true,
        "detail": "knowledgebase",
        "documentation": {}
    },
    {
        "label": "KnowledgebaseCsvParse",
        "importPath": "knowledgebase.management.commands._csv_2_fixture",
        "description": "knowledgebase.management.commands._csv_2_fixture",
        "isExtraImport": true,
        "detail": "knowledgebase.management.commands._csv_2_fixture",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "KnowledgebaseCSVImporter",
        "importPath": "knowledgebase.utils.csv_user_import",
        "description": "knowledgebase.utils.csv_user_import",
        "isExtraImport": true,
        "detail": "knowledgebase.utils.csv_user_import",
        "documentation": {}
    },
    {
        "label": "KnowledgebaseCSVImporter",
        "importPath": "knowledgebase.utils.csv_user_import",
        "description": "knowledgebase.utils.csv_user_import",
        "isExtraImport": true,
        "detail": "knowledgebase.utils.csv_user_import",
        "documentation": {}
    },
    {
        "label": "ARTICLE_COLUMN_FIELD_MAPPING",
        "importPath": "knowledgebase.utils.csv_user_import_mappings",
        "description": "knowledgebase.utils.csv_user_import_mappings",
        "isExtraImport": true,
        "detail": "knowledgebase.utils.csv_user_import_mappings",
        "documentation": {}
    },
    {
        "label": "TELEPHONE_COLUMN_FIELD_MAPPING",
        "importPath": "knowledgebase.utils.csv_user_import_mappings",
        "description": "knowledgebase.utils.csv_user_import_mappings",
        "isExtraImport": true,
        "detail": "knowledgebase.utils.csv_user_import_mappings",
        "documentation": {}
    },
    {
        "label": "ARTICLE_CATEGORY_MATRIX_COLUMN_FIELD_MAPPING",
        "importPath": "knowledgebase.utils.csv_user_import_mappings",
        "description": "knowledgebase.utils.csv_user_import_mappings",
        "isExtraImport": true,
        "detail": "knowledgebase.utils.csv_user_import_mappings",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http.response",
        "description": "django.http.response",
        "isExtraImport": true,
        "detail": "django.http.response",
        "documentation": {}
    },
    {
        "label": "django_filters",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django_filters",
        "description": "django_filters",
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "SUPPRESS",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "core.cloning",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "core.cloning",
        "description": "core.cloning",
        "detail": "core.cloning",
        "documentation": {}
    },
    {
        "label": "clone_model",
        "importPath": "core.cloning",
        "description": "core.cloning",
        "isExtraImport": true,
        "detail": "core.cloning",
        "documentation": {}
    },
    {
        "label": "CloneModelMixin",
        "importPath": "core.cloning",
        "description": "core.cloning",
        "isExtraImport": true,
        "detail": "core.cloning",
        "documentation": {}
    },
    {
        "label": "cla_common.db.mixins",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cla_common.db.mixins",
        "description": "cla_common.db.mixins",
        "detail": "cla_common.db.mixins",
        "documentation": {}
    },
    {
        "label": "PropertyExpectedException",
        "importPath": "eligibility_calculator.exceptions",
        "description": "eligibility_calculator.exceptions",
        "isExtraImport": true,
        "detail": "eligibility_calculator.exceptions",
        "documentation": {}
    },
    {
        "label": "PropertyExpectedException",
        "importPath": "eligibility_calculator.exceptions",
        "description": "eligibility_calculator.exceptions",
        "isExtraImport": true,
        "detail": "eligibility_calculator.exceptions",
        "documentation": {}
    },
    {
        "label": "PropertyExpectedException",
        "importPath": "eligibility_calculator.exceptions",
        "description": "eligibility_calculator.exceptions",
        "isExtraImport": true,
        "detail": "eligibility_calculator.exceptions",
        "documentation": {}
    },
    {
        "label": "diagnosis_yes",
        "importPath": "diagnosis.tests.mommy_recipes",
        "description": "diagnosis.tests.mommy_recipes",
        "isExtraImport": true,
        "detail": "diagnosis.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "CategoryModelForm",
        "importPath": "legalaid.admin_support.forms",
        "description": "legalaid.admin_support.forms",
        "isExtraImport": true,
        "detail": "legalaid.admin_support.forms",
        "documentation": {}
    },
    {
        "label": "legalaid.migrations",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "legalaid.migrations",
        "description": "legalaid.migrations",
        "detail": "legalaid.migrations",
        "documentation": {}
    },
    {
        "label": "CaseData",
        "importPath": "eligibility_calculator.models",
        "description": "eligibility_calculator.models",
        "isExtraImport": true,
        "detail": "eligibility_calculator.models",
        "documentation": {}
    },
    {
        "label": "ModelMixin",
        "importPath": "eligibility_calculator.models",
        "description": "eligibility_calculator.models",
        "isExtraImport": true,
        "detail": "eligibility_calculator.models",
        "documentation": {}
    },
    {
        "label": "CaseData",
        "importPath": "eligibility_calculator.models",
        "description": "eligibility_calculator.models",
        "isExtraImport": true,
        "detail": "eligibility_calculator.models",
        "documentation": {}
    },
    {
        "label": "CaseData",
        "importPath": "eligibility_calculator.models",
        "description": "eligibility_calculator.models",
        "isExtraImport": true,
        "detail": "eligibility_calculator.models",
        "documentation": {}
    },
    {
        "label": "AGE_RANGE",
        "importPath": "legalaid.utils.csvupload.constants",
        "description": "legalaid.utils.csvupload.constants",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.constants",
        "documentation": {}
    },
    {
        "label": "POSTCODE_RE",
        "importPath": "legalaid.utils.csvupload.constants",
        "description": "legalaid.utils.csvupload.constants",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.constants",
        "documentation": {}
    },
    {
        "label": "ELIGIBILITY_CODES",
        "importPath": "legalaid.utils.csvupload.constants",
        "description": "legalaid.utils.csvupload.constants",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.constants",
        "documentation": {}
    },
    {
        "label": "DISABILITY_INDICATOR",
        "importPath": "legalaid.utils.csvupload.constants",
        "description": "legalaid.utils.csvupload.constants",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.constants",
        "documentation": {}
    },
    {
        "label": "EXEMPTION_CODES",
        "importPath": "legalaid.utils.csvupload.constants",
        "description": "legalaid.utils.csvupload.constants",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.constants",
        "documentation": {}
    },
    {
        "label": "SERVICE_ADAPTATIONS",
        "importPath": "legalaid.utils.csvupload.constants",
        "description": "legalaid.utils.csvupload.constants",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.constants",
        "documentation": {}
    },
    {
        "label": "ADVICE_TYPES",
        "importPath": "legalaid.utils.csvupload.constants",
        "description": "legalaid.utils.csvupload.constants",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.constants",
        "documentation": {}
    },
    {
        "label": "PREFIX_CATEGORY_LOOKUP",
        "importPath": "legalaid.utils.csvupload.constants",
        "description": "legalaid.utils.csvupload.constants",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.constants",
        "documentation": {}
    },
    {
        "label": "STAGE_REACHED_NOT_ALLOWED_MT1S",
        "importPath": "legalaid.utils.csvupload.constants",
        "description": "legalaid.utils.csvupload.constants",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.constants",
        "documentation": {}
    },
    {
        "label": "STAGE_REACHED_REQUIRED_MT1S",
        "importPath": "legalaid.utils.csvupload.constants",
        "description": "legalaid.utils.csvupload.constants",
        "isExtraImport": true,
        "detail": "legalaid.utils.csvupload.constants",
        "documentation": {}
    },
    {
        "label": "EligibilityChecker",
        "importPath": "eligibility_calculator.calculator",
        "description": "eligibility_calculator.calculator",
        "isExtraImport": true,
        "detail": "eligibility_calculator.calculator",
        "documentation": {}
    },
    {
        "label": "EligibilityChecker",
        "importPath": "eligibility_calculator.calculator",
        "description": "eligibility_calculator.calculator",
        "isExtraImport": true,
        "detail": "eligibility_calculator.calculator",
        "documentation": {}
    },
    {
        "label": "ConflictException",
        "importPath": "core.drf.exceptions",
        "description": "core.drf.exceptions",
        "isExtraImport": true,
        "detail": "core.drf.exceptions",
        "documentation": {}
    },
    {
        "label": "DetailSerializerMixin",
        "importPath": "rest_framework_extensions.mixins",
        "description": "rest_framework_extensions.mixins",
        "isExtraImport": true,
        "detail": "rest_framework_extensions.mixins",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "Schedule",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "MAX_NOTIFICATION_RETRIES",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "push_notifications",
        "importPath": "notifications.periodic_tasks",
        "description": "notifications.periodic_tasks",
        "isExtraImport": true,
        "detail": "notifications.periodic_tasks",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "celery.utils.log",
        "description": "celery.utils.log",
        "isExtraImport": true,
        "detail": "celery.utils.log",
        "documentation": {}
    },
    {
        "label": "DjangoJSONEncoder",
        "importPath": "django.core.serializers.json",
        "description": "django.core.serializers.json",
        "isExtraImport": true,
        "detail": "django.core.serializers.json",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "django.db.backends.postgresql_psycopg2.base",
        "description": "django.db.backends.postgresql_psycopg2.base",
        "isExtraImport": true,
        "detail": "django.db.backends.postgresql_psycopg2.base",
        "documentation": {}
    },
    {
        "label": "ExportTask",
        "importPath": "reports.tasks",
        "description": "reports.tasks",
        "isExtraImport": true,
        "detail": "reports.tasks",
        "documentation": {}
    },
    {
        "label": "ExportTask",
        "importPath": "reports.tasks",
        "description": "reports.tasks",
        "isExtraImport": true,
        "detail": "reports.tasks",
        "documentation": {}
    },
    {
        "label": "OBIEEExportTask",
        "importPath": "reports.tasks",
        "description": "reports.tasks",
        "isExtraImport": true,
        "detail": "reports.tasks",
        "documentation": {}
    },
    {
        "label": "ReasonForContactingExportTask",
        "importPath": "reports.tasks",
        "description": "reports.tasks",
        "isExtraImport": true,
        "detail": "reports.tasks",
        "documentation": {}
    },
    {
        "label": "DocOptCommand",
        "importPath": "django_docopt_command",
        "description": "django_docopt_command",
        "isExtraImport": true,
        "detail": "django_docopt_command",
        "documentation": {}
    },
    {
        "label": "OBIEEExporter",
        "importPath": "reports.utils",
        "description": "reports.utils",
        "isExtraImport": true,
        "detail": "reports.utils",
        "documentation": {}
    },
    {
        "label": "OBIEEExporter",
        "importPath": "reports.utils",
        "description": "reports.utils",
        "isExtraImport": true,
        "detail": "reports.utils",
        "documentation": {}
    },
    {
        "label": "LoadExtension",
        "importPath": "core.operations",
        "description": "core.operations",
        "isExtraImport": true,
        "detail": "core.operations",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "importPath": "reports.urls",
        "description": "reports.urls",
        "isExtraImport": true,
        "detail": "reports.urls",
        "documentation": {}
    },
    {
        "label": "reports.forms",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "reports.forms",
        "description": "reports.forms",
        "detail": "reports.forms",
        "documentation": {}
    },
    {
        "label": "MICB1ExtractSLA2",
        "importPath": "reports.forms",
        "description": "reports.forms",
        "isExtraImport": true,
        "detail": "reports.forms",
        "documentation": {}
    },
    {
        "label": "MICB1Extract",
        "importPath": "reports.forms",
        "description": "reports.forms",
        "isExtraImport": true,
        "detail": "reports.forms",
        "documentation": {}
    },
    {
        "label": "delete_export_file",
        "importPath": "reports.models",
        "description": "reports.models",
        "isExtraImport": true,
        "detail": "reports.models",
        "documentation": {}
    },
    {
        "label": "Export",
        "importPath": "reports.models",
        "description": "reports.models",
        "isExtraImport": true,
        "detail": "reports.models",
        "documentation": {}
    },
    {
        "label": "Export",
        "importPath": "reports.models",
        "description": "reports.models",
        "isExtraImport": true,
        "detail": "reports.models",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "NamedTemporaryFile",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "save_diversity_data",
        "importPath": "legalaid.utils.diversity",
        "description": "legalaid.utils.diversity",
        "isExtraImport": true,
        "detail": "legalaid.utils.diversity",
        "documentation": {}
    },
    {
        "label": "save_diversity_data",
        "importPath": "legalaid.utils.diversity",
        "description": "legalaid.utils.diversity",
        "isExtraImport": true,
        "detail": "legalaid.utils.diversity",
        "documentation": {}
    },
    {
        "label": "download_file",
        "importPath": "reports.views",
        "description": "reports.views",
        "isExtraImport": true,
        "detail": "reports.views",
        "documentation": {}
    },
    {
        "label": "MonthYearWidget",
        "importPath": "reports.widgets",
        "description": "reports.widgets",
        "isExtraImport": true,
        "detail": "reports.widgets",
        "documentation": {}
    },
    {
        "label": "EXPORT_STATUS",
        "importPath": "reports.constants",
        "description": "reports.constants",
        "isExtraImport": true,
        "detail": "reports.constants",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "ZipFile",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "csvkit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csvkit",
        "description": "csvkit",
        "detail": "csvkit",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urlparse",
        "description": "urlparse",
        "isExtraImport": true,
        "detail": "urlparse",
        "documentation": {}
    },
    {
        "label": "pyminizip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyminizip",
        "description": "pyminizip",
        "detail": "pyminizip",
        "documentation": {}
    },
    {
        "label": "staff_member_required",
        "importPath": "django.contrib.admin.views.decorators",
        "description": "django.contrib.admin.views.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.admin.views.decorators",
        "documentation": {}
    },
    {
        "label": "permission_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "Widget",
        "importPath": "django.forms.widgets",
        "description": "django.forms.widgets",
        "isExtraImport": true,
        "detail": "django.forms.widgets",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "django.forms.widgets",
        "description": "django.forms.widgets",
        "isExtraImport": true,
        "detail": "django.forms.widgets",
        "documentation": {}
    },
    {
        "label": "MONTHS",
        "importPath": "django.utils.dates",
        "description": "django.utils.dates",
        "isExtraImport": true,
        "detail": "django.utils.dates",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "registry",
        "importPath": "moj_irat.healthchecks",
        "description": "moj_irat.healthchecks",
        "isExtraImport": true,
        "detail": "moj_irat.healthchecks",
        "documentation": {}
    },
    {
        "label": "healthchecks",
        "importPath": "status",
        "description": "status",
        "isExtraImport": true,
        "detail": "status",
        "documentation": {}
    },
    {
        "label": "HealthcheckView",
        "importPath": "moj_irat.views",
        "description": "moj_irat.views",
        "isExtraImport": true,
        "detail": "moj_irat.views",
        "documentation": {}
    },
    {
        "label": "PingJsonView",
        "importPath": "moj_irat.views",
        "description": "moj_irat.views",
        "isExtraImport": true,
        "detail": "moj_irat.views",
        "documentation": {}
    },
    {
        "label": "JSONRenderer",
        "importPath": "rest_framework.renderers",
        "description": "rest_framework.renderers",
        "isExtraImport": true,
        "detail": "rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "smoketest",
        "importPath": "cla_common.smoketest",
        "description": "cla_common.smoketest",
        "isExtraImport": true,
        "detail": "cla_common.smoketest",
        "documentation": {}
    },
    {
        "label": "S3Boto3Storage",
        "importPath": "storages.backends.s3boto3",
        "description": "storages.backends.s3boto3",
        "isExtraImport": true,
        "detail": "storages.backends.s3boto3",
        "documentation": {}
    },
    {
        "label": "ClientError",
        "importPath": "botocore.exceptions",
        "description": "botocore.exceptions",
        "isExtraImport": true,
        "detail": "botocore.exceptions",
        "documentation": {}
    },
    {
        "label": "CacheAdapter",
        "importPath": "cla_common.services",
        "description": "cla_common.services",
        "isExtraImport": true,
        "detail": "cla_common.services",
        "documentation": {}
    },
    {
        "label": "DjangoIntegration",
        "importPath": "sentry_sdk.integrations.django",
        "description": "sentry_sdk.integrations.django",
        "isExtraImport": true,
        "detail": "sentry_sdk.integrations.django",
        "documentation": {}
    },
    {
        "label": "transport",
        "importPath": "kombu",
        "description": "kombu",
        "isExtraImport": true,
        "detail": "kombu",
        "documentation": {}
    },
    {
        "label": "CLASQSChannel",
        "importPath": "cla_backend.sqs",
        "description": "cla_backend.sqs",
        "isExtraImport": true,
        "detail": "cla_backend.sqs",
        "documentation": {}
    },
    {
        "label": "Channel",
        "importPath": "kombu.transport.SQS",
        "description": "kombu.transport.SQS",
        "isExtraImport": true,
        "detail": "kombu.transport.SQS",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "MaintenanceModeView",
        "importPath": "status.views",
        "description": "status.views",
        "isExtraImport": true,
        "detail": "status.views",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "common_conf",
        "description": "common_conf",
        "isExtraImport": true,
        "detail": "common_conf",
        "documentation": {}
    },
    {
        "label": "docutils.nodes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "docutils.nodes",
        "description": "docutils.nodes",
        "detail": "docutils.nodes",
        "documentation": {}
    },
    {
        "label": "docutils.parsers.rst.directives",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "docutils.parsers.rst.directives",
        "description": "docutils.parsers.rst.directives",
        "detail": "docutils.parsers.rst.directives",
        "documentation": {}
    },
    {
        "label": "sphinx.util.compat",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sphinx.util.compat",
        "description": "sphinx.util.compat",
        "detail": "sphinx.util.compat",
        "documentation": {}
    },
    {
        "label": "addnodes",
        "importPath": "sphinx",
        "description": "sphinx",
        "isExtraImport": true,
        "detail": "sphinx",
        "documentation": {}
    },
    {
        "label": "docgenerator",
        "importPath": "rest_framework_swagger",
        "description": "rest_framework_swagger",
        "isExtraImport": true,
        "detail": "rest_framework_swagger",
        "documentation": {}
    },
    {
        "label": "introspectors",
        "importPath": "rest_framework_swagger",
        "description": "rest_framework_swagger",
        "isExtraImport": true,
        "detail": "rest_framework_swagger",
        "documentation": {}
    },
    {
        "label": "urlparser",
        "importPath": "rest_framework_swagger",
        "description": "rest_framework_swagger",
        "isExtraImport": true,
        "detail": "rest_framework_swagger",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "pformat",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "jmespath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jmespath",
        "description": "jmespath",
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "jmespath",
        "description": "jmespath",
        "isExtraImport": true,
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "copy_reg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy_reg",
        "description": "copy_reg",
        "detail": "copy_reg",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "mlab",
        "importPath": "enthought.mayavi",
        "description": "enthought.mayavi",
        "isExtraImport": true,
        "detail": "enthought.mayavi",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "hierarchy",
        "importPath": "scipy.cluster",
        "description": "scipy.cluster",
        "isExtraImport": true,
        "detail": "scipy.cluster",
        "documentation": {}
    },
    {
        "label": "distance",
        "importPath": "scipy.spatial",
        "description": "scipy.spatial",
        "isExtraImport": true,
        "detail": "scipy.spatial",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "reverse_cuthill_mckee_ordering",
        "importPath": "networkx.utils",
        "description": "networkx.utils",
        "isExtraImport": true,
        "detail": "networkx.utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "networkx.generators.atlas",
        "description": "networkx.generators.atlas",
        "isExtraImport": true,
        "detail": "networkx.generators.atlas",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "networkx.generators.atlas",
        "description": "networkx.generators.atlas",
        "isExtraImport": true,
        "detail": "networkx.generators.atlas",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "networkx.generators.atlas",
        "description": "networkx.generators.atlas",
        "isExtraImport": true,
        "detail": "networkx.generators.atlas",
        "documentation": {}
    },
    {
        "label": "graph_could_be_isomorphic",
        "importPath": "networkx.algorithms.isomorphism.isomorph",
        "description": "networkx.algorithms.isomorphism.isomorph",
        "isExtraImport": true,
        "detail": "networkx.algorithms.isomorphism.isomorph",
        "documentation": {}
    },
    {
        "label": "graph_could_be_isomorphic",
        "importPath": "networkx.algorithms.isomorphism.isomorph",
        "description": "networkx.algorithms.isomorphism.isomorph",
        "isExtraImport": true,
        "detail": "networkx.algorithms.isomorphism.isomorph",
        "documentation": {}
    },
    {
        "label": "zipfile,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile.",
        "description": "zipfile.",
        "detail": "zipfile.",
        "documentation": {}
    },
    {
        "label": "email",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "email",
        "description": "email",
        "detail": "email",
        "documentation": {}
    },
    {
        "label": "getaddresses",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "parseaddr",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "getaddresses",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "parseaddr",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "mailbox",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mailbox",
        "description": "mailbox",
        "detail": "mailbox",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygraphviz",
        "description": "pygraphviz",
        "isExtraImport": true,
        "detail": "pygraphviz",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "networkx.generators.degree_seq",
        "description": "networkx.generators.degree_seq",
        "isExtraImport": true,
        "detail": "networkx.generators.degree_seq",
        "documentation": {}
    },
    {
        "label": "pycurl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pycurl",
        "description": "pycurl",
        "detail": "pycurl",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "StringIO",
        "description": "StringIO",
        "isExtraImport": true,
        "detail": "StringIO",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "StringIO",
        "description": "StringIO",
        "isExtraImport": true,
        "detail": "StringIO",
        "documentation": {}
    },
    {
        "label": "certifi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "certifi",
        "description": "certifi",
        "detail": "certifi",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "pycurl,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pycurl.",
        "description": "pycurl.",
        "detail": "pycurl.",
        "documentation": {}
    },
    {
        "label": "curl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "curl",
        "description": "curl",
        "detail": "curl",
        "documentation": {}
    },
    {
        "label": "eprint",
        "kind": 2,
        "importPath": "bin.database-migration.migration_validation",
        "description": "bin.database-migration.migration_validation",
        "peekOfCode": "def eprint(*args, **kwargs):\n    print(*args, file=sys.stderr, **kwargs)\ndef get_target_db_cursor():\n    conn = psycopg2.connect(\n        host=os.environ[\"TARGET_DB_HOST\"],\n        dbname=os.environ[\"TARGET_DB_NAME\"],\n        user=os.environ[\"TARGET_DB_USER\"],\n        password=os.environ[\"TARGET_DB_PASSWORD\"],\n    )\n    return conn.cursor()",
        "detail": "bin.database-migration.migration_validation",
        "documentation": {}
    },
    {
        "label": "get_target_db_cursor",
        "kind": 2,
        "importPath": "bin.database-migration.migration_validation",
        "description": "bin.database-migration.migration_validation",
        "peekOfCode": "def get_target_db_cursor():\n    conn = psycopg2.connect(\n        host=os.environ[\"TARGET_DB_HOST\"],\n        dbname=os.environ[\"TARGET_DB_NAME\"],\n        user=os.environ[\"TARGET_DB_USER\"],\n        password=os.environ[\"TARGET_DB_PASSWORD\"],\n    )\n    return conn.cursor()\ndef get_source_db_cursor():\n    conn = psycopg2.connect(",
        "detail": "bin.database-migration.migration_validation",
        "documentation": {}
    },
    {
        "label": "get_source_db_cursor",
        "kind": 2,
        "importPath": "bin.database-migration.migration_validation",
        "description": "bin.database-migration.migration_validation",
        "peekOfCode": "def get_source_db_cursor():\n    conn = psycopg2.connect(\n        host=os.environ[\"SOURCE_DB_HOST\"],\n        dbname=os.environ[\"SOURCE_DB_NAME\"],\n        user=os.environ[\"SOURCE_DB_USER\"],\n        password=os.environ[\"SOURCE_DB_PASSWORD\"],\n    )\n    return conn.cursor()\ndef get_all_tables(cursor):\n    cursor.execute(",
        "detail": "bin.database-migration.migration_validation",
        "documentation": {}
    },
    {
        "label": "get_all_tables",
        "kind": 2,
        "importPath": "bin.database-migration.migration_validation",
        "description": "bin.database-migration.migration_validation",
        "peekOfCode": "def get_all_tables(cursor):\n    cursor.execute(\n        \"\"\"\n        SELECT table_name\n        FROM information_schema.tables\n        WHERE table_schema = 'public'\n        ORDER BY table_name;\n        \"\"\"\n    )\n    return cursor.fetchall()",
        "detail": "bin.database-migration.migration_validation",
        "documentation": {}
    },
    {
        "label": "get_row_count",
        "kind": 2,
        "importPath": "bin.database-migration.migration_validation",
        "description": "bin.database-migration.migration_validation",
        "peekOfCode": "def get_row_count(cursor, table_name):\n    cursor.execute(\n        \"\"\"\n        SELECT COUNT(*)\n        FROM %s\n        \"\"\"\n        % table_name\n    )\n    return cursor.fetchone()[0]\ndef get_database_sequences(cursor):",
        "detail": "bin.database-migration.migration_validation",
        "documentation": {}
    },
    {
        "label": "get_database_sequences",
        "kind": 2,
        "importPath": "bin.database-migration.migration_validation",
        "description": "bin.database-migration.migration_validation",
        "peekOfCode": "def get_database_sequences(cursor):\n    cursor.execute(\n        \"\"\"\n        SELECT relname sequence_name\n        FROM pg_class\n        WHERE relkind = 'S'\n        \"\"\"\n    )\n    return cursor.fetchall()\ndef get_current_sequence_value(cursor, sequence):",
        "detail": "bin.database-migration.migration_validation",
        "documentation": {}
    },
    {
        "label": "get_current_sequence_value",
        "kind": 2,
        "importPath": "bin.database-migration.migration_validation",
        "description": "bin.database-migration.migration_validation",
        "peekOfCode": "def get_current_sequence_value(cursor, sequence):\n    cursor.execute(\n        \"\"\"\n        SELECT last_value\n        FROM %s\n        \"\"\"\n        % sequence\n    )\n    return cursor.fetchone()\ndef get_last_row(cursor, table_name):",
        "detail": "bin.database-migration.migration_validation",
        "documentation": {}
    },
    {
        "label": "get_last_row",
        "kind": 2,
        "importPath": "bin.database-migration.migration_validation",
        "description": "bin.database-migration.migration_validation",
        "peekOfCode": "def get_last_row(cursor, table_name):\n    keys = {\"django_session\": \"session_key\"}\n    cursor.execute(\n        \"\"\"\n        SELECT *\n        FROM %s\n        ORDER BY %s desc\n        LIMIT 1\n        \"\"\"\n        % (table_name, keys.get(table_name, \"id\"))",
        "detail": "bin.database-migration.migration_validation",
        "documentation": {}
    },
    {
        "label": "check_table_data",
        "kind": 2,
        "importPath": "bin.database-migration.migration_validation",
        "description": "bin.database-migration.migration_validation",
        "peekOfCode": "def check_table_data():\n    errors = []\n    connection_string_template = \"postgres://{}:{}@{}/{}\"\n    source_db = connection_string_template.format(\n        os.environ[\"SOURCE_DB_USER\"],\n        os.environ[\"SOURCE_DB_PASSWORD\"],\n        os.environ[\"SOURCE_DB_HOST\"],\n        os.environ[\"SOURCE_DB_NAME\"]\n    )\n    target_db = connection_string_template.format(",
        "detail": "bin.database-migration.migration_validation",
        "documentation": {}
    },
    {
        "label": "get_pingdom_probe_ips",
        "kind": 2,
        "importPath": "bin.pingdom_ips",
        "description": "bin.pingdom_ips",
        "peekOfCode": "def get_pingdom_probe_ips():\n    ip_list = []\n    pingdom_link = \"https://my.pingdom.com/probes/ipv4\"\n    pingdom_ips = requests.get(pingdom_link).text.split()\n    parsed_pingdom_ip_list = [\"\".join([ip.strip(), \"/32\"]) for ip in pingdom_ips]\n    regex = r\"^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}/32$\"\n    for ip in parsed_pingdom_ip_list:\n        if re.match(regex, ip) is not None:\n            ip_list.append(ip)\n    return ip_list",
        "detail": "bin.pingdom_ips",
        "documentation": {}
    },
    {
        "label": "OperatorAdminForm",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.admin.forms",
        "description": "cla_backend.apps.call_centre.admin.forms",
        "peekOfCode": "class OperatorAdminForm(OneToOneUserAdminForm):\n    class Meta(object):\n        model = Operator\n        fields = [\n            \"username\",\n            \"password\",\n            \"password2\",\n            \"first_name\",\n            \"last_name\",\n            \"email\",",
        "detail": "cla_backend.apps.call_centre.admin.forms",
        "documentation": {}
    },
    {
        "label": "CaseworkerAdminForm",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.admin.forms",
        "description": "cla_backend.apps.call_centre.admin.forms",
        "peekOfCode": "class CaseworkerAdminForm(OneToOneUserAdminForm):\n    is_active = forms.BooleanField(required=False, initial=True)\n    def get_defaults(self):\n        defaults = super(CaseworkerAdminForm, self).get_defaults()\n        defaults.update({\"is_staff\": True})\n        return defaults\n    class Meta(object):\n        model = Caseworker\n        fields = [\"username\", \"password\", \"password2\", \"first_name\", \"last_name\", \"email\", \"is_active\"]\nclass FullOperatorAdminForm(OneToOneUserAdminForm):",
        "detail": "cla_backend.apps.call_centre.admin.forms",
        "documentation": {}
    },
    {
        "label": "FullOperatorAdminForm",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.admin.forms",
        "description": "cla_backend.apps.call_centre.admin.forms",
        "peekOfCode": "class FullOperatorAdminForm(OneToOneUserAdminForm):\n    \"\"\"\n    Like OperatorAdminForm but with 'is_cla_superuser' added.\n    \"\"\"\n    class Meta(object):\n        model = Operator\n        fields = [\n            \"username\",\n            \"password\",\n            \"password2\",",
        "detail": "cla_backend.apps.call_centre.admin.forms",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.management.commands.cla_superuser_organisation_perms",
        "description": "cla_backend.apps.call_centre.management.commands.cla_superuser_organisation_perms",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Assign CLA Superusers 'Can add organisation' and 'Can change organisation' permissions\"\n    def handle(self, *args, **options):\n        groups = Group.objects.filter(name=\"CLA Superusers\")\n        if groups.exists():\n            permissions = Permission.objects.filter(name__in=[\"Can add organisation\", \"Can change organisation\"])\n            groups.first().permissions.add(*permissions)",
        "detail": "cla_backend.apps.call_centre.management.commands.cla_superuser_organisation_perms",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.management.commands.create_and_assign_agilisys_organisation",
        "description": "cla_backend.apps.call_centre.management.commands.create_and_assign_agilisys_organisation",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Create Agilisys organisation and assign current agilisys operators to that organisation\"\n    def handle(self, *args, **options):\n        organisation, created = Organisation.objects.get_or_create(name=\"Agilisys\")\n        operators = Operator.objects.filter(organisation__isnull=True, user__email__iendswith=\"@agilisys.co.uk\")\n        if operators.exists():\n            self.stdout.write(\"Updating {count} Agilisys operators...\".format(count=operators.count()), ending=\"\")\n            operators.update(organisation=organisation)\n            self.stdout.write(\"done\")\n        else:",
        "detail": "cla_backend.apps.call_centre.management.commands.create_and_assign_agilisys_organisation",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.migrations.0001_initial",
        "description": "cla_backend.apps.call_centre.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [migrations.swappable_dependency(settings.AUTH_USER_MODEL)]\n    operations = [\n        migrations.CreateModel(\n            name=\"Operator\",\n            fields=[\n                (\"id\", models.AutoField(verbose_name=\"ID\", serialize=False, auto_created=True, primary_key=True)),\n                (\n                    \"created\",\n                    model_utils.fields.AutoCreatedField(",
        "detail": "cla_backend.apps.call_centre.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.migrations.0002_caseworker",
        "description": "cla_backend.apps.call_centre.migrations.0002_caseworker",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [migrations.swappable_dependency(settings.AUTH_USER_MODEL), (\"call_centre\", \"0001_initial\")]\n    operations = [\n        migrations.CreateModel(\n            name=\"Caseworker\",\n            fields=[\n                (\"id\", models.AutoField(verbose_name=\"ID\", serialize=False, auto_created=True, primary_key=True)),\n                (\n                    \"created\",\n                    model_utils.fields.AutoCreatedField(",
        "detail": "cla_backend.apps.call_centre.migrations.0002_caseworker",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.migrations.0003_auto_20190729_1416",
        "description": "cla_backend.apps.call_centre.migrations.0003_auto_20190729_1416",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"call_centre\", \"0002_caseworker\")]\n    operations = [\n        migrations.CreateModel(\n            name=\"Organisation\",\n            fields=[\n                (\"id\", models.AutoField(verbose_name=\"ID\", serialize=False, auto_created=True, primary_key=True)),\n                (\n                    \"created\",\n                    model_utils.fields.AutoCreatedField(",
        "detail": "cla_backend.apps.call_centre.migrations.0003_auto_20190729_1416",
        "documentation": {}
    },
    {
        "label": "OperatorAdminViewTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.admin.test_views",
        "description": "cla_backend.apps.call_centre.tests.admin.test_views",
        "peekOfCode": "class OperatorAdminViewTestCase(TestCase):\n    def setUp(self):\n        super(OperatorAdminViewTestCase, self).setUp()\n        def make_op(username, is_manager=False, is_cla_superuser=False, **kwargs):\n            return make_recipe(\n                \"call_centre.operator\",\n                user__username=username,\n                is_manager=is_manager,\n                is_cla_superuser=is_cla_superuser,\n                **kwargs",
        "detail": "cla_backend.apps.call_centre.tests.admin.test_views",
        "documentation": {}
    },
    {
        "label": "CaseworkerAdminViewTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.admin.test_views",
        "description": "cla_backend.apps.call_centre.tests.admin.test_views",
        "peekOfCode": "class CaseworkerAdminViewTestCase(TestCase):\n    def setUp(self):\n        super(CaseworkerAdminViewTestCase, self).setUp()\n        def make_op(username, is_manager=False, is_cla_superuser=False):\n            return make_recipe(\n                \"call_centre.operator\",\n                user__username=username,\n                is_manager=is_manager,\n                is_cla_superuser=is_cla_superuser,\n            )",
        "detail": "cla_backend.apps.call_centre.tests.admin.test_views",
        "documentation": {}
    },
    {
        "label": "AdaptationsMetadataTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_adaptations_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_adaptations_api",
        "peekOfCode": "class AdaptationsMetadataTestCase(CLAOperatorAuthBaseApiTestMixin, AdaptationsMetadataAPIMixin, APITestCase):\n    pass\nclass AdaptationsDetailsTestCase(CLAOperatorAuthBaseApiTestMixin, AdaptationsDetailsAPIMixin, APITestCase):\n    pass",
        "detail": "cla_backend.apps.call_centre.tests.api.test_adaptations_api",
        "documentation": {}
    },
    {
        "label": "AdaptationsDetailsTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_adaptations_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_adaptations_api",
        "peekOfCode": "class AdaptationsDetailsTestCase(CLAOperatorAuthBaseApiTestMixin, AdaptationsDetailsAPIMixin, APITestCase):\n    pass",
        "detail": "cla_backend.apps.call_centre.tests.api.test_adaptations_api",
        "documentation": {}
    },
    {
        "label": "BaseCaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "peekOfCode": "class BaseCaseTestCase(CLAOperatorAuthBaseApiTestMixin, BaseFullCaseAPIMixin, APITestCase):\n    def get_case_serializer_clazz(self):\n        return CaseSerializer\n    @property\n    def response_keys(self):\n        return [\n            \"eligibility_check\",\n            \"personal_details\",\n            \"reference\",\n            \"created\",",
        "detail": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "CaseGeneralTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "peekOfCode": "class CaseGeneralTestCase(BaseCaseTestCase, FullCaseAPIMixin):\n    def test_methods_not_allowed(self):\n        \"\"\"\n        Ensure that we can't POST, PUT or DELETE\n        \"\"\"\n        # LIST\n        self._test_delete_not_allowed(self.list_url)\n        # DETAIL\n        self._test_delete_not_allowed(self.detail_url)\nclass CreateCaseTestCase(BaseCaseTestCase):",
        "detail": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "CreateCaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "peekOfCode": "class CreateCaseTestCase(BaseCaseTestCase):\n    def test_create_doesnt_set_readonly_values_but_only_personal_details(self):\n        \"\"\"\n        Only POST personal details allowed\n        \"\"\"\n        pd = make_recipe(\"legalaid.personal_details\")\n        eligibility_check = make_recipe(\"legalaid.eligibility_check\")\n        thirdparty_details = make_recipe(\"legalaid.thirdparty_details\")\n        adaptation_details = make_recipe(\"legalaid.adaptation_details\")\n        diagnosis = make_recipe(\"diagnosis.diagnosis\")",
        "detail": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "UpdateCaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "peekOfCode": "class UpdateCaseTestCase(BaseUpdateCaseTestCase, BaseCaseTestCase):\n    @property\n    def response_keys(self):\n        return super(UpdateCaseTestCase, self).response_keys + [\"complaint_count\"]\n    def test_patch_operator_notes_allowed(self):\n        \"\"\"\n        Test that operator can post provider notes at max limit\n        \"\"\"\n        self.assertEqual(CaseNotesHistory.objects.all().count(), 0)\n        max_character_limit = \"A\" * CaseSerializer().fields[\"provider_notes\"].max_length",
        "detail": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "SuggestProviderTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "peekOfCode": "class SuggestProviderTestCase(BaseCaseTestCase):\n    #     # new tests to check assign_suggest view\n    #     # this post always returns a response with the format:\n    #     # {\"suggested_provider\": *, \"as_of\": \"date_time\",\n    #     #  \"suitable_providers\":\n    #     #  [{\"name\": \"*\", \"id\": pk, \"short_code\": \"*\",\n    #     \"telephone_frontdoor\": \"*\", \"telephone_backdoor\": \"0845 122 8677\"},\n    #     #  ...]}\n    @classmethod\n    def setUpTestData(cls):",
        "detail": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "AssignCaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "peekOfCode": "class AssignCaseTestCase(BaseCaseTestCase):\n    def test_assign_invalid_case_reference(self):\n        url = reverse(\"call_centre:case-assign\", args=(), kwargs={\"reference\": \"invalid\"})\n        response = self.client.post(url, data={}, format=\"json\", HTTP_AUTHORIZATION=\"Bearer %s\" % self.token)\n        self.assertEqual(response.status_code, 404)\n    @mock.patch(\"cla_provider.models.timezone.now\")\n    @mock.patch(\"cla_provider.helpers.timezone.now\")\n    def test_assign_case_without_category(self, tz_model_mock, tz_helper_tz):\n        case = make_recipe(\"legalaid.case\", eligibility_check=None)\n        category = make_recipe(\"legalaid.category\")",
        "detail": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "DeferAssignmentTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "peekOfCode": "class DeferAssignmentTestCase(ImplicitEventCodeViewTestCaseMixin, BaseCaseTestCase):\n    def get_url(self, reference=None):\n        reference = reference or self.resource.reference\n        return reverse(\"call_centre:case-defer-assignment\", args=(), kwargs={\"reference\": reference})\nclass DeclineHelpTestCase(ExplicitEventCodeViewTestCaseMixin, BaseCaseTestCase):\n    def get_event_code(self):\n        form = DeclineHelpCaseForm(case=mock.MagicMock())\n        return form.fields[\"event_code\"].choices[0][0]\n    def get_url(self, reference=None):\n        reference = reference or self.resource.reference",
        "detail": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "DeclineHelpTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "peekOfCode": "class DeclineHelpTestCase(ExplicitEventCodeViewTestCaseMixin, BaseCaseTestCase):\n    def get_event_code(self):\n        form = DeclineHelpCaseForm(case=mock.MagicMock())\n        return form.fields[\"event_code\"].choices[0][0]\n    def get_url(self, reference=None):\n        reference = reference or self.resource.reference\n        return reverse(\"call_centre:case-decline-help\", args=(), kwargs={\"reference\": reference})\nclass SuspendCaseTestCase(ExplicitEventCodeViewTestCaseMixin, MockGovNotifyMailBox, BaseCaseTestCase):\n    def get_event_code(self):\n        form = SuspendCaseForm(case=mock.MagicMock())",
        "detail": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "SuspendCaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "peekOfCode": "class SuspendCaseTestCase(ExplicitEventCodeViewTestCaseMixin, MockGovNotifyMailBox, BaseCaseTestCase):\n    def get_event_code(self):\n        form = SuspendCaseForm(case=mock.MagicMock())\n        return form.fields[\"event_code\"].choices[0][0]\n    def get_url(self, reference=None):\n        reference = reference or self.resource.reference\n        return reverse(\"call_centre:case-suspend\", args=(), kwargs={\"reference\": reference})\n    def get_event_code_data(self, code):\n        return {\"notes\": \"lorem ipsum\", \"event_code\": code}\n    def test_RDSP_fails_if_case_not_assigned(self):",
        "detail": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "SearchCaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "peekOfCode": "class SearchCaseTestCase(BaseSearchCaseAPIMixin, BaseCaseTestCase):\n    def test_list_with_dashboard_param(self):\n        \"\"\"\n        Testing that if ?dashboard param is specified, it will exclude cases\n        that are already assigned or don't requires_action_by == OPERATOR\n        \"\"\"\n        Case.objects.all().delete()\n        now = timezone.now()\n        # ref1 is assigned => EXCLUDED\n        # ref2.requires_action_by == None (meaning doesn't require action) => EXCLUDED",
        "detail": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "FilteredSearchCaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "peekOfCode": "class FilteredSearchCaseTestCase(BaseCaseTestCase):\n    def setUp(self):\n        \"\"\"\n        obj1 created by current operator (phone implicit)\n        obj2 created by another operator (phone implicit)\n        obj3 case by phone (explicit)\n        obj4 case from web (explicit)\n        obj5 case with EOD (web explicit)\n        \"\"\"\n        super(FilteredSearchCaseTestCase, self).setUp()",
        "detail": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "FutureCallbacksCaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "peekOfCode": "class FutureCallbacksCaseTestCase(BaseCaseTestCase):\n    def test_get_list(self):\n        Case.objects.all().delete()\n        now = timezone.now()\n        start_of_day = now.replace(hour=0, minute=0, second=0, microsecond=0)\n        # ref1.requires_action_at == past => EXCLUDED\n        # ref2.requires_action_at == None => EXCLUDED\n        # ref3.requires_action_at == start_of_day+7 => INCLUDED\n        # ref4.requires_action_at > start_of_day+7 => EXCLUDED\n        # ref5.requires_action_at == start_of_day => INCLUDED",
        "detail": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "SearchForPersonalDetailsTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "peekOfCode": "class SearchForPersonalDetailsTestCase(BaseCaseTestCase):\n    def make_resource(self, **kwargs):\n        \"\"\"\n            Specifying case.personal_details == None by default\n        \"\"\"\n        kwargs[\"personal_details\"] = None\n        return super(SearchForPersonalDetailsTestCase, self).make_resource(**kwargs)\n    def setUp(self):\n        super(SearchForPersonalDetailsTestCase, self).setUp()\n        def make_pd(full_name, postcode=None, dob=None, vulnerable=False):",
        "detail": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "LinkPersonalDetailsTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "peekOfCode": "class LinkPersonalDetailsTestCase(BaseCaseTestCase):\n    def make_resource(self, **kwargs):\n        \"\"\"\n        Specifying case.personal_details == None by default\n        \"\"\"\n        kwargs[\"personal_details\"] = None\n        return super(LinkPersonalDetailsTestCase, self).make_resource(**kwargs)\n    def setUp(self):\n        super(LinkPersonalDetailsTestCase, self).setUp()\n        self.pd = make_recipe(\"legalaid.personal_details\")",
        "detail": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "CallMeBackTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "peekOfCode": "class CallMeBackTestCase(ImplicitEventCodeViewTestCaseMixin, BaseCaseTestCase):\n    def get_url(self, reference=None):\n        reference = reference or self.resource.reference\n        return reverse(\"call_centre:case-call-me-back\", args=(), kwargs={\"reference\": reference})\n    @mock.patch(\"call_centre.forms.timezone.now\")\n    def __call__(self, runner, mocked_now, *args, **kwargs):\n        self.mocked_now = mocked_now\n        self.mocked_now.return_value = datetime.datetime(2015, 3, 23, 10, 0, 0, 0).replace(tzinfo=timezone.utc)\n        super(CallMeBackTestCase, self).__call__(runner, *args, **kwargs)\n    @property",
        "detail": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "StopCallMeBackTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "peekOfCode": "class StopCallMeBackTestCase(ImplicitEventCodeViewTestCaseMixin, BaseCaseTestCase):\n    def make_resource(self, **kwargs):\n        kwargs[\"callback_attempt\"] = 1\n        return super(StopCallMeBackTestCase, self).make_resource(**kwargs)\n    def get_url(self, reference=None):\n        reference = reference or self.resource.reference\n        return reverse(\"call_centre:case-stop-call-me-back\", args=(), kwargs={\"reference\": reference})\n    def get_default_post_data(self):\n        return {\"notes\": \"lorem ipsum\", \"action\": \"complete\"}\n    def test_successful_CALLBACK_COMPLETE(self):",
        "detail": "cla_backend.apps.call_centre.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "CaseNotesHistoryViewSetTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_case_notes_history_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_case_notes_history_api",
        "peekOfCode": "class CaseNotesHistoryViewSetTestCase(CLAOperatorAuthBaseApiTestMixin, CaseNotesHistoryAPIMixin, APITestCase):\n    pass",
        "detail": "cla_backend.apps.call_centre.tests.api.test_case_notes_history_api",
        "documentation": {}
    },
    {
        "label": "OrganisationCaseAssignmentTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_case_organisation_assignment",
        "description": "cla_backend.apps.call_centre.tests.api.test_case_organisation_assignment",
        "peekOfCode": "class OrganisationCaseAssignmentTestCase(BaseCaseTestCase, FullCaseAPIMixin):\n    def setUp(self):\n        super(OrganisationCaseAssignmentTestCase, self).setUp()\n        self.foo_org = make_recipe(\"call_centre.organisation\", name=\"Organisation Foo\")\n        self.bar_org = make_recipe(\"call_centre.organisation\", name=\"Organisation Bar\")\n    def test_case_organisation_is_set_when_operator_create_case(self):\n        # Assign operator organisation as the case organisation when a case is created\n        organisations = [self.foo_org, self.bar_org, None]\n        url = reverse(u\"%s:case-list\" % self.API_URL_NAMESPACE)\n        for organisation in organisations:",
        "detail": "cla_backend.apps.call_centre.tests.api.test_case_organisation_assignment",
        "documentation": {}
    },
    {
        "label": "CategoryTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_category_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_category_api",
        "peekOfCode": "class CategoryTestCase(CLAOperatorAuthBaseApiTestMixin, CategoryAPIMixin, APITestCase):\n    pass",
        "detail": "cla_backend.apps.call_centre.tests.api.test_category_api",
        "documentation": {}
    },
    {
        "label": "CSVUploadAPIMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_csvupload_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_csvupload_api",
        "peekOfCode": "class CSVUploadAPIMixin(SimpleResourceAPIMixin):\n    RESOURCE_RECIPE = \"cla_provider.csvupload_case\"\n    API_URL_BASE_NAME = \"csvupload\"\n    @property\n    def response_keys(self):\n        return [\"id\", \"provider\", \"created_by\", \"comment\", \"rows\", \"month\", \"created\", \"modified\"]\n    @property\n    def response_keys_details(self):\n        keys = self.response_keys[:]\n        keys.remove(\"rows\")",
        "detail": "cla_backend.apps.call_centre.tests.api.test_csvupload_api",
        "documentation": {}
    },
    {
        "label": "CSVUploadTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_csvupload_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_csvupload_api",
        "peekOfCode": "class CSVUploadTestCase(CSVUploadAPIMixin, CLAOperatorAuthBaseApiTestMixin, APITestCase):\n    def assertResponseKeys(self, response, detail=False, paginated=False):\n        return super(CSVUploadTestCase, self).assertResponseKeys(\n            response, keys=self.response_keys_details if detail else None, paginated=paginated\n        )\n    def test_get(self):\n        response = self.client.get(\n            self.detail_url, HTTP_AUTHORIZATION=self.get_http_authorization(self.operator_manager_token)\n        )\n        self.assertResponseKeys(response, detail=True)",
        "detail": "cla_backend.apps.call_centre.tests.api.test_csvupload_api",
        "documentation": {}
    },
    {
        "label": "DiagnosisTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_diagnosis_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_diagnosis_api",
        "peekOfCode": "class DiagnosisTestCase(CLAOperatorAuthBaseApiTestMixin, DiagnosisAPIMixin, APITestCase):\n    pass",
        "detail": "cla_backend.apps.call_centre.tests.api.test_diagnosis_api",
        "documentation": {}
    },
    {
        "label": "EligibilityCheckTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_eligibility_check_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_eligibility_check_api",
        "peekOfCode": "class EligibilityCheckTestCase(CLAOperatorAuthBaseApiTestMixin, NestedEligibilityCheckAPIMixin, APITestCase):\n    LOOKUP_KEY = \"case_reference\"\n    @property\n    def response_keys(self):\n        return [\n            \"reference\",\n            \"category\",\n            \"notes\",\n            \"your_problem_notes\",\n            \"property_set\",",
        "detail": "cla_backend.apps.call_centre.tests.api.test_eligibility_check_api",
        "documentation": {}
    },
    {
        "label": "EventViewSetTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_event_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_event_api",
        "peekOfCode": "class EventViewSetTestCase(CLAOperatorAuthBaseApiTestMixin, EventAPIMixin, APITestCase):\n    pass",
        "detail": "cla_backend.apps.call_centre.tests.api.test_event_api",
        "documentation": {}
    },
    {
        "label": "FeedbackAPITestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_feedback_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_feedback_api",
        "peekOfCode": "class FeedbackAPITestCase(SimpleResourceAPIMixin, CLAOperatorAuthBaseApiTestMixin, APITestCase):\n    RESOURCE_RECIPE = \"cla_provider.feedback\"\n    LOOKUP_KEY = \"reference\"\n    API_URL_BASE_NAME = \"feedback\"\n    def setUp(self):\n        super(FeedbackAPITestCase, self).setUp()\n        self.operator.is_manager = True\n        self.operator.save()\n    @property\n    def response_keys(self):",
        "detail": "cla_backend.apps.call_centre.tests.api.test_feedback_api",
        "documentation": {}
    },
    {
        "label": "LogViewSetTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_log_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_log_api",
        "peekOfCode": "class LogViewSetTestCase(CLAOperatorAuthBaseApiTestMixin, LogAPIMixin, APITestCase):\n    pass",
        "detail": "cla_backend.apps.call_centre.tests.api.test_log_api",
        "documentation": {}
    },
    {
        "label": "NotificationApiTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_notification_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_notification_api",
        "peekOfCode": "class NotificationApiTestCase(CLAOperatorAuthBaseApiTestMixin, NotificationAPIMixin, APITestCase):\n    pass",
        "detail": "cla_backend.apps.call_centre.tests.api.test_notification_api",
        "documentation": {}
    },
    {
        "label": "PersonalDetailsTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_personal_details_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_personal_details_api",
        "peekOfCode": "class PersonalDetailsTestCase(CLAOperatorAuthBaseApiTestMixin, PersonalDetailsAPIMixin, APITestCase):\n    @property\n    def diversity_url(self):\n        return self.get_detail_url(self.resource_lookup_value, suffix=\"set-diversity\")\n    def _diversity_post_data(self, **kwargs):\n        defaults = {\n            \"gender\": GENDERS.PNS,\n            \"religion\": RELIGIONS.PNS,\n            \"disability\": DISABILITIES.PNS,\n            \"ethnicity\": ETHNICITIES.PNS,",
        "detail": "cla_backend.apps.call_centre.tests.api.test_personal_details_api",
        "documentation": {}
    },
    {
        "label": "ProviderTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_provider_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_provider_api",
        "peekOfCode": "class ProviderTestCase(CLAOperatorAuthBaseApiTestMixin, SimpleResourceAPIMixin, APITestCase):\n    LOOKUP_KEY = \"pk\"\n    API_URL_BASE_NAME = \"provider\"\n    RESOURCE_RECIPE = \"cla_provider.provider\"\n    def setUp(self):\n        super(ProviderTestCase, self).setUp()\n        self.providers = [self.resource, self.make_resource()]\n    def make_resource(self, **kwargs):\n        return super(ProviderTestCase, self).make_resource(active=True)\n    @property",
        "detail": "cla_backend.apps.call_centre.tests.api.test_provider_api",
        "documentation": {}
    },
    {
        "label": "OutOfHoursRotaTests",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_provider_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_provider_api",
        "peekOfCode": "class OutOfHoursRotaTests(CLAOperatorAuthBaseApiTestMixin, APITestCase):\n    def assertOutOfHoursRotaCheckResponseKeys(self, response):\n        self.assertItemsEqual(\n            response.data.keys(), [\"id\", \"start_date\", \"end_date\", \"category\", \"provider\", \"provider_name\"]\n        )\n    def setUp(self):\n        super(OutOfHoursRotaTests, self).setUp()\n        self.operator.is_manager = True\n        self.operator.save()\n        self.categories = make_recipe(\"legalaid.category\", _quantity=3)",
        "detail": "cla_backend.apps.call_centre.tests.api.test_provider_api",
        "documentation": {}
    },
    {
        "label": "ThirdPartyDetailsTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_third_party_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_third_party_api",
        "peekOfCode": "class ThirdPartyDetailsTestCase(CLAOperatorAuthBaseApiTestMixin, ThirdPartyDetailsApiMixin, APITestCase):\n    pass",
        "detail": "cla_backend.apps.call_centre.tests.api.test_third_party_api",
        "documentation": {}
    },
    {
        "label": "TimerViewSetTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_timer_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_timer_api",
        "peekOfCode": "class TimerViewSetTestCase(CLAOperatorAuthBaseApiTestMixin, TimerAPIMixin, APITestCase):\n    pass",
        "detail": "cla_backend.apps.call_centre.tests.api.test_timer_api",
        "documentation": {}
    },
    {
        "label": "UserTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.api.test_user_api",
        "description": "cla_backend.apps.call_centre.tests.api.test_user_api",
        "peekOfCode": "class UserTestCase(CLAOperatorAuthBaseApiTestMixin, UserAPIMixin, APITestCase):\n    def assertUserEqual(self, data):\n        self.assertDictContainsSubset(\n            {\n                \"username\": u\"john\",\n                \"first_name\": u\"\",\n                \"last_name\": u\"\",\n                \"email\": u\"lennon@thebeatles.com\",\n                \"is_manager\": False,\n                \"is_cla_superuser\": False,",
        "detail": "cla_backend.apps.call_centre.tests.api.test_user_api",
        "documentation": {}
    },
    {
        "label": "organisation",
        "kind": 5,
        "importPath": "cla_backend.apps.call_centre.tests.mommy_recipes",
        "description": "cla_backend.apps.call_centre.tests.mommy_recipes",
        "peekOfCode": "organisation = Recipe(Organisation)\noperator = Recipe(Operator)\ncaseworker = Recipe(Caseworker)",
        "detail": "cla_backend.apps.call_centre.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 5,
        "importPath": "cla_backend.apps.call_centre.tests.mommy_recipes",
        "description": "cla_backend.apps.call_centre.tests.mommy_recipes",
        "peekOfCode": "operator = Recipe(Operator)\ncaseworker = Recipe(Caseworker)",
        "detail": "cla_backend.apps.call_centre.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "caseworker",
        "kind": 5,
        "importPath": "cla_backend.apps.call_centre.tests.mommy_recipes",
        "description": "cla_backend.apps.call_centre.tests.mommy_recipes",
        "peekOfCode": "caseworker = Recipe(Caseworker)",
        "detail": "cla_backend.apps.call_centre.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "OrganisationOperatorCommandTest",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.test_commands",
        "description": "cla_backend.apps.call_centre.tests.test_commands",
        "peekOfCode": "class OrganisationOperatorCommandTest(TestCase):\n    def test_create_and_assign_agilisys_organisation(self):\n        organisation = make_recipe(\"call_centre.organisation\", name=\"Agilisys\")\n        make_recipe(\"call_centre.operator\", user=make_user(email=\"user1@agilisys.co.uk\"))\n        make_recipe(\"call_centre.operator\", user=make_user(email=\"user2@Agilisys.co.uk\"))\n        make_recipe(\"call_centre.operator\", user=make_user(email=\"user2@agilisys.co.uki\"))\n        make_recipe(\"call_centre.operator\", user=make_user(email=\"user3@agilisys.co.uk\"), organisation=organisation)\n        make_recipe(\"call_centre.operator\", user=make_user(email=\"user1@hgs.co.uk\"))\n        make_recipe(\"call_centre.operator\", user=make_user(email=\"user1@yahoo.co.uk\"))\n        make_recipe(\"call_centre.operator\", user=make_user(email=\"user1@yahoo.co.uk\"))",
        "detail": "cla_backend.apps.call_centre.tests.test_commands",
        "documentation": {}
    },
    {
        "label": "AssignToProviderEventTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.test_events",
        "description": "cla_backend.apps.call_centre.tests.test_events",
        "peekOfCode": "class AssignToProviderEventTestCase(EventTestCaseMixin, TestCase):\n    EVENT_KEY = \"assign_to_provider\"\n    def test_assign_to_provider_manually(self):\n        eligible_case = make_recipe(\"legalaid.eligible_case\")\n        self._test_process_with_implicit_code(\"MANALC\", process_kwargs={\"is_manual\": True}, dummy_case=eligible_case)\n    def test_assign_to_provider_MANREF(self):\n        eligible_case = make_recipe(\"legalaid.eligible_case\")\n        self._test_process_with_implicit_code(\n            \"MANREF\", process_kwargs={\"is_manual_ref\": True}, dummy_case=eligible_case\n        )",
        "detail": "cla_backend.apps.call_centre.tests.test_events",
        "documentation": {}
    },
    {
        "label": "DeferAssignmentEventTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.test_events",
        "description": "cla_backend.apps.call_centre.tests.test_events",
        "peekOfCode": "class DeferAssignmentEventTestCase(EventTestCaseMixin, TestCase):\n    EVENT_KEY = \"defer_assignment\"\n    def test_defer_assignment(self):\n        self._test_process_with_implicit_code(\"CBSP\")\nclass DeclineHelpEventTestCase(EventTestCaseMixin, TestCase):\n    EVENT_KEY = \"decline_help\"\n    CODES = [\"DESP\", \"DECL\", \"NRES\"]\n    def test_DESP(self):\n        self._test_process_with_expicit_code_and_requires_action_None_if_op_or_op_manager(self.CODES, code=\"DESP\")\n    def test_DECL(self):",
        "detail": "cla_backend.apps.call_centre.tests.test_events",
        "documentation": {}
    },
    {
        "label": "DeclineHelpEventTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.test_events",
        "description": "cla_backend.apps.call_centre.tests.test_events",
        "peekOfCode": "class DeclineHelpEventTestCase(EventTestCaseMixin, TestCase):\n    EVENT_KEY = \"decline_help\"\n    CODES = [\"DESP\", \"DECL\", \"NRES\"]\n    def test_DESP(self):\n        self._test_process_with_expicit_code_and_requires_action_None_if_op_or_op_manager(self.CODES, code=\"DESP\")\n    def test_DECL(self):\n        self._test_process_with_expicit_code_and_requires_action_None_if_op_or_op_manager(self.CODES, code=\"DECL\")\n    def test_NRES(self):\n        self._test_process_with_expicit_code_and_requires_action_None_if_op_or_op_manager(self.CODES, code=\"NRES\")\nclass CallMeBackEventTestCase(EventTestCaseMixin, TestCase):",
        "detail": "cla_backend.apps.call_centre.tests.test_events",
        "documentation": {}
    },
    {
        "label": "CallMeBackEventTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.test_events",
        "description": "cla_backend.apps.call_centre.tests.test_events",
        "peekOfCode": "class CallMeBackEventTestCase(EventTestCaseMixin, TestCase):\n    EVENT_KEY = \"call_me_back\"\n    def test_CB1(self):\n        self._test_process_with_implicit_code(\"CB1\")\n    def test_CB2(self):\n        case = make_recipe(\"legalaid.case\", callback_attempt=1)\n        self._test_process_with_implicit_code(\"CB2\", dummy_case=case)\n    def test_CB3(self):\n        case = make_recipe(\"legalaid.case\", callback_attempt=2)\n        self._test_process_with_implicit_code(\"CB3\", dummy_case=case)",
        "detail": "cla_backend.apps.call_centre.tests.test_events",
        "documentation": {}
    },
    {
        "label": "StopCallMeBackEventTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.test_events",
        "description": "cla_backend.apps.call_centre.tests.test_events",
        "peekOfCode": "class StopCallMeBackEventTestCase(EventTestCaseMixin, TestCase):\n    EVENT_KEY = \"stop_call_me_back\"\n    def test_CBC(self):\n        # with callback_attempt == 1\n        case = make_recipe(\"legalaid.case\", callback_attempt=1)\n        self._test_process_with_implicit_code(\"CBC\", dummy_case=case, process_kwargs={\"cancel\": True})\n        # with callback_attempt == 2\n        case = make_recipe(\"legalaid.case\", callback_attempt=2)\n        self._test_process_with_implicit_code(\"CBC\", dummy_case=case, process_kwargs={\"cancel\": True})\n        # with callback_attempt == 3",
        "detail": "cla_backend.apps.call_centre.tests.test_events",
        "documentation": {}
    },
    {
        "label": "ProviderAllocationFormTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.test_forms",
        "description": "cla_backend.apps.call_centre.tests.test_forms",
        "peekOfCode": "class ProviderAllocationFormTestCase(TestCase):\n    @mock.patch(\"cla_provider.helpers.timezone.now\")\n    def test_save_in_office_hours(self, timezone_mock):\n        _mock_datetime_now_with(datetime.datetime(2014, 1, 2, 9, 1, 0), timezone_mock)\n        case = make_recipe(\"legalaid.case\")\n        category = case.eligibility_check.category\n        case.matter_type1 = make_recipe(\"legalaid.matter_type1\", category=category)\n        case.matter_type2 = make_recipe(\"legalaid.matter_type2\", category=category)\n        case.save()\n        user = make_user()",
        "detail": "cla_backend.apps.call_centre.tests.test_forms",
        "documentation": {}
    },
    {
        "label": "DeferAssignmentCaseFormTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.test_forms",
        "description": "cla_backend.apps.call_centre.tests.test_forms",
        "peekOfCode": "class DeferAssignmentCaseFormTestCase(BaseCaseLogFormTestCaseMixin, TestCase):\n    FORM = DeferAssignmentCaseForm\nclass DeclineHelpCaseFormTestCase(EventSpecificLogFormTestCaseMixin, TestCase):\n    FORM = DeclineHelpCaseForm\nclass CallMeBackFormTestCase(BaseCaseLogFormTestCaseMixin, CallCentreFixedOperatingHours, TestCase):\n    FORM = CallMeBackForm\n    def _strftime(self, date):\n        return date.strftime(\"%Y-%m-%d %H:%M\")\n    @mock.patch(\"call_centre.forms.timezone.now\")\n    def __call__(self, runner, mocked_now, *args, **kwargs):",
        "detail": "cla_backend.apps.call_centre.tests.test_forms",
        "documentation": {}
    },
    {
        "label": "DeclineHelpCaseFormTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.test_forms",
        "description": "cla_backend.apps.call_centre.tests.test_forms",
        "peekOfCode": "class DeclineHelpCaseFormTestCase(EventSpecificLogFormTestCaseMixin, TestCase):\n    FORM = DeclineHelpCaseForm\nclass CallMeBackFormTestCase(BaseCaseLogFormTestCaseMixin, CallCentreFixedOperatingHours, TestCase):\n    FORM = CallMeBackForm\n    def _strftime(self, date):\n        return date.strftime(\"%Y-%m-%d %H:%M\")\n    @mock.patch(\"call_centre.forms.timezone.now\")\n    def __call__(self, runner, mocked_now, *args, **kwargs):\n        self.mocked_now = mocked_now\n        self.mocked_now.return_value = datetime.datetime(2015, 3, 24, 10, 0, 0, 0).replace(tzinfo=timezone.utc)",
        "detail": "cla_backend.apps.call_centre.tests.test_forms",
        "documentation": {}
    },
    {
        "label": "CallMeBackFormTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.test_forms",
        "description": "cla_backend.apps.call_centre.tests.test_forms",
        "peekOfCode": "class CallMeBackFormTestCase(BaseCaseLogFormTestCaseMixin, CallCentreFixedOperatingHours, TestCase):\n    FORM = CallMeBackForm\n    def _strftime(self, date):\n        return date.strftime(\"%Y-%m-%d %H:%M\")\n    @mock.patch(\"call_centre.forms.timezone.now\")\n    def __call__(self, runner, mocked_now, *args, **kwargs):\n        self.mocked_now = mocked_now\n        self.mocked_now.return_value = datetime.datetime(2015, 3, 24, 10, 0, 0, 0).replace(tzinfo=timezone.utc)\n        self.expected_sla_72h = datetime.datetime(2015, 4, 7, 13, 30, 0, 0)\n        self.default_dt = self.mocked_now().replace(day=30)",
        "detail": "cla_backend.apps.call_centre.tests.test_forms",
        "documentation": {}
    },
    {
        "label": "StopCallMeBackFormTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.test_forms",
        "description": "cla_backend.apps.call_centre.tests.test_forms",
        "peekOfCode": "class StopCallMeBackFormTestCase(BaseCaseLogFormTestCaseMixin, TestCase):\n    FORM = StopCallMeBackForm\n    def get_default_data(self, **kwargs):\n        return {\"notes\": \"lorem ipsum\", \"action\": \"complete\"}\n    def test_save_successfull(self):\n        # commented out because split into _CBC, _CALLBACK_COMPLETE\n        pass\n    def test_save_successfull_CBC(self):\n        case = make_recipe(\"legalaid.case\", callback_attempt=1, requires_action_at=timezone.now())\n        self._test_save_successfull(case=case, data={\"notes\": \"lorem ipsum\", \"action\": \"cancel\"})",
        "detail": "cla_backend.apps.call_centre.tests.test_forms",
        "documentation": {}
    },
    {
        "label": "OperatorTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.test_models",
        "description": "cla_backend.apps.call_centre.tests.test_models",
        "peekOfCode": "class OperatorTestCase(TestCase):\n    def test_save_sets_is_manager_True_if_is_cla_superuser_True(self):\n        operator = make_recipe(\"call_centre.operator\", is_cla_superuser=True, is_manager=False)\n        self.assertTrue(operator.is_cla_superuser)\n        self.assertTrue(operator.is_manager)\n        # setting again is_manager to False but keeping is_cla_superuser True\n        #   => is_manager should still be True\n        operator.is_manager = False\n        operator.save()\n        self.assertTrue(operator.is_manager)",
        "detail": "cla_backend.apps.call_centre.tests.test_models",
        "documentation": {}
    },
    {
        "label": "MockView",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.test_permissions",
        "description": "cla_backend.apps.call_centre.tests.test_permissions",
        "peekOfCode": "class MockView(APIView):\n    permission_classes = (permissions.CallCentreClientIDPermission,)\n    def get(self, request):\n        return HttpResponse({\"a\": 1, \"b\": 2, \"c\": 3})\n    def post(self, request):\n        return HttpResponse({\"a\": 1, \"b\": 2, \"c\": 3})\n    def put(self, request):\n        return HttpResponse({\"a\": 1, \"b\": 2, \"c\": 3})\nurlpatterns = base_patterns + patterns(\"\", (r\"^mock_view/$\", MockView.as_view(authentication_classes=[OAuth2Authentication])))\nclass CallCentreClientIDPermissionTestCase(CLAOperatorAuthBaseApiTestMixin, TestCase):",
        "detail": "cla_backend.apps.call_centre.tests.test_permissions",
        "documentation": {}
    },
    {
        "label": "CallCentreClientIDPermissionTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.test_permissions",
        "description": "cla_backend.apps.call_centre.tests.test_permissions",
        "peekOfCode": "class CallCentreClientIDPermissionTestCase(CLAOperatorAuthBaseApiTestMixin, TestCase):\n    urls = \"call_centre.tests.test_permissions\"\n    def test_oauth2_permission_ok(self):\n        response = self.client.get(\"/mock_view/\", HTTP_AUTHORIZATION=\"Bearer %s\" % self.token.token)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n    def test_oauth2_permission_fail_if_no_token(self):\n        response = self.client.get(\"/mock_view/\")\n        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)\n    def test_oauth2_permission_fail_if_wrong_client_id_token(self):\n        new_client = Application.objects.create(",
        "detail": "cla_backend.apps.call_centre.tests.test_permissions",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "cla_backend.apps.call_centre.tests.test_permissions",
        "description": "cla_backend.apps.call_centre.tests.test_permissions",
        "peekOfCode": "urlpatterns = base_patterns + patterns(\"\", (r\"^mock_view/$\", MockView.as_view(authentication_classes=[OAuth2Authentication])))\nclass CallCentreClientIDPermissionTestCase(CLAOperatorAuthBaseApiTestMixin, TestCase):\n    urls = \"call_centre.tests.test_permissions\"\n    def test_oauth2_permission_ok(self):\n        response = self.client.get(\"/mock_view/\", HTTP_AUTHORIZATION=\"Bearer %s\" % self.token.token)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n    def test_oauth2_permission_fail_if_no_token(self):\n        response = self.client.get(\"/mock_view/\")\n        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)\n    def test_oauth2_permission_fail_if_wrong_client_id_token(self):",
        "detail": "cla_backend.apps.call_centre.tests.test_permissions",
        "documentation": {}
    },
    {
        "label": "FormatPatchTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.test_utils",
        "description": "cla_backend.apps.call_centre.tests.test_utils",
        "peekOfCode": "class FormatPatchTestCase(TestCase):\n    def setUp(self):\n        self.initial = {\"foo\": 1, \"bar\": \"bar\", \"list\": [\"baz\", \"baz\"]}\n    def test_format_simple_change(self):\n        b = self.initial.copy()\n        b[\"foo\"] = 2\n        # b['bar'] = 'rab'\n        # b['list'] = reversed(b['list'])\n        patch = jsonpatch.JsonPatch.from_diff(self.initial, b)\n        formatted = format_patch(patch)",
        "detail": "cla_backend.apps.call_centre.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "CallCentreFixedOperatingHours",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.tests.test_utils",
        "description": "cla_backend.apps.call_centre.tests.test_utils",
        "peekOfCode": "class CallCentreFixedOperatingHours(object):\n    def setUp(self):\n        super(CallCentreFixedOperatingHours, self).setUp()\n        operator_hours = OpeningHours(**settings.OPERATOR_HOURS)\n        self.operator_hours_patcher = mock.patch.object(sla, \"operator_hours\", operator_hours)\n        self.operator_hours_patcher.start()\n    def tearDown(self):\n        self.operator_hours_patcher.stop()",
        "detail": "cla_backend.apps.call_centre.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "AssignToProviderEvent",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.events",
        "description": "cla_backend.apps.call_centre.events",
        "peekOfCode": "class AssignToProviderEvent(BaseEvent):\n    key = \"assign_to_provider\"\n    codes = {\n        \"REFSP\": {\n            \"type\": LOG_TYPES.OUTCOME,\n            \"level\": LOG_LEVELS.HIGH,\n            \"selectable_by\": [],\n            \"description\": \"Referred to Specialist\",\n            \"stops_timer\": True,\n            \"set_requires_action_by\": REQUIRES_ACTION_BY.PROVIDER_REVIEW,",
        "detail": "cla_backend.apps.call_centre.events",
        "documentation": {}
    },
    {
        "label": "DeferAssignmentEvent",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.events",
        "description": "cla_backend.apps.call_centre.events",
        "peekOfCode": "class DeferAssignmentEvent(BaseEvent):\n    key = \"defer_assignment\"\n    codes = {\n        \"CBSP\": {\n            \"type\": LOG_TYPES.OUTCOME,\n            \"level\": LOG_LEVELS.HIGH,\n            \"selectable_by\": [LOG_ROLES.OPERATOR],\n            \"description\": \"Will call back later for Specialist\",\n            \"stops_timer\": True,\n        }",
        "detail": "cla_backend.apps.call_centre.events",
        "documentation": {}
    },
    {
        "label": "DeclineHelpEvent",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.events",
        "description": "cla_backend.apps.call_centre.events",
        "peekOfCode": "class DeclineHelpEvent(BaseEvent):\n    key = \"decline_help\"\n    codes = {\n        \"DESP\": {\n            \"type\": LOG_TYPES.OUTCOME,\n            \"level\": LOG_LEVELS.HIGH,\n            \"selectable_by\": [LOG_ROLES.OPERATOR],\n            \"description\": \"Client declined Specialist\",\n            \"stops_timer\": True,\n            \"set_requires_action_by\": None_if_owned_by_op_or_op_manager,",
        "detail": "cla_backend.apps.call_centre.events",
        "documentation": {}
    },
    {
        "label": "CallMeBackEvent",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.events",
        "description": "cla_backend.apps.call_centre.events",
        "peekOfCode": "class CallMeBackEvent(BaseEvent):\n    key = \"call_me_back\"\n    codes = {\n        \"CB1\": {\n            \"type\": LOG_TYPES.OUTCOME,\n            \"level\": LOG_LEVELS.HIGH,\n            \"selectable_by\": [LOG_ROLES.OPERATOR],\n            \"description\": \"Callback 1\",\n            \"stops_timer\": True,\n            \"set_requires_action_by\": REQUIRES_ACTION_BY.OPERATOR,",
        "detail": "cla_backend.apps.call_centre.events",
        "documentation": {}
    },
    {
        "label": "StopCallMeBackEvent",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.events",
        "description": "cla_backend.apps.call_centre.events",
        "peekOfCode": "class StopCallMeBackEvent(BaseEvent):\n    key = \"stop_call_me_back\"\n    codes = {\n        \"CBC\": {\n            \"type\": LOG_TYPES.OUTCOME,\n            \"level\": LOG_LEVELS.HIGH,\n            \"selectable_by\": [LOG_ROLES.OPERATOR],\n            \"description\": \"Callback Cancelled\",\n            \"stops_timer\": True,\n            \"set_requires_action_by\": None_if_owned_by_op_or_op_manager,",
        "detail": "cla_backend.apps.call_centre.events",
        "documentation": {}
    },
    {
        "label": "ProviderAllocationForm",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.forms",
        "description": "cla_backend.apps.call_centre.forms",
        "peekOfCode": "class ProviderAllocationForm(BaseCaseLogForm):\n    LOG_EVENT_KEY = \"assign_to_provider\"\n    provider = forms.ChoiceField()\n    is_manual = forms.BooleanField(required=False)\n    is_manual_ref = forms.BooleanField(required=False)\n    is_spor = forms.BooleanField(required=False)\n    is_urgent = forms.BooleanField(required=False)\n    def __init__(self, *args, **kwargs):\n        self.providers = kwargs.pop(\"providers\", None)\n        if self.providers:",
        "detail": "cla_backend.apps.call_centre.forms",
        "documentation": {}
    },
    {
        "label": "DeferAssignmentCaseForm",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.forms",
        "description": "cla_backend.apps.call_centre.forms",
        "peekOfCode": "class DeferAssignmentCaseForm(BaseCaseLogForm):\n    LOG_EVENT_KEY = \"defer_assignment\"\nclass DeclineHelpCaseForm(EventSpecificLogForm):\n    LOG_EVENT_KEY = \"decline_help\"\nclass SuspendCaseForm(EventSpecificLogForm):\n    LOG_EVENT_KEY = \"suspend_case\"\n    def clean_event_code(self):\n        code = self.cleaned_data.get(\"event_code\")\n        if code:\n            if code == \"RDSP\":",
        "detail": "cla_backend.apps.call_centre.forms",
        "documentation": {}
    },
    {
        "label": "DeclineHelpCaseForm",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.forms",
        "description": "cla_backend.apps.call_centre.forms",
        "peekOfCode": "class DeclineHelpCaseForm(EventSpecificLogForm):\n    LOG_EVENT_KEY = \"decline_help\"\nclass SuspendCaseForm(EventSpecificLogForm):\n    LOG_EVENT_KEY = \"suspend_case\"\n    def clean_event_code(self):\n        code = self.cleaned_data.get(\"event_code\")\n        if code:\n            if code == \"RDSP\":\n                # check that the case has really been assigned to a specialist\n                if not self.case.provider:",
        "detail": "cla_backend.apps.call_centre.forms",
        "documentation": {}
    },
    {
        "label": "SuspendCaseForm",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.forms",
        "description": "cla_backend.apps.call_centre.forms",
        "peekOfCode": "class SuspendCaseForm(EventSpecificLogForm):\n    LOG_EVENT_KEY = \"suspend_case\"\n    def clean_event_code(self):\n        code = self.cleaned_data.get(\"event_code\")\n        if code:\n            if code == \"RDSP\":\n                # check that the case has really been assigned to a specialist\n                if not self.case.provider:\n                    raise ValidationError(\"You can only use RDSP if the case is assigned to a specialist\")\n            if code == \"SAME\":",
        "detail": "cla_backend.apps.call_centre.forms",
        "documentation": {}
    },
    {
        "label": "AlternativeHelpForm",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.forms",
        "description": "cla_backend.apps.call_centre.forms",
        "peekOfCode": "class AlternativeHelpForm(EventSpecificLogForm):\n    selected_providers = forms.ModelMultipleChoiceField(queryset=Article.objects.all(), required=False)\n    LOG_EVENT_KEY = \"alternative_help\"\n    def get_notes(self):\n        notes = self.cleaned_data.get(\"notes\")\n        providers = self.cleaned_data.get(\"selected_providers\", [])\n        notes_l = [notes, \"Assigned alternative help:\"]\n        for provider in providers:\n            notes_l.append(unicode(provider))\n        return \"\\n\".join(notes_l)",
        "detail": "cla_backend.apps.call_centre.forms",
        "documentation": {}
    },
    {
        "label": "CallMeBackForm",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.forms",
        "description": "cla_backend.apps.call_centre.forms",
        "peekOfCode": "class CallMeBackForm(BaseCallMeBackForm):\n    # format \"2013-12-29 23:59\" always in UTC\n    datetime = forms.DateTimeField()\n    priority_callback = forms.BooleanField(required=False)\n    def get_sla_base_time(self, _dt):\n        if self.case.source in [CASE_SOURCE.SMS, CASE_SOURCE.VOICEMAIL]:\n            created = self.case.created\n            if timezone.is_naive(created):\n                created = timezone.make_aware(created, timezone.get_default_timezone())\n            return timezone.localtime(created)",
        "detail": "cla_backend.apps.call_centre.forms",
        "documentation": {}
    },
    {
        "label": "StopCallMeBackForm",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.forms",
        "description": "cla_backend.apps.call_centre.forms",
        "peekOfCode": "class StopCallMeBackForm(BaseCaseLogForm):\n    LOG_EVENT_KEY = \"stop_call_me_back\"\n    action = forms.ChoiceField(choices=((\"cancel\", \"Cancel\"), (\"complete\", \"complete\")))\n    def get_kwargs(self):\n        action = self.cleaned_data[\"action\"]\n        kwargs = {action: True}\n        return kwargs\n    def clean(self):\n        \"\"\"\n        Catches further validation errors before the save.",
        "detail": "cla_backend.apps.call_centre.forms",
        "documentation": {}
    },
    {
        "label": "DiversityForm",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.forms",
        "description": "cla_backend.apps.call_centre.forms",
        "peekOfCode": "class DiversityForm(forms.Form):\n    gender = forms.ChoiceField(required=True, choices=GENDERS.CHOICES)\n    ethnicity = forms.ChoiceField(required=True, choices=ETHNICITIES.CHOICES)\n    religion = forms.ChoiceField(required=True, choices=RELIGIONS.CHOICES)\n    sexual_orientation = forms.ChoiceField(required=True, choices=SEXUAL_ORIENTATIONS.CHOICES)\n    disability = forms.ChoiceField(required=True, choices=DISABILITIES.CHOICES)\n    def __init__(self, *args, **kwargs):\n        self.personal_details = kwargs.pop(\"obj\")\n        super(DiversityForm, self).__init__(*args, **kwargs)\n    def save(self, user):",
        "detail": "cla_backend.apps.call_centre.forms",
        "documentation": {}
    },
    {
        "label": "operator_hours",
        "kind": 5,
        "importPath": "cla_backend.apps.call_centre.forms",
        "description": "cla_backend.apps.call_centre.forms",
        "peekOfCode": "operator_hours = OpeningHours(**OPERATOR_HOURS)\nclass ProviderAllocationForm(BaseCaseLogForm):\n    LOG_EVENT_KEY = \"assign_to_provider\"\n    provider = forms.ChoiceField()\n    is_manual = forms.BooleanField(required=False)\n    is_manual_ref = forms.BooleanField(required=False)\n    is_spor = forms.BooleanField(required=False)\n    is_urgent = forms.BooleanField(required=False)\n    def __init__(self, *args, **kwargs):\n        self.providers = kwargs.pop(\"providers\", None)",
        "detail": "cla_backend.apps.call_centre.forms",
        "documentation": {}
    },
    {
        "label": "Caseworker",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.models",
        "description": "cla_backend.apps.call_centre.models",
        "peekOfCode": "class Caseworker(TimeStampedModel):\n    user = models.OneToOneField(\"auth.User\")\n    def __unicode__(self):\n        return self.user.username\n    def save(self, *args, **kwargs):\n        obj = super(Caseworker, self).save(*args, **kwargs)\n        group = Group.objects.get(name=LAA_CASEWORKER_GROUP_NAME)\n        group.user_set.add(self.user)\n        return obj\nclass Organisation(TimeStampedModel):",
        "detail": "cla_backend.apps.call_centre.models",
        "documentation": {}
    },
    {
        "label": "Organisation",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.models",
        "description": "cla_backend.apps.call_centre.models",
        "peekOfCode": "class Organisation(TimeStampedModel):\n    name = models.CharField(max_length=255, unique=True)\n    def __unicode__(self):\n        return self.name\nclass Operator(TimeStampedModel):\n    user = models.OneToOneField(\"auth.User\")\n    organisation = models.ForeignKey(Organisation, null=True, blank=True)\n    is_manager = models.BooleanField(default=False)\n    is_cla_superuser = models.BooleanField(default=False)\n    def __unicode__(self):",
        "detail": "cla_backend.apps.call_centre.models",
        "documentation": {}
    },
    {
        "label": "Operator",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.models",
        "description": "cla_backend.apps.call_centre.models",
        "peekOfCode": "class Operator(TimeStampedModel):\n    user = models.OneToOneField(\"auth.User\")\n    organisation = models.ForeignKey(Organisation, null=True, blank=True)\n    is_manager = models.BooleanField(default=False)\n    is_cla_superuser = models.BooleanField(default=False)\n    def __unicode__(self):\n        return self.user.username\n    @property\n    def is_cla_superuser_or_manager(self):\n        return self.is_manager or self.is_cla_superuser",
        "detail": "cla_backend.apps.call_centre.models",
        "documentation": {}
    },
    {
        "label": "OP_MANAGER_GROUP_NAME",
        "kind": 5,
        "importPath": "cla_backend.apps.call_centre.models",
        "description": "cla_backend.apps.call_centre.models",
        "peekOfCode": "OP_MANAGER_GROUP_NAME = \"Operator Managers\"\nLAA_CASEWORKER_GROUP_NAME = \"LAA Caseworker\"\nCLA_SUPERUSER_GROUP_NAME = \"CLA Superusers\"\nclass Caseworker(TimeStampedModel):\n    user = models.OneToOneField(\"auth.User\")\n    def __unicode__(self):\n        return self.user.username\n    def save(self, *args, **kwargs):\n        obj = super(Caseworker, self).save(*args, **kwargs)\n        group = Group.objects.get(name=LAA_CASEWORKER_GROUP_NAME)",
        "detail": "cla_backend.apps.call_centre.models",
        "documentation": {}
    },
    {
        "label": "LAA_CASEWORKER_GROUP_NAME",
        "kind": 5,
        "importPath": "cla_backend.apps.call_centre.models",
        "description": "cla_backend.apps.call_centre.models",
        "peekOfCode": "LAA_CASEWORKER_GROUP_NAME = \"LAA Caseworker\"\nCLA_SUPERUSER_GROUP_NAME = \"CLA Superusers\"\nclass Caseworker(TimeStampedModel):\n    user = models.OneToOneField(\"auth.User\")\n    def __unicode__(self):\n        return self.user.username\n    def save(self, *args, **kwargs):\n        obj = super(Caseworker, self).save(*args, **kwargs)\n        group = Group.objects.get(name=LAA_CASEWORKER_GROUP_NAME)\n        group.user_set.add(self.user)",
        "detail": "cla_backend.apps.call_centre.models",
        "documentation": {}
    },
    {
        "label": "CLA_SUPERUSER_GROUP_NAME",
        "kind": 5,
        "importPath": "cla_backend.apps.call_centre.models",
        "description": "cla_backend.apps.call_centre.models",
        "peekOfCode": "CLA_SUPERUSER_GROUP_NAME = \"CLA Superusers\"\nclass Caseworker(TimeStampedModel):\n    user = models.OneToOneField(\"auth.User\")\n    def __unicode__(self):\n        return self.user.username\n    def save(self, *args, **kwargs):\n        obj = super(Caseworker, self).save(*args, **kwargs)\n        group = Group.objects.get(name=LAA_CASEWORKER_GROUP_NAME)\n        group.user_set.add(self.user)\n        return obj",
        "detail": "cla_backend.apps.call_centre.models",
        "documentation": {}
    },
    {
        "label": "CallCentreClientIDPermission",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.permissions",
        "description": "cla_backend.apps.call_centre.permissions",
        "peekOfCode": "class CallCentreClientIDPermission(ClientIDPermission):\n    client_name = \"operator\"\nclass OperatorManagerPermission(BasePermission):\n    def has_permission(self, request, view):\n        return request.user.operator.is_manager",
        "detail": "cla_backend.apps.call_centre.permissions",
        "documentation": {}
    },
    {
        "label": "OperatorManagerPermission",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.permissions",
        "description": "cla_backend.apps.call_centre.permissions",
        "peekOfCode": "class OperatorManagerPermission(BasePermission):\n    def has_permission(self, request, view):\n        return request.user.operator.is_manager",
        "detail": "cla_backend.apps.call_centre.permissions",
        "documentation": {}
    },
    {
        "label": "PropertySerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class PropertySerializer(PropertySerializerBase):\n    class Meta(PropertySerializerBase.Meta):\n        fields = (\"value\", \"mortgage_left\", \"share\", \"id\", \"disputed\", \"main\")\nclass IncomeSerializer(IncomeSerializerBase):\n    self_employed = serializers.NullBooleanField(default=None)\n    class Meta(IncomeSerializerBase.Meta):\n        fields = (\n            \"earnings\",\n            \"self_employment_drawings\",\n            \"benefits\",",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "IncomeSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class IncomeSerializer(IncomeSerializerBase):\n    self_employed = serializers.NullBooleanField(default=None)\n    class Meta(IncomeSerializerBase.Meta):\n        fields = (\n            \"earnings\",\n            \"self_employment_drawings\",\n            \"benefits\",\n            \"tax_credits\",\n            \"child_benefits\",\n            \"maintenance_received\",",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "PartnerIncomeSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class PartnerIncomeSerializer(IncomeSerializerBase):\n    \"\"\"\n    Like IncomeSerializer but without 'child_benefits'\n    \"\"\"\n    self_employed = serializers.NullBooleanField(default=None)\n    class Meta(IncomeSerializerBase.Meta):\n        fields = (\n            \"earnings\",\n            \"self_employment_drawings\",\n            \"benefits\",",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "SavingsSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class SavingsSerializer(SavingsSerializerBase):\n    class Meta(SavingsSerializerBase.Meta):\n        fields = (\"bank_balance\", \"investment_balance\", \"asset_balance\", \"credit_balance\", \"total\")\nclass DeductionsSerializer(DeductionsSerializerBase):\n    class Meta(DeductionsSerializerBase.Meta):\n        fields = (\n            \"income_tax\",\n            \"national_insurance\",\n            \"maintenance\",\n            \"childcare\",",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "DeductionsSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class DeductionsSerializer(DeductionsSerializerBase):\n    class Meta(DeductionsSerializerBase.Meta):\n        fields = (\n            \"income_tax\",\n            \"national_insurance\",\n            \"maintenance\",\n            \"childcare\",\n            \"mortgage\",\n            \"rent\",\n            \"criminal_legalaid_contributions\",",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "BarePersonalDetailsSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class BarePersonalDetailsSerializer(PersonalDetailsSerializerFull):\n    class Meta(PersonalDetailsSerializerFull.Meta):\n        fields = (\"reference\", \"full_name\", \"postcode\", \"dob\")\nclass PersonalDetailsSerializer(PersonalDetailsSerializerFull):\n    class Meta(PersonalDetailsSerializerFull.Meta):\n        fields = (\n            \"reference\",\n            \"title\",\n            \"full_name\",\n            \"postcode\",",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "PersonalDetailsSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class PersonalDetailsSerializer(PersonalDetailsSerializerFull):\n    class Meta(PersonalDetailsSerializerFull.Meta):\n        fields = (\n            \"reference\",\n            \"title\",\n            \"full_name\",\n            \"postcode\",\n            \"street\",\n            \"mobile_phone\",\n            \"home_phone\",",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "ThirdPartyPersonalDetailsSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class ThirdPartyPersonalDetailsSerializer(ThirdPartyPersonalDetailsSerializerBase):\n    class Meta(ThirdPartyPersonalDetailsSerializerBase.Meta):\n        fields = (\n            \"reference\",\n            \"title\",\n            \"full_name\",\n            \"postcode\",\n            \"street\",\n            \"mobile_phone\",\n            \"home_phone\",",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "ThirdPartyDetailsSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class ThirdPartyDetailsSerializer(ThirdPartyDetailsSerializerBase):\n    personal_details = ThirdPartyPersonalDetailsSerializer(required=True)\n    class Meta(ThirdPartyDetailsSerializerBase.Meta):\n        fields = (\n            \"reference\",\n            \"personal_details\",\n            \"pass_phrase\",\n            \"reason\",\n            \"personal_relationship\",\n            \"personal_relationship_note\",",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "PersonSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class PersonSerializer(PersonSerializerBase):\n    income = IncomeSerializer(required=False, allow_null=True)\n    savings = SavingsSerializer(required=False, allow_null=True)\n    deductions = DeductionsSerializer(required=False, allow_null=True)\n    class Meta(PersonSerializerBase.Meta):\n        fields = (\"income\", \"savings\", \"deductions\")\nclass PartnerPersonSerializer(PersonSerializer):\n    \"\"\"\n        Like PersonSerializer but without child_benefits\n    \"\"\"",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "PartnerPersonSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class PartnerPersonSerializer(PersonSerializer):\n    \"\"\"\n        Like PersonSerializer but without child_benefits\n    \"\"\"\n    income = PartnerIncomeSerializer(required=False, allow_null=True)\n    class Meta(PersonSerializer.Meta):\n        pass\nclass AdaptationDetailsSerializer(AdaptationDetailsSerializerBase):\n    class Meta(AdaptationDetailsSerializerBase.Meta):\n        fields = (",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "AdaptationDetailsSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class AdaptationDetailsSerializer(AdaptationDetailsSerializerBase):\n    class Meta(AdaptationDetailsSerializerBase.Meta):\n        fields = (\n            \"bsl_webcam\",\n            \"minicom\",\n            \"text_relay\",\n            \"skype_webcam\",\n            \"language\",\n            \"notes\",\n            \"reference\",",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "EODDetailsSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class EODDetailsSerializer(EODDetailsSerializerBase):\n    class Meta(EODDetailsSerializerBase.Meta):\n        fields = (\"categories\", \"notes\", \"reference\")\nclass EligibilityCheckSerializer(EligibilityCheckSerializerBase):\n    property_set = PropertySerializer(many=True, required=False)\n    you = PersonSerializer(required=False, allow_null=True)\n    partner = PartnerPersonSerializer(required=False, allow_null=True)\n    notes = serializers.CharField(max_length=500, required=False, read_only=True)\n    disputed_savings = SavingsSerializer(required=False, allow_null=True)\n    class Meta(EligibilityCheckSerializerBase.Meta):",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "EligibilityCheckSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class EligibilityCheckSerializer(EligibilityCheckSerializerBase):\n    property_set = PropertySerializer(many=True, required=False)\n    you = PersonSerializer(required=False, allow_null=True)\n    partner = PartnerPersonSerializer(required=False, allow_null=True)\n    notes = serializers.CharField(max_length=500, required=False, read_only=True)\n    disputed_savings = SavingsSerializer(required=False, allow_null=True)\n    class Meta(EligibilityCheckSerializerBase.Meta):\n        fields = (\n            \"reference\",\n            \"category\",",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "LogSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class LogSerializer(LogSerializerBase):\n    description = serializers.SerializerMethodField()\n    class Meta(LogSerializerBase.Meta):\n        fields = (\"code\", \"created_by\", \"created\", \"notes\", \"type\", \"level\", \"timer\", \"patch\", \"description\")\n    def get_description(self, log):\n        return event_registry.event_registry.all().get(log.code, {}).get(\"description\", \"\")\nclass CaseSerializer(CaseSerializerFull):\n    provider_notes = serializers.CharField(max_length=10000, required=False, read_only=True)\n    organisation = serializers.PrimaryKeyRelatedField(required=False, read_only=True)\n    organisation_name = serializers.SerializerMethodField()",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "CaseSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class CaseSerializer(CaseSerializerFull):\n    provider_notes = serializers.CharField(max_length=10000, required=False, read_only=True)\n    organisation = serializers.PrimaryKeyRelatedField(required=False, read_only=True)\n    organisation_name = serializers.SerializerMethodField()\n    billable_time = serializers.IntegerField(read_only=True)\n    rejected = serializers.SerializerMethodField(\"is_rejected\")\n    callback_time_string = serializers.ReadOnlyField()\n    complaint_count = serializers.IntegerField(read_only=True)\n    def get_organisation_name(self, case):\n        if not case.organisation:",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "CaseListSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class CaseListSerializer(CaseSerializer):\n    class Meta(CaseSerializer.Meta):\n        fields = (\n            \"reference\",\n            \"created\",\n            \"modified\",\n            \"full_name\",\n            \"laa_reference\",\n            \"eligibility_state\",\n            \"personal_details\",",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "CreateCaseSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class CreateCaseSerializer(CaseSerializer):\n    \"\"\"\n    Case Serializer only used for creation.\n    It allows the API to create a case with optional personal_details reference.\n    No other fields can be used when creating a case atm.\n    \"\"\"\n    personal_details = UUIDSerializer(\n        slug_field=\"reference\", required=False, queryset=PersonalDetails.objects.all(), allow_null=True\n    )\n    class Meta(CaseSerializer.Meta):",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "ProviderSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class ProviderSerializer(ProviderSerializerBase):\n    class Meta(ProviderSerializerBase.Meta):\n        fields = (\"name\", \"id\", \"short_code\", \"telephone_frontdoor\", \"telephone_backdoor\")\nclass OutOfHoursRotaSerializer(OutOfHoursRotaSerializerBase):\n    provider_name = serializers.CharField(read_only=True, source=\"provider.name\")\n    class Meta(OutOfHoursRotaSerializerBase.Meta):\n        fields = (\"id\", \"start_date\", \"end_date\", \"category\", \"provider\", \"provider_name\")\nclass OperatorSerializer(ExtendedUserSerializerBase):\n    is_cla_superuser = serializers.BooleanField(read_only=True)\n    class Meta(object):",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "OutOfHoursRotaSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class OutOfHoursRotaSerializer(OutOfHoursRotaSerializerBase):\n    provider_name = serializers.CharField(read_only=True, source=\"provider.name\")\n    class Meta(OutOfHoursRotaSerializerBase.Meta):\n        fields = (\"id\", \"start_date\", \"end_date\", \"category\", \"provider\", \"provider_name\")\nclass OperatorSerializer(ExtendedUserSerializerBase):\n    is_cla_superuser = serializers.BooleanField(read_only=True)\n    class Meta(object):\n        model = Operator\n        fields = (\n            \"username\",",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "OperatorSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class OperatorSerializer(ExtendedUserSerializerBase):\n    is_cla_superuser = serializers.BooleanField(read_only=True)\n    class Meta(object):\n        model = Operator\n        fields = (\n            \"username\",\n            \"first_name\",\n            \"last_name\",\n            \"email\",\n            \"is_manager\",",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "FeedbackSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class FeedbackSerializer(FeedbackSerializerBase):\n    justified = serializers.BooleanField(required=False)\n    resolved = serializers.BooleanField(required=False)\n    issue = serializers.ChoiceField(choices=FEEDBACK_ISSUE, read_only=True)\n    class Meta(FeedbackSerializerBase.Meta):\n        fields = (\n            \"reference\",\n            \"created_by\",\n            \"case\",\n            \"comment\",",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "CaseArchivedSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class CaseArchivedSerializer(CaseArchivedSerializerBase):\n    class Meta(CaseArchivedSerializerBase.Meta):\n        fields = (\n            \"full_name\",\n            \"date_of_birth\",\n            \"postcode\",\n            \"laa_reference\",\n            \"specialist_referred_to\",\n            \"date_specialist_referred\",\n            \"date_specialist_closed\",",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "CaseNotesHistorySerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class CaseNotesHistorySerializer(CaseNotesHistorySerializerBase):\n    class Meta(CaseNotesHistorySerializerBase.Meta):\n        fields = (\"created_by\", \"created\", \"operator_notes\", \"provider_notes\", \"type_notes\")\nclass CSVUploadSerializer(CSVUploadSerializerBase):\n    class Meta(CSVUploadSerializerBase.Meta):\n        fields = [\"id\", \"provider\", \"created_by\", \"comment\", \"rows\", \"month\", \"created\", \"modified\"]\nclass CSVUploadDetailSerializer(CSVUploadSerializerBase):\n    class Meta(CSVUploadSerializerBase.Meta):\n        fields = [\"id\", \"provider\", \"created_by\", \"comment\", \"body\", \"month\", \"created\", \"modified\"]",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "CSVUploadSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class CSVUploadSerializer(CSVUploadSerializerBase):\n    class Meta(CSVUploadSerializerBase.Meta):\n        fields = [\"id\", \"provider\", \"created_by\", \"comment\", \"rows\", \"month\", \"created\", \"modified\"]\nclass CSVUploadDetailSerializer(CSVUploadSerializerBase):\n    class Meta(CSVUploadSerializerBase.Meta):\n        fields = [\"id\", \"provider\", \"created_by\", \"comment\", \"body\", \"month\", \"created\", \"modified\"]",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "CSVUploadDetailSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.serializers",
        "description": "cla_backend.apps.call_centre.serializers",
        "peekOfCode": "class CSVUploadDetailSerializer(CSVUploadSerializerBase):\n    class Meta(CSVUploadSerializerBase.Meta):\n        fields = [\"id\", \"provider\", \"created_by\", \"comment\", \"body\", \"month\", \"created\", \"modified\"]",
        "detail": "cla_backend.apps.call_centre.serializers",
        "documentation": {}
    },
    {
        "label": "log_operator_created",
        "kind": 2,
        "importPath": "cla_backend.apps.call_centre.signals",
        "description": "cla_backend.apps.call_centre.signals",
        "peekOfCode": "def log_operator_created(sender, instance, created, **kwargs):\n    if created:\n        log_operator_action(\"added\", instance)\ndef log_operator_modified(sender, instance, **kwargs):\n    try:\n        sender.objects.get(pk=instance.pk)\n    except sender.DoesNotExist:\n        return\n    log_operator_action(\"modified\", instance)\ndef log_operator_action(action, instance):",
        "detail": "cla_backend.apps.call_centre.signals",
        "documentation": {}
    },
    {
        "label": "log_operator_modified",
        "kind": 2,
        "importPath": "cla_backend.apps.call_centre.signals",
        "description": "cla_backend.apps.call_centre.signals",
        "peekOfCode": "def log_operator_modified(sender, instance, **kwargs):\n    try:\n        sender.objects.get(pk=instance.pk)\n    except sender.DoesNotExist:\n        return\n    log_operator_action(\"modified\", instance)\ndef log_operator_action(action, instance):\n    logger.info(\n        \"Operator user {}\".format(action),\n        extra={",
        "detail": "cla_backend.apps.call_centre.signals",
        "documentation": {}
    },
    {
        "label": "log_operator_action",
        "kind": 2,
        "importPath": "cla_backend.apps.call_centre.signals",
        "description": "cla_backend.apps.call_centre.signals",
        "peekOfCode": "def log_operator_action(action, instance):\n    logger.info(\n        \"Operator user {}\".format(action),\n        extra={\n            \"USERNAME\": instance.user.username,\n            \"IS_MANAGER\": unicode(instance.is_manager),\n            \"IS_CLA_SUPERUSER\": unicode(instance.is_cla_superuser),\n        },\n    )\n    email = GovUkNotify()",
        "detail": "cla_backend.apps.call_centre.signals",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "cla_backend.apps.call_centre.signals",
        "description": "cla_backend.apps.call_centre.signals",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef log_operator_created(sender, instance, created, **kwargs):\n    if created:\n        log_operator_action(\"added\", instance)\ndef log_operator_modified(sender, instance, **kwargs):\n    try:\n        sender.objects.get(pk=instance.pk)\n    except sender.DoesNotExist:\n        return\n    log_operator_action(\"modified\", instance)",
        "detail": "cla_backend.apps.call_centre.signals",
        "documentation": {}
    },
    {
        "label": "OBIEERateThrottle",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.throttling",
        "description": "cla_backend.apps.call_centre.throttling",
        "peekOfCode": "class OBIEERateThrottle(UserRateThrottle):\n    rate = \"20/day\"",
        "detail": "cla_backend.apps.call_centre.throttling",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "cla_backend.apps.call_centre.urls",
        "description": "cla_backend.apps.call_centre.urls",
        "peekOfCode": "router = routers.DefaultRouter()\nadv_router = AdvancedSimpleRouter()\nrouter.register(r\"category\", views.CategoryViewSet)\nrouter.register(r\"provider/rota\", views.OutOfHoursRotaViewSet)\nrouter.register(r\"provider\", views.ProviderViewSet)\nadv_router.register(r\"case\", views.CaseViewSet)\nrouter.register(r\"user\", views.UserViewSet, base_name=\"user\")\nrouter.register(r\"event\", views.EventViewSet, base_name=\"event\")\nrouter.register(r\"knowledgebase/article\", views.ArticleViewSet)\nrouter.register(r\"knowledgebase/category\", views.ArticleCategoryViewSet)",
        "detail": "cla_backend.apps.call_centre.urls",
        "documentation": {}
    },
    {
        "label": "adv_router",
        "kind": 5,
        "importPath": "cla_backend.apps.call_centre.urls",
        "description": "cla_backend.apps.call_centre.urls",
        "peekOfCode": "adv_router = AdvancedSimpleRouter()\nrouter.register(r\"category\", views.CategoryViewSet)\nrouter.register(r\"provider/rota\", views.OutOfHoursRotaViewSet)\nrouter.register(r\"provider\", views.ProviderViewSet)\nadv_router.register(r\"case\", views.CaseViewSet)\nrouter.register(r\"user\", views.UserViewSet, base_name=\"user\")\nrouter.register(r\"event\", views.EventViewSet, base_name=\"event\")\nrouter.register(r\"knowledgebase/article\", views.ArticleViewSet)\nrouter.register(r\"knowledgebase/category\", views.ArticleCategoryViewSet)\nrouter.register(r\"guidance/note\", views.GuidanceNoteViewSet, base_name=\"guidance_note\")",
        "detail": "cla_backend.apps.call_centre.urls",
        "documentation": {}
    },
    {
        "label": "timer_router",
        "kind": 5,
        "importPath": "cla_backend.apps.call_centre.urls",
        "description": "cla_backend.apps.call_centre.urls",
        "peekOfCode": "timer_router = core_routers.SingletonRouter()\ntimer_router.register(r\"timer\", views.TimerViewSet, base_name=\"timer\")\ncase_one2one_router = NestedCLARouter(adv_router, \"case\", lookup=\"case\")\ncase_one2one_router.register(r\"eligibility_check\", views.EligibilityCheckViewSet, base_name=\"eligibility_check\")\ncase_one2one_router.register(r\"personal_details\", views.PersonalDetailsViewSet)\ncase_one2one_router.register(r\"adaptation_details\", views.AdaptationDetailsViewSet)\ncase_one2one_router.register(r\"eod_details\", views.EODDetailsViewSet)\ncase_one2one_router.register(r\"thirdparty_details\", views.ThirdPartyDetailsViewSet)\ncase_one2one_router.register(r\"diagnosis\", views.DiagnosisViewSet, base_name=\"diagnosis\")\ncase_one2many_router = NestedSimpleRouter(adv_router, r\"case\", lookup=\"case\")",
        "detail": "cla_backend.apps.call_centre.urls",
        "documentation": {}
    },
    {
        "label": "case_one2one_router",
        "kind": 5,
        "importPath": "cla_backend.apps.call_centre.urls",
        "description": "cla_backend.apps.call_centre.urls",
        "peekOfCode": "case_one2one_router = NestedCLARouter(adv_router, \"case\", lookup=\"case\")\ncase_one2one_router.register(r\"eligibility_check\", views.EligibilityCheckViewSet, base_name=\"eligibility_check\")\ncase_one2one_router.register(r\"personal_details\", views.PersonalDetailsViewSet)\ncase_one2one_router.register(r\"adaptation_details\", views.AdaptationDetailsViewSet)\ncase_one2one_router.register(r\"eod_details\", views.EODDetailsViewSet)\ncase_one2one_router.register(r\"thirdparty_details\", views.ThirdPartyDetailsViewSet)\ncase_one2one_router.register(r\"diagnosis\", views.DiagnosisViewSet, base_name=\"diagnosis\")\ncase_one2many_router = NestedSimpleRouter(adv_router, r\"case\", lookup=\"case\")\ncase_one2many_router.register(r\"logs\", views.LogViewSet)\ncase_one2many_router.register(r\"notes_history\", views.CaseNotesHistoryViewSet)",
        "detail": "cla_backend.apps.call_centre.urls",
        "documentation": {}
    },
    {
        "label": "case_one2many_router",
        "kind": 5,
        "importPath": "cla_backend.apps.call_centre.urls",
        "description": "cla_backend.apps.call_centre.urls",
        "peekOfCode": "case_one2many_router = NestedSimpleRouter(adv_router, r\"case\", lookup=\"case\")\ncase_one2many_router.register(r\"logs\", views.LogViewSet)\ncase_one2many_router.register(r\"notes_history\", views.CaseNotesHistoryViewSet)\ncomplaint_one2many_router = NestedSimpleRouter(adv_router, r\"complaints/complaint\", lookup=\"complaint\")\ncomplaint_one2many_router.register(r\"logs\", views.ComplaintLogViewset)\nurlpatterns = patterns(\n    \"\",\n    url(r\"^complaints/constants/?$\", views.ComplaintConstantsView.as_view()),\n    url(r\"^\", include(complaint_one2many_router.urls)),\n    url(r\"^\", include(case_one2one_router.urls)),",
        "detail": "cla_backend.apps.call_centre.urls",
        "documentation": {}
    },
    {
        "label": "complaint_one2many_router",
        "kind": 5,
        "importPath": "cla_backend.apps.call_centre.urls",
        "description": "cla_backend.apps.call_centre.urls",
        "peekOfCode": "complaint_one2many_router = NestedSimpleRouter(adv_router, r\"complaints/complaint\", lookup=\"complaint\")\ncomplaint_one2many_router.register(r\"logs\", views.ComplaintLogViewset)\nurlpatterns = patterns(\n    \"\",\n    url(r\"^complaints/constants/?$\", views.ComplaintConstantsView.as_view()),\n    url(r\"^\", include(complaint_one2many_router.urls)),\n    url(r\"^\", include(case_one2one_router.urls)),\n    url(r\"^\", include(case_one2many_router.urls)),\n    url(r\"^\", include(adv_router.urls)),\n    url(r\"^\", include(router.urls)),",
        "detail": "cla_backend.apps.call_centre.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "cla_backend.apps.call_centre.urls",
        "description": "cla_backend.apps.call_centre.urls",
        "peekOfCode": "urlpatterns = patterns(\n    \"\",\n    url(r\"^complaints/constants/?$\", views.ComplaintConstantsView.as_view()),\n    url(r\"^\", include(complaint_one2many_router.urls)),\n    url(r\"^\", include(case_one2one_router.urls)),\n    url(r\"^\", include(case_one2many_router.urls)),\n    url(r\"^\", include(adv_router.urls)),\n    url(r\"^\", include(router.urls)),\n    url(r\"^\", include(timer_router.urls)),\n)",
        "detail": "cla_backend.apps.call_centre.urls",
        "documentation": {}
    },
    {
        "label": "CallCentrePermissionsViewSetMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class CallCentrePermissionsViewSetMixin(object):\n    permission_classes = (CallCentreClientIDPermission,)\nclass CallCentreManagerPermissionsViewSetMixin(object):\n    permission_classes = (CallCentreClientIDPermission, OperatorManagerPermission)\nclass CategoryViewSet(CallCentrePermissionsViewSetMixin, BaseCategoryViewSet):\n    pass\nclass EligibilityCheckViewSet(\n    CallCentrePermissionsViewSetMixin,\n    ClaCreateModelMixin,\n    ClaUpdateModelMixin,",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "CallCentreManagerPermissionsViewSetMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class CallCentreManagerPermissionsViewSetMixin(object):\n    permission_classes = (CallCentreClientIDPermission, OperatorManagerPermission)\nclass CategoryViewSet(CallCentrePermissionsViewSetMixin, BaseCategoryViewSet):\n    pass\nclass EligibilityCheckViewSet(\n    CallCentrePermissionsViewSetMixin,\n    ClaCreateModelMixin,\n    ClaUpdateModelMixin,\n    mixins.RetrieveModelMixin,\n    BaseNestedEligibilityCheckViewSet,",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "CategoryViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class CategoryViewSet(CallCentrePermissionsViewSetMixin, BaseCategoryViewSet):\n    pass\nclass EligibilityCheckViewSet(\n    CallCentrePermissionsViewSetMixin,\n    ClaCreateModelMixin,\n    ClaUpdateModelMixin,\n    mixins.RetrieveModelMixin,\n    BaseNestedEligibilityCheckViewSet,\n):\n    serializer_class = EligibilityCheckSerializer",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "EligibilityCheckViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class EligibilityCheckViewSet(\n    CallCentrePermissionsViewSetMixin,\n    ClaCreateModelMixin,\n    ClaUpdateModelMixin,\n    mixins.RetrieveModelMixin,\n    BaseNestedEligibilityCheckViewSet,\n):\n    serializer_class = EligibilityCheckSerializer\n    # this is to fix a stupid thing in DRF where pre_save doesn't call super\n    def perform_create(self, serializer):",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "MatterTypeViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class MatterTypeViewSet(CallCentrePermissionsViewSetMixin, BaseMatterTypeViewSet):\n    pass\nclass MediaCodeViewSet(CallCentrePermissionsViewSetMixin, BaseMediaCodeViewSet):\n    pass\nclass ContactResearchMethodViewSet(CallCentrePermissionsViewSetMixin, BaseContactResearchMethodViewSet):\n    pass\nclass DateRangeFilter(BaseFilterBackend):\n    def filter_queryset(self, request, qs, view):\n        filter = {}\n        start_date = request.query_params.get(\"start\", None)",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "MediaCodeViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class MediaCodeViewSet(CallCentrePermissionsViewSetMixin, BaseMediaCodeViewSet):\n    pass\nclass ContactResearchMethodViewSet(CallCentrePermissionsViewSetMixin, BaseContactResearchMethodViewSet):\n    pass\nclass DateRangeFilter(BaseFilterBackend):\n    def filter_queryset(self, request, qs, view):\n        filter = {}\n        start_date = request.query_params.get(\"start\", None)\n        end_date = request.query_params.get(\"end\", None)\n        if start_date is not None:",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "ContactResearchMethodViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class ContactResearchMethodViewSet(CallCentrePermissionsViewSetMixin, BaseContactResearchMethodViewSet):\n    pass\nclass DateRangeFilter(BaseFilterBackend):\n    def filter_queryset(self, request, qs, view):\n        filter = {}\n        start_date = request.query_params.get(\"start\", None)\n        end_date = request.query_params.get(\"end\", None)\n        if start_date is not None:\n            filter[\"{field}__gte\".format(field=view.date_range_field)] = parser.parse(start_date).replace(\n                tzinfo=timezone.get_current_timezone()",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "DateRangeFilter",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class DateRangeFilter(BaseFilterBackend):\n    def filter_queryset(self, request, qs, view):\n        filter = {}\n        start_date = request.query_params.get(\"start\", None)\n        end_date = request.query_params.get(\"end\", None)\n        if start_date is not None:\n            filter[\"{field}__gte\".format(field=view.date_range_field)] = parser.parse(start_date).replace(\n                tzinfo=timezone.get_current_timezone()\n            )\n        if end_date is not None:",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "CaseViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class CaseViewSet(\n    CallCentrePermissionsViewSetMixin,\n    ClaCreateModelMixin,\n    BaseCaseLogMixin,\n    CaseOrganisationAssignCurrentOrganisationMixin,\n    FullCaseViewSet,\n):\n    serializer_class = CaseListSerializer\n    # using CreateCaseSerializer during creation\n    serializer_detail_class = CaseSerializer",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "ProviderViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class ProviderViewSet(CallCentrePermissionsViewSetMixin, viewsets.ReadOnlyModelViewSet):\n    model = Provider\n    serializer_class = ProviderSerializer\n    queryset = Provider.objects.active()\n    filter_backends = (DjangoFilterBackend,)\n    filter_fields = (\"law_category__code\",)\nclass OutOfHoursRotaViewSet(\n    CallCentreManagerPermissionsViewSetMixin,\n    ClaCreateModelMixin,\n    ClaUpdateModelMixin,",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "OutOfHoursRotaViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class OutOfHoursRotaViewSet(\n    CallCentreManagerPermissionsViewSetMixin,\n    ClaCreateModelMixin,\n    ClaUpdateModelMixin,\n    mixins.RetrieveModelMixin,\n    mixins.DestroyModelMixin,\n    mixins.ListModelMixin,\n    CompatGenericViewSet,\n):\n    model = OutOfHoursRota",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class UserViewSet(CallCentrePermissionsViewSetMixin, BaseUserViewSet):\n    model = Operator\n    queryset = Operator.objects.all()\n    permission_classes = (CallCentreClientIDPermission, IsManagerOrMePermission)\n    serializer_class = OperatorSerializer\n    filter_backends = (DjangoFilterBackend,)\n    filter_fields = (\"is_manager\",)\n    def get_queryset(self):\n        qs = super(BaseUserViewSet, self).get_queryset()\n        operator = self.get_logged_in_user_model()",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "PersonalDetailsViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class PersonalDetailsViewSet(\n    CallCentrePermissionsViewSetMixin,\n    FormActionMixin,\n    CaseOrganisationAssignCurrentOrganisationMixin,\n    FullPersonalDetailsViewSet,\n):\n    serializer_class = PersonalDetailsSerializer\n    @detail_route(methods=[\"post\"])\n    def set_diversity(self, request, reference=None, **kwargs):\n        return self._form_action(request, DiversityForm)",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "ThirdPartyDetailsViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class ThirdPartyDetailsViewSet(\n    CallCentrePermissionsViewSetMixin, CaseOrganisationAssignCurrentOrganisationMixin, BaseThirdPartyDetailsViewSet\n):\n    serializer_class = ThirdPartyDetailsSerializer\nclass AdaptationDetailsViewSet(\n    CallCentrePermissionsViewSetMixin, CaseOrganisationAssignCurrentOrganisationMixin, BaseAdaptationDetailsViewSet\n):\n    serializer_class = AdaptationDetailsSerializer\nclass AdaptationDetailsMetadataViewSet(CallCentrePermissionsViewSetMixin, BaseAdaptationDetailsMetadataViewSet):\n    serializer_class = AdaptationDetailsSerializer",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "AdaptationDetailsViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class AdaptationDetailsViewSet(\n    CallCentrePermissionsViewSetMixin, CaseOrganisationAssignCurrentOrganisationMixin, BaseAdaptationDetailsViewSet\n):\n    serializer_class = AdaptationDetailsSerializer\nclass AdaptationDetailsMetadataViewSet(CallCentrePermissionsViewSetMixin, BaseAdaptationDetailsMetadataViewSet):\n    serializer_class = AdaptationDetailsSerializer\nclass EODDetailsViewSet(\n    CallCentrePermissionsViewSetMixin, CaseOrganisationAssignCurrentOrganisationMixin, BaseEODDetailsViewSet\n):\n    serializer_class = EODDetailsSerializer",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "AdaptationDetailsMetadataViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class AdaptationDetailsMetadataViewSet(CallCentrePermissionsViewSetMixin, BaseAdaptationDetailsMetadataViewSet):\n    serializer_class = AdaptationDetailsSerializer\nclass EODDetailsViewSet(\n    CallCentrePermissionsViewSetMixin, CaseOrganisationAssignCurrentOrganisationMixin, BaseEODDetailsViewSet\n):\n    serializer_class = EODDetailsSerializer\nclass EventViewSet(CallCentrePermissionsViewSetMixin, BaseEventViewSet):\n    pass\nclass ArticleViewSet(CallCentrePermissionsViewSetMixin, BaseArticleViewSet):\n    pass",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "EODDetailsViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class EODDetailsViewSet(\n    CallCentrePermissionsViewSetMixin, CaseOrganisationAssignCurrentOrganisationMixin, BaseEODDetailsViewSet\n):\n    serializer_class = EODDetailsSerializer\nclass EventViewSet(CallCentrePermissionsViewSetMixin, BaseEventViewSet):\n    pass\nclass ArticleViewSet(CallCentrePermissionsViewSetMixin, BaseArticleViewSet):\n    pass\nclass ArticleCategoryViewSet(CallCentrePermissionsViewSetMixin, BaseArticleCategoryViewSet):\n    pass",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "EventViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class EventViewSet(CallCentrePermissionsViewSetMixin, BaseEventViewSet):\n    pass\nclass ArticleViewSet(CallCentrePermissionsViewSetMixin, BaseArticleViewSet):\n    pass\nclass ArticleCategoryViewSet(CallCentrePermissionsViewSetMixin, BaseArticleCategoryViewSet):\n    pass\nclass TimerViewSet(CallCentrePermissionsViewSetMixin, BaseTimerViewSet):\n    pass\nclass DiagnosisViewSet(\n    CallCentrePermissionsViewSetMixin, CaseOrganisationAssignCurrentOrganisationMixin, BaseDiagnosisViewSet",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "ArticleViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class ArticleViewSet(CallCentrePermissionsViewSetMixin, BaseArticleViewSet):\n    pass\nclass ArticleCategoryViewSet(CallCentrePermissionsViewSetMixin, BaseArticleCategoryViewSet):\n    pass\nclass TimerViewSet(CallCentrePermissionsViewSetMixin, BaseTimerViewSet):\n    pass\nclass DiagnosisViewSet(\n    CallCentrePermissionsViewSetMixin, CaseOrganisationAssignCurrentOrganisationMixin, BaseDiagnosisViewSet\n):\n    pass",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "ArticleCategoryViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class ArticleCategoryViewSet(CallCentrePermissionsViewSetMixin, BaseArticleCategoryViewSet):\n    pass\nclass TimerViewSet(CallCentrePermissionsViewSetMixin, BaseTimerViewSet):\n    pass\nclass DiagnosisViewSet(\n    CallCentrePermissionsViewSetMixin, CaseOrganisationAssignCurrentOrganisationMixin, BaseDiagnosisViewSet\n):\n    pass\nclass LogViewSet(CallCentrePermissionsViewSetMixin, BaseLogViewSet):\n    serializer_class = LogSerializer",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "TimerViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class TimerViewSet(CallCentrePermissionsViewSetMixin, BaseTimerViewSet):\n    pass\nclass DiagnosisViewSet(\n    CallCentrePermissionsViewSetMixin, CaseOrganisationAssignCurrentOrganisationMixin, BaseDiagnosisViewSet\n):\n    pass\nclass LogViewSet(CallCentrePermissionsViewSetMixin, BaseLogViewSet):\n    serializer_class = LogSerializer\nclass FeedbackViewSet(\n    CallCentreManagerPermissionsViewSetMixin,",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "DiagnosisViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class DiagnosisViewSet(\n    CallCentrePermissionsViewSetMixin, CaseOrganisationAssignCurrentOrganisationMixin, BaseDiagnosisViewSet\n):\n    pass\nclass LogViewSet(CallCentrePermissionsViewSetMixin, BaseLogViewSet):\n    serializer_class = LogSerializer\nclass FeedbackViewSet(\n    CallCentreManagerPermissionsViewSetMixin,\n    mixins.ListModelMixin,\n    ClaUpdateModelMixin,",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "LogViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class LogViewSet(CallCentrePermissionsViewSetMixin, BaseLogViewSet):\n    serializer_class = LogSerializer\nclass FeedbackViewSet(\n    CallCentreManagerPermissionsViewSetMixin,\n    mixins.ListModelMixin,\n    ClaUpdateModelMixin,\n    mixins.RetrieveModelMixin,\n    CompatGenericViewSet,\n):\n    model = Feedback",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "FeedbackViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class FeedbackViewSet(\n    CallCentreManagerPermissionsViewSetMixin,\n    mixins.ListModelMixin,\n    ClaUpdateModelMixin,\n    mixins.RetrieveModelMixin,\n    CompatGenericViewSet,\n):\n    model = Feedback\n    lookup_field = \"reference\"\n    serializer_class = FeedbackSerializer",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "CaseArchivedSearchFilter",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class CaseArchivedSearchFilter(SearchFilter):\n    def get_search_terms(self, request):\n        terms = super(CaseArchivedSearchFilter, self).get_search_terms(request)\n        return [term.upper() for term in terms]\n    def construct_search(self, field_name):\n        return \"%s__contains\" % field_name\nclass CaseArchivedViewSet(\n    CallCentrePermissionsViewSetMixin, mixins.ListModelMixin, mixins.RetrieveModelMixin, CompatGenericViewSet\n):\n    lookup_field = \"laa_reference\"",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "CaseArchivedViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class CaseArchivedViewSet(\n    CallCentrePermissionsViewSetMixin, mixins.ListModelMixin, mixins.RetrieveModelMixin, CompatGenericViewSet\n):\n    lookup_field = \"laa_reference\"\n    model = CaseArchived\n    queryset = CaseArchived.objects.all()\n    serializer_class = CaseArchivedSerializer\n    search_fields = [\"search_field\"]\n    filter_backends = (CaseArchivedSearchFilter,)\n    pagination_class = StandardResultsSetPagination",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "CaseNotesHistoryViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class CaseNotesHistoryViewSet(CallCentrePermissionsViewSetMixin, BaseCaseNotesHistoryViewSet):\n    serializer_class = CaseNotesHistorySerializer\nclass CSVUploadViewSet(CallCentreManagerPermissionsViewSetMixin, BaseCSVUploadReadOnlyViewSet):\n    serializer_class = CSVUploadSerializer\n    serializer_detail_class = CSVUploadDetailSerializer\n    filter_backends = (DjangoFilterBackend, OrderingFilter)\n    ordering = (\"-month\",)\n    filter_fields = (\"month\", \"provider_id\")\n    pagination_class = StandardResultsSetPagination\n    def get_queryset(self, *args, **kwargs):",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "CSVUploadViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class CSVUploadViewSet(CallCentreManagerPermissionsViewSetMixin, BaseCSVUploadReadOnlyViewSet):\n    serializer_class = CSVUploadSerializer\n    serializer_detail_class = CSVUploadDetailSerializer\n    filter_backends = (DjangoFilterBackend, OrderingFilter)\n    ordering = (\"-month\",)\n    filter_fields = (\"month\", \"provider_id\")\n    pagination_class = StandardResultsSetPagination\n    def get_queryset(self, *args, **kwargs):\n        # only return last 18 months worth\n        after = (timezone.now() - relativedelta(months=18)).date().replace(day=1)",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "GuidanceNoteViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class GuidanceNoteViewSet(CallCentrePermissionsViewSetMixin, BaseGuidanceNoteViewSet):\n    pass\nclass NotificationViewSet(CallCentrePermissionsViewSetMixin, BaseNotificationViewSet):\n    pass\nclass ComplaintSearchFilter(SearchFilter):\n    # LGA-2568 addition of select DISTINCT from DRF 3.0.5 onwards - see release-notes introduced because of this bug\n    # https://github.com/encode/django-rest-framework/pull/2535\n    # Later versions of DRF change this functionality so will need updating\n    def filter_queryset(self, request, queryset, view):\n        search_fields = getattr(view, 'search_fields', None)",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "NotificationViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class NotificationViewSet(CallCentrePermissionsViewSetMixin, BaseNotificationViewSet):\n    pass\nclass ComplaintSearchFilter(SearchFilter):\n    # LGA-2568 addition of select DISTINCT from DRF 3.0.5 onwards - see release-notes introduced because of this bug\n    # https://github.com/encode/django-rest-framework/pull/2535\n    # Later versions of DRF change this functionality so will need updating\n    def filter_queryset(self, request, queryset, view):\n        search_fields = getattr(view, 'search_fields', None)\n        search_terms = self.get_search_terms(request)\n        if not search_fields or not search_terms:",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "ComplaintSearchFilter",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class ComplaintSearchFilter(SearchFilter):\n    # LGA-2568 addition of select DISTINCT from DRF 3.0.5 onwards - see release-notes introduced because of this bug\n    # https://github.com/encode/django-rest-framework/pull/2535\n    # Later versions of DRF change this functionality so will need updating\n    def filter_queryset(self, request, queryset, view):\n        search_fields = getattr(view, 'search_fields', None)\n        search_terms = self.get_search_terms(request)\n        if not search_fields or not search_terms:\n            return queryset\n        orm_lookups = [",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "ComplaintViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class ComplaintViewSet(\n    CallCentrePermissionsViewSetMixin, CaseOrganisationAssignCurrentOrganisationMixin, BaseComplaintViewSet\n):\n    filter_backends = (DjangoFilterBackend, OrderingFilter, ComplaintSearchFilter)\n    filter_fields = (\"justified\", \"level\", \"category\", \"owner\", \"created_by\")\n    search_fields = (\n        \"eod__case__personal_details__full_name\",\n        \"eod__case__personal_details__postcode\",\n        \"eod__case__personal_details__street\",\n        \"eod__case__personal_details__search_field\",",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "ComplaintCategoryViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class ComplaintCategoryViewSet(CallCentrePermissionsViewSetMixin, BaseComplaintCategoryViewSet):\n    pass\nclass ComplaintConstantsView(CallCentrePermissionsViewSetMixin, BaseComplaintConstantsView):\n    pass\nclass ComplaintLogViewset(CallCentrePermissionsViewSetMixin, BaseComplaintLogViewset):\n    pass",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "ComplaintConstantsView",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class ComplaintConstantsView(CallCentrePermissionsViewSetMixin, BaseComplaintConstantsView):\n    pass\nclass ComplaintLogViewset(CallCentrePermissionsViewSetMixin, BaseComplaintLogViewset):\n    pass",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "ComplaintLogViewset",
        "kind": 6,
        "importPath": "cla_backend.apps.call_centre.views",
        "description": "cla_backend.apps.call_centre.views",
        "peekOfCode": "class ComplaintLogViewset(CallCentrePermissionsViewSetMixin, BaseComplaintLogViewset):\n    pass",
        "detail": "cla_backend.apps.call_centre.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.migrations.0001_initial",
        "description": "cla_backend.apps.checker.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0003_eod_details\")]\n    operations = [\n        migrations.CreateModel(\n            name=\"ReasonForContacting\",\n            fields=[\n                (\"id\", models.AutoField(verbose_name=\"ID\", serialize=False, auto_created=True, primary_key=True)),\n                (\n                    \"created\",\n                    model_utils.fields.AutoCreatedField(",
        "detail": "cla_backend.apps.checker.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "BaseCaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.tests.api.test_case_api",
        "description": "cla_backend.apps.checker.tests.api.test_case_api",
        "peekOfCode": "class BaseCaseTestCase(\n    MockGovNotifyMailBox,\n    CLACheckerAuthBaseApiTestMixin,\n    CallCentreFixedOperatingHours,\n    SimpleResourceAPIMixin,\n    APITestCase,\n):\n    LOOKUP_KEY = \"reference\"\n    API_URL_BASE_NAME = \"case\"\n    RESOURCE_RECIPE = \"legalaid.case\"",
        "detail": "cla_backend.apps.checker.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "CaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.tests.api.test_case_api",
        "description": "cla_backend.apps.checker.tests.api.test_case_api",
        "peekOfCode": "class CaseTestCase(BaseCaseTestCase):\n    def test_methods_not_allowed(self):\n        \"\"\"\n        Ensure that we can't POST, PUT or DELETE\n        \"\"\"\n        # LIST\n        self._test_delete_not_allowed(self.list_url)\n    # CREATE\n    def test_create_no_data(self):\n        \"\"\"",
        "detail": "cla_backend.apps.checker.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "AdaptationCaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.tests.api.test_case_api",
        "description": "cla_backend.apps.checker.tests.api.test_case_api",
        "peekOfCode": "class AdaptationCaseTestCase(BaseCaseTestCase):\n    def set_case_data(self, language, eligibility_check=None):\n        if eligibility_check is None:\n            eligibility_check = make_recipe(\"legalaid.eligibility_check\")\n        # for checker, language is not always passed so have option of no language key at all\n        data = {\n            \"eligibility_check\": unicode(eligibility_check.reference),\n            \"personal_details\": self.get_personal_details_default_post_data(),\n            \"adaptation_details\": {\"text_relay\": False, \"notes\": \"\", \"bsl_webcam\": False, \"minicom\": False},\n        }",
        "detail": "cla_backend.apps.checker.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "CallMeBackCaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.tests.api.test_case_api",
        "description": "cla_backend.apps.checker.tests.api.test_case_api",
        "peekOfCode": "class CallMeBackCaseTestCase(BaseCaseTestCase):\n    @property\n    def _default_dt(self):\n        if not hasattr(self, \"__default_dt\"):\n            self.__default_dt = datetime.datetime(2015, 3, 30, 10, 0, 0, 0).replace(tzinfo=timezone.utc)\n        return self.__default_dt\n    def test_create_with_callmeback(self):\n        self.assertEquals(len(self.mailbox), 0)\n        check = make_recipe(\"legalaid.eligibility_check\")\n        data = {",
        "detail": "cla_backend.apps.checker.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "CategoryTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.tests.api.test_category_api",
        "description": "cla_backend.apps.checker.tests.api.test_category_api",
        "peekOfCode": "class CategoryTestCase(CLACheckerAuthBaseApiTestMixin, CategoryAPIMixin, APITestCase):\n    pass",
        "detail": "cla_backend.apps.checker.tests.api.test_category_api",
        "documentation": {}
    },
    {
        "label": "DiagnosisAPITestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.tests.api.test_diagnosis_api",
        "description": "cla_backend.apps.checker.tests.api.test_diagnosis_api",
        "peekOfCode": "class DiagnosisAPITestCase(CLACheckerAuthBaseApiTestMixin, SimpleResourceAPIMixin, APITestCase):\n    LOOKUP_KEY = \"reference\"\n    API_URL_BASE_NAME = \"diagnosis\"\n    RESOURCE_RECIPE = \"checker.diagnosis\"\n    def make_resource(self):\n        return None\n    def setUp(self):\n        super(DiagnosisAPITestCase, self).setUp()\n        call_command(\"loaddata\", \"initial_category\")\n        call_command(\"loaddata\", \"initial_mattertype\")",
        "detail": "cla_backend.apps.checker.tests.api.test_diagnosis_api",
        "documentation": {}
    },
    {
        "label": "EligibilityCheckTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.tests.api.test_eligibility_check_api",
        "description": "cla_backend.apps.checker.tests.api.test_eligibility_check_api",
        "peekOfCode": "class EligibilityCheckTestCase(EligibilityCheckAPIMixin, CLACheckerAuthBaseApiTestMixin, APITestCase):\n    def test_can_change_notes(self):\n        data = {\"notes\": \"new notes\", \"your_problem_notes\": \"ipsum lorem2\"}\n        response = self.client.patch(\n            self.detail_url, data=data, format=\"json\", HTTP_AUTHORIZATION=self.get_http_authorization()\n        )\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        # checking the changed properties\n        self.resource.your_problem_notes = data[\"your_problem_notes\"]\n        self.resource.notes = data[\"notes\"]",
        "detail": "cla_backend.apps.checker.tests.api.test_eligibility_check_api",
        "documentation": {}
    },
    {
        "label": "ReasonsForContactingTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.tests.api.test_reasons_for_contacting_api",
        "description": "cla_backend.apps.checker.tests.api.test_reasons_for_contacting_api",
        "peekOfCode": "class ReasonsForContactingTestCase(SimpleResourceAPIMixin, CLACheckerAuthBaseApiTestMixin, APITestCase):\n    LOOKUP_KEY = \"reference\"\n    API_URL_BASE_NAME = \"reasons_for_contacting\"\n    RESOURCE_RECIPE = \"checker.reasonforcontacting\"\n    def setUp(self):\n        super(ReasonsForContactingTestCase, self).setUp()\n        # give it a category as it's not auto-generated\n        make_recipe(\"checker.reasonforcontacting_category\", reason_for_contacting=self.resource)\n        self.date_from = datetime.datetime.now() - datetime.timedelta(days=1)\n        self.date_to = datetime.datetime.now() + datetime.timedelta(days=1)",
        "detail": "cla_backend.apps.checker.tests.api.test_reasons_for_contacting_api",
        "documentation": {}
    },
    {
        "label": "reasonforcontacting",
        "kind": 5,
        "importPath": "cla_backend.apps.checker.tests.mommy_recipes",
        "description": "cla_backend.apps.checker.tests.mommy_recipes",
        "peekOfCode": "reasonforcontacting = Recipe(ReasonForContacting, _fill_optional=[\"user_agent\", \"referrer\"])\nreasonforcontacting_category = Recipe(\n    ReasonForContactingCategory, reason_for_contacting=foreign_key(reasonforcontacting)\n)",
        "detail": "cla_backend.apps.checker.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "reasonforcontacting_category",
        "kind": 5,
        "importPath": "cla_backend.apps.checker.tests.mommy_recipes",
        "description": "cla_backend.apps.checker.tests.mommy_recipes",
        "peekOfCode": "reasonforcontacting_category = Recipe(\n    ReasonForContactingCategory, reason_for_contacting=foreign_key(reasonforcontacting)\n)",
        "detail": "cla_backend.apps.checker.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "ReasonForContactingAdmin",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.admin",
        "description": "cla_backend.apps.checker.admin",
        "peekOfCode": "class ReasonForContactingAdmin(admin.ModelAdmin):\n    list_display = (\"created\", \"reason_categories\", \"case\")\n    date_hierarchy = \"created\"\n    readonly_fields = (\"reason_categories\", \"other_reasons\", \"case\", \"user_agent\", \"referrer\")\nadmin.site.register(ReasonForContacting, ReasonForContactingAdmin)",
        "detail": "cla_backend.apps.checker.admin",
        "documentation": {}
    },
    {
        "label": "WebCallMeBackForm",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.forms",
        "description": "cla_backend.apps.checker.forms",
        "peekOfCode": "class WebCallMeBackForm(BaseCallMeBackForm):\n    def __init__(self, *args, **kwargs):\n        self.requires_action_at = kwargs.pop(\"requires_action_at\")\n        super(WebCallMeBackForm, self).__init__(*args, **kwargs)\n    def get_requires_action_at(self):\n        return self.requires_action_at",
        "detail": "cla_backend.apps.checker.forms",
        "documentation": {}
    },
    {
        "label": "ReasonForContacting",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.models",
        "description": "cla_backend.apps.checker.models",
        "peekOfCode": "class ReasonForContacting(TimeStampedModel):\n    reference = UUIDField(auto=True, unique=True)\n    other_reasons = models.TextField(blank=True)\n    referrer = models.CharField(max_length=255, blank=True)\n    user_agent = models.CharField(max_length=255, blank=True)\n    case = models.ForeignKey(\"legalaid.Case\", blank=True, null=True)\n    class Meta(object):\n        verbose_name_plural = \"reasons for contacting\"\n        ordering = (\"-created\",)\n    @classmethod",
        "detail": "cla_backend.apps.checker.models",
        "documentation": {}
    },
    {
        "label": "ReasonForContactingCategory",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.models",
        "description": "cla_backend.apps.checker.models",
        "peekOfCode": "class ReasonForContactingCategory(models.Model):\n    reason_for_contacting = models.ForeignKey(ReasonForContacting, related_name=\"reasons\", on_delete=models.CASCADE)\n    category = models.CharField(max_length=20, choices=REASONS_FOR_CONTACTING.CHOICES)\n    class Meta(object):\n        verbose_name = \"category\"\n        verbose_name_plural = \"categories\"\n    def __unicode__(self):\n        try:\n            return REASONS_FOR_CONTACTING.CHOICES_DICT[self.category]\n        except KeyError:",
        "detail": "cla_backend.apps.checker.models",
        "documentation": {}
    },
    {
        "label": "PropertySerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.serializers",
        "description": "cla_backend.apps.checker.serializers",
        "peekOfCode": "class PropertySerializer(PropertySerializerBase):\n    disputed = serializers.NullBooleanField(default=None)\n    main = serializers.NullBooleanField(default=None)\n    @property\n    def errors(self):\n        return super(PropertySerializer, self).errors\n    class Meta(PropertySerializerBase.Meta):\n        fields = (\"value\", \"mortgage_left\", \"share\", \"id\", \"disputed\", \"main\")\nclass IncomeSerializer(IncomeSerializerBase):\n    class Meta(IncomeSerializerBase.Meta):",
        "detail": "cla_backend.apps.checker.serializers",
        "documentation": {}
    },
    {
        "label": "IncomeSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.serializers",
        "description": "cla_backend.apps.checker.serializers",
        "peekOfCode": "class IncomeSerializer(IncomeSerializerBase):\n    class Meta(IncomeSerializerBase.Meta):\n        fields = (\n            \"earnings\",\n            \"self_employment_drawings\",\n            \"benefits\",\n            \"tax_credits\",\n            \"child_benefits\",\n            \"maintenance_received\",\n            \"pension\",",
        "detail": "cla_backend.apps.checker.serializers",
        "documentation": {}
    },
    {
        "label": "PartnerIncomeSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.serializers",
        "description": "cla_backend.apps.checker.serializers",
        "peekOfCode": "class PartnerIncomeSerializer(IncomeSerializerBase):\n    \"\"\"\n    Like IncomeSerializer but without 'child_benefits'\n    \"\"\"\n    self_employed = serializers.NullBooleanField(default=None)\n    class Meta(IncomeSerializerBase.Meta):\n        fields = (\n            \"earnings\",\n            \"self_employment_drawings\",\n            \"benefits\",",
        "detail": "cla_backend.apps.checker.serializers",
        "documentation": {}
    },
    {
        "label": "SavingsSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.serializers",
        "description": "cla_backend.apps.checker.serializers",
        "peekOfCode": "class SavingsSerializer(SavingsSerializerBase):\n    class Meta(SavingsSerializerBase.Meta):\n        fields = (\"bank_balance\", \"investment_balance\", \"asset_balance\", \"credit_balance\", \"total\")\nclass DeductionsSerializer(DeductionsSerializerBase):\n    class Meta(DeductionsSerializerBase.Meta):\n        fields = (\n            \"income_tax\",\n            \"national_insurance\",\n            \"maintenance\",\n            \"childcare\",",
        "detail": "cla_backend.apps.checker.serializers",
        "documentation": {}
    },
    {
        "label": "DeductionsSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.serializers",
        "description": "cla_backend.apps.checker.serializers",
        "peekOfCode": "class DeductionsSerializer(DeductionsSerializerBase):\n    class Meta(DeductionsSerializerBase.Meta):\n        fields = (\n            \"income_tax\",\n            \"national_insurance\",\n            \"maintenance\",\n            \"childcare\",\n            \"mortgage\",\n            \"rent\",\n            \"criminal_legalaid_contributions\",",
        "detail": "cla_backend.apps.checker.serializers",
        "documentation": {}
    },
    {
        "label": "PersonSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.serializers",
        "description": "cla_backend.apps.checker.serializers",
        "peekOfCode": "class PersonSerializer(PersonSerializerBase):\n    income = IncomeSerializer(required=False)\n    savings = SavingsSerializer(required=False)\n    deductions = DeductionsSerializer(required=False)\n    class Meta(PersonSerializerBase.Meta):\n        fields = (\"income\", \"savings\", \"deductions\")\nclass PartnerPersonSerializer(PersonSerializer):\n    \"\"\"\n        Like PersonSerializer but without child_benefits\n    \"\"\"",
        "detail": "cla_backend.apps.checker.serializers",
        "documentation": {}
    },
    {
        "label": "PartnerPersonSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.serializers",
        "description": "cla_backend.apps.checker.serializers",
        "peekOfCode": "class PartnerPersonSerializer(PersonSerializer):\n    \"\"\"\n        Like PersonSerializer but without child_benefits\n    \"\"\"\n    income = PartnerIncomeSerializer(required=False, allow_null=True)\n    class Meta(PersonSerializer.Meta):\n        pass\nclass EligibilityCheckSerializer(EligibilityCheckSerializerBase):\n    property_set = PropertySerializer(many=True, required=False, allow_null=True)\n    you = PersonSerializer(required=False, allow_null=True)",
        "detail": "cla_backend.apps.checker.serializers",
        "documentation": {}
    },
    {
        "label": "EligibilityCheckSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.serializers",
        "description": "cla_backend.apps.checker.serializers",
        "peekOfCode": "class EligibilityCheckSerializer(EligibilityCheckSerializerBase):\n    property_set = PropertySerializer(many=True, required=False, allow_null=True)\n    you = PersonSerializer(required=False, allow_null=True)\n    partner = PartnerPersonSerializer(required=False, allow_null=True)\n    # TODO: DRF doesn't validate, fields that aren't REQ'd = True\n    # we need to figure out a way to deal with it\n    class Meta(EligibilityCheckSerializerBase.Meta):\n        fields = (\n            \"reference\",\n            \"category\",",
        "detail": "cla_backend.apps.checker.serializers",
        "documentation": {}
    },
    {
        "label": "PersonalDetailsSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.serializers",
        "description": "cla_backend.apps.checker.serializers",
        "peekOfCode": "class PersonalDetailsSerializer(PersonalDetailsSerializerBase):\n    class Meta(PersonalDetailsSerializerBase.Meta):\n        fields = (\n            \"title\",\n            \"full_name\",\n            \"postcode\",\n            \"street\",\n            \"mobile_phone\",\n            \"home_phone\",\n            \"email\",",
        "detail": "cla_backend.apps.checker.serializers",
        "documentation": {}
    },
    {
        "label": "ThirdPartyDetailsSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.serializers",
        "description": "cla_backend.apps.checker.serializers",
        "peekOfCode": "class ThirdPartyDetailsSerializer(ThirdPartyDetailsSerializerBase):\n    class Meta(ThirdPartyDetailsSerializerBase.Meta):\n        fields = (\"reference\", \"personal_details\", \"pass_phrase\", \"personal_relationship\")\nclass AdaptationDetailsSerializer(AdaptationDetailsSerializerBase):\n    class Meta(AdaptationDetailsSerializerBase.Meta):\n        fields = (\"bsl_webcam\", \"minicom\", \"text_relay\", \"skype_webcam\", \"language\", \"notes\")\nclass CaseSerializer(CaseSerializerBase):\n    eligibility_check = UUIDSerializer(\n        slug_field=\"reference\", required=False, queryset=EligibilityCheck.objects.all(), allow_null=True\n    )",
        "detail": "cla_backend.apps.checker.serializers",
        "documentation": {}
    },
    {
        "label": "AdaptationDetailsSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.serializers",
        "description": "cla_backend.apps.checker.serializers",
        "peekOfCode": "class AdaptationDetailsSerializer(AdaptationDetailsSerializerBase):\n    class Meta(AdaptationDetailsSerializerBase.Meta):\n        fields = (\"bsl_webcam\", \"minicom\", \"text_relay\", \"skype_webcam\", \"language\", \"notes\")\nclass CaseSerializer(CaseSerializerBase):\n    eligibility_check = UUIDSerializer(\n        slug_field=\"reference\", required=False, queryset=EligibilityCheck.objects.all(), allow_null=True\n    )\n    adaptation_details = AdaptationDetailsSerializer(required=False, allow_null=True)\n    personal_details = PersonalDetailsSerializer()\n    thirdparty_details = ThirdPartyDetailsSerializer(required=False, allow_null=True)",
        "detail": "cla_backend.apps.checker.serializers",
        "documentation": {}
    },
    {
        "label": "CaseSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.serializers",
        "description": "cla_backend.apps.checker.serializers",
        "peekOfCode": "class CaseSerializer(CaseSerializerBase):\n    eligibility_check = UUIDSerializer(\n        slug_field=\"reference\", required=False, queryset=EligibilityCheck.objects.all(), allow_null=True\n    )\n    adaptation_details = AdaptationDetailsSerializer(required=False, allow_null=True)\n    personal_details = PersonalDetailsSerializer()\n    thirdparty_details = ThirdPartyDetailsSerializer(required=False, allow_null=True)\n    requires_action_at = serializers.DateTimeField(required=False, allow_null=True)\n    callback_window_type = serializers.ChoiceField(choices=CALLBACK_WINDOW_TYPES, required=False, allow_null=True)\n    class Meta(CaseSerializerBase.Meta):",
        "detail": "cla_backend.apps.checker.serializers",
        "documentation": {}
    },
    {
        "label": "CheckerDiagnosisSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.serializers",
        "description": "cla_backend.apps.checker.serializers",
        "peekOfCode": "class CheckerDiagnosisSerializer(DiagnosisSerializer):\n    def _get_graph(self):\n        return checker_graph\nclass ReasonForContactingCategorySerializer(serializers.ModelSerializer):\n    class Meta(object):\n        model = ReasonForContactingCategory\n        fields = (\"category\",)\nclass ReasonForContactingSerializer(ClaModelSerializer):\n    reasons = ReasonForContactingCategorySerializer(many=True, required=False)\n    case = serializers.SlugRelatedField(",
        "detail": "cla_backend.apps.checker.serializers",
        "documentation": {}
    },
    {
        "label": "ReasonForContactingCategorySerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.serializers",
        "description": "cla_backend.apps.checker.serializers",
        "peekOfCode": "class ReasonForContactingCategorySerializer(serializers.ModelSerializer):\n    class Meta(object):\n        model = ReasonForContactingCategory\n        fields = (\"category\",)\nclass ReasonForContactingSerializer(ClaModelSerializer):\n    reasons = ReasonForContactingCategorySerializer(many=True, required=False)\n    case = serializers.SlugRelatedField(\n        slug_field=\"reference\", read_only=False, required=False, queryset=Case.objects.all()\n    )\n    class Meta(object):",
        "detail": "cla_backend.apps.checker.serializers",
        "documentation": {}
    },
    {
        "label": "ReasonForContactingSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.serializers",
        "description": "cla_backend.apps.checker.serializers",
        "peekOfCode": "class ReasonForContactingSerializer(ClaModelSerializer):\n    reasons = ReasonForContactingCategorySerializer(many=True, required=False)\n    case = serializers.SlugRelatedField(\n        slug_field=\"reference\", read_only=False, required=False, queryset=Case.objects.all()\n    )\n    class Meta(object):\n        model = ReasonForContacting\n        fields = (\"reference\", \"reasons\", \"other_reasons\", \"case\", \"referrer\", \"user_agent\")\n        writable_nested_fields = [\"reasons\"]",
        "detail": "cla_backend.apps.checker.serializers",
        "documentation": {}
    },
    {
        "label": "checker_graph",
        "kind": 5,
        "importPath": "cla_backend.apps.checker.serializers",
        "description": "cla_backend.apps.checker.serializers",
        "peekOfCode": "checker_graph = SimpleLazyObject(lambda: get_graph(file_name=settings.CHECKER_DIAGNOSIS_FILE_NAME))\nclass PropertySerializer(PropertySerializerBase):\n    disputed = serializers.NullBooleanField(default=None)\n    main = serializers.NullBooleanField(default=None)\n    @property\n    def errors(self):\n        return super(PropertySerializer, self).errors\n    class Meta(PropertySerializerBase.Meta):\n        fields = (\"value\", \"mortgage_left\", \"share\", \"id\", \"disputed\", \"main\")\nclass IncomeSerializer(IncomeSerializerBase):",
        "detail": "cla_backend.apps.checker.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "cla_backend.apps.checker.urls",
        "description": "cla_backend.apps.checker.urls",
        "peekOfCode": "router = routers.DefaultRouter()\nrouter.register(r\"diagnosis\", views.DiagnosisViewSet, base_name=\"diagnosis\")\nrouter.register(r\"category\", views.CategoryViewSet)\nrouter.register(r\"case\", views.CaseViewSet)\nrouter.register(r\"organisation\", views.ArticleViewSet)\nrouter.register(r\"eligibility_check\", views.EligibilityCheckViewSet, base_name=\"eligibility_check\")\nrouter.register(r\"reasons_for_contacting\", views.ReasonForContactingViewSet, base_name=\"reasons_for_contacting\")\nurlpatterns = patterns(\"\", url(r\"^\", include(router.urls)))",
        "detail": "cla_backend.apps.checker.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "cla_backend.apps.checker.urls",
        "description": "cla_backend.apps.checker.urls",
        "peekOfCode": "urlpatterns = patterns(\"\", url(r\"^\", include(router.urls)))",
        "detail": "cla_backend.apps.checker.urls",
        "documentation": {}
    },
    {
        "label": "PublicAPIViewSetMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.views",
        "description": "cla_backend.apps.checker.views",
        "peekOfCode": "class PublicAPIViewSetMixin(object):\n    permission_classes = (AllowAny,)\nclass CategoryViewSet(PublicAPIViewSetMixin, BaseCategoryViewSet):\n    \"\"\"\n    This returns a list of all valid categories in the system.\n    \"\"\"\n    pass\nclass ArticleCategoryNameFilter(ArticleCategoryFilter):\n    class Meta(ArticleCategoryFilter.Meta):\n        fields = (\"article_category__name\",)",
        "detail": "cla_backend.apps.checker.views",
        "documentation": {}
    },
    {
        "label": "CategoryViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.views",
        "description": "cla_backend.apps.checker.views",
        "peekOfCode": "class CategoryViewSet(PublicAPIViewSetMixin, BaseCategoryViewSet):\n    \"\"\"\n    This returns a list of all valid categories in the system.\n    \"\"\"\n    pass\nclass ArticleCategoryNameFilter(ArticleCategoryFilter):\n    class Meta(ArticleCategoryFilter.Meta):\n        fields = (\"article_category__name\",)\nclass ArticleViewSet(PublicAPIViewSetMixin, BaseArticleViewSet):\n    filter_class = ArticleCategoryNameFilter",
        "detail": "cla_backend.apps.checker.views",
        "documentation": {}
    },
    {
        "label": "ArticleCategoryNameFilter",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.views",
        "description": "cla_backend.apps.checker.views",
        "peekOfCode": "class ArticleCategoryNameFilter(ArticleCategoryFilter):\n    class Meta(ArticleCategoryFilter.Meta):\n        fields = (\"article_category__name\",)\nclass ArticleViewSet(PublicAPIViewSetMixin, BaseArticleViewSet):\n    filter_class = ArticleCategoryNameFilter\nclass EligibilityCheckViewSet(\n    PublicAPIViewSetMixin,\n    ClaCreateModelMixin,\n    ClaUpdateModelMixin,\n    mixins.RetrieveModelMixin,",
        "detail": "cla_backend.apps.checker.views",
        "documentation": {}
    },
    {
        "label": "ArticleViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.views",
        "description": "cla_backend.apps.checker.views",
        "peekOfCode": "class ArticleViewSet(PublicAPIViewSetMixin, BaseArticleViewSet):\n    filter_class = ArticleCategoryNameFilter\nclass EligibilityCheckViewSet(\n    PublicAPIViewSetMixin,\n    ClaCreateModelMixin,\n    ClaUpdateModelMixin,\n    mixins.RetrieveModelMixin,\n    BaseEligibilityCheckViewSet,\n):\n    serializer_class = EligibilityCheckSerializer",
        "detail": "cla_backend.apps.checker.views",
        "documentation": {}
    },
    {
        "label": "EligibilityCheckViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.views",
        "description": "cla_backend.apps.checker.views",
        "peekOfCode": "class EligibilityCheckViewSet(\n    PublicAPIViewSetMixin,\n    ClaCreateModelMixin,\n    ClaUpdateModelMixin,\n    mixins.RetrieveModelMixin,\n    BaseEligibilityCheckViewSet,\n):\n    serializer_class = EligibilityCheckSerializer\n    def get_request_user(self):\n        return get_web_user()",
        "detail": "cla_backend.apps.checker.views",
        "documentation": {}
    },
    {
        "label": "CaseViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.views",
        "description": "cla_backend.apps.checker.views",
        "peekOfCode": "class CaseViewSet(PublicAPIViewSetMixin, BaseCaseLogMixin, ClaCreateModelMixin, CompatGenericViewSet):\n    queryset = Case.objects.all()\n    model = Case\n    serializer_class = CaseSerializer\n    def perform_create(self, serializer):\n        created_by = serializer.validated_data.get(\"created_by\", None)\n        if not created_by:\n            serializer.validated_data[\"created_by\"] = get_web_user()\n        serializer.validated_data[\"source\"] = CASE_SOURCE.WEB\n        return super(CaseViewSet, self).perform_create(serializer)",
        "detail": "cla_backend.apps.checker.views",
        "documentation": {}
    },
    {
        "label": "DiagnosisViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.views",
        "description": "cla_backend.apps.checker.views",
        "peekOfCode": "class DiagnosisViewSet(\n    PublicAPIViewSetMixin,\n    DiagnosisModelMixin,\n    ClaCreateModelMixin,\n    ClaUpdateModelMixin,\n    mixins.RetrieveModelMixin,\n    mixins.DestroyModelMixin,\n    CompatGenericViewSet,\n):\n    serializer_class = CheckerDiagnosisSerializer",
        "detail": "cla_backend.apps.checker.views",
        "documentation": {}
    },
    {
        "label": "ReasonForContactingViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.checker.views",
        "description": "cla_backend.apps.checker.views",
        "peekOfCode": "class ReasonForContactingViewSet(\n    PublicAPIViewSetMixin, ClaCreateModelMixin, ClaUpdateModelMixin, CompatGenericViewSet\n):\n    queryset = ReasonForContacting.objects.all()\n    model = ReasonForContacting\n    serializer_class = ReasonForContactingSerializer\n    lookup_field = \"reference\"\n    def perform_update(self, serializer):\n        if \"reasons\" in serializer.validated_data:\n            serializer.instance.reasons.all().delete()",
        "detail": "cla_backend.apps.checker.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_auditlog.migrations.0001_initial",
        "description": "cla_backend.apps.cla_auditlog.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [migrations.swappable_dependency(settings.AUTH_USER_MODEL)]\n    operations = [\n        migrations.CreateModel(\n            name=\"AuditLog\",\n            fields=[\n                (\"id\", models.AutoField(verbose_name=\"ID\", serialize=False, auto_created=True, primary_key=True)),\n                (\n                    \"created\",\n                    model_utils.fields.AutoCreatedField(",
        "detail": "cla_backend.apps.cla_auditlog.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "audit_log",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_auditlog.tests.mommy_recipes",
        "description": "cla_backend.apps.cla_auditlog.tests.mommy_recipes",
        "peekOfCode": "audit_log = Recipe(AuditLog)",
        "detail": "cla_backend.apps.cla_auditlog.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "CaseViewSetTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_auditlog.tests.test_views",
        "description": "cla_backend.apps.cla_auditlog.tests.test_views",
        "peekOfCode": "class CaseViewSetTestCase(BaseCaseTestCase):\n    def test_audit_log_multiple_case_views(self):\n        count = self.resource.audit_log.count()\n        self.client.get(self.detail_url, format=\"json\", HTTP_AUTHORIZATION=\"Bearer %s\" % self.operator_manager_token)\n        self.assertEqual(self.resource.audit_log.count(), count + 1)\n        self.client.get(self.detail_url, format=\"json\", HTTP_AUTHORIZATION=\"Bearer %s\" % self.operator_manager_token)\n        self.assertEqual(self.resource.audit_log.count(), count + 2)\nclass ComplaintsViewSetTestCase(\n    ComplaintTestMixin, CLAOperatorAuthBaseApiTestMixin, SimpleResourceAPIMixin, APITestCase\n):",
        "detail": "cla_backend.apps.cla_auditlog.tests.test_views",
        "documentation": {}
    },
    {
        "label": "ComplaintsViewSetTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_auditlog.tests.test_views",
        "description": "cla_backend.apps.cla_auditlog.tests.test_views",
        "peekOfCode": "class ComplaintsViewSetTestCase(\n    ComplaintTestMixin, CLAOperatorAuthBaseApiTestMixin, SimpleResourceAPIMixin, APITestCase\n):\n    def test_audit_log_multiple_complaint_views(self):\n        count = self.resource.audit_log.count()\n        self.client.get(self.detail_url, format=\"json\", HTTP_AUTHORIZATION=\"Bearer %s\" % self.operator_manager_token)\n        self.assertEqual(self.resource.audit_log.count(), count + 1)\n        self.client.get(self.detail_url, format=\"json\", HTTP_AUTHORIZATION=\"Bearer %s\" % self.operator_manager_token)\n        self.assertEqual(self.resource.audit_log.count(), count + 2)",
        "detail": "cla_backend.apps.cla_auditlog.tests.test_views",
        "documentation": {}
    },
    {
        "label": "AuditLog",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_auditlog.models",
        "description": "cla_backend.apps.cla_auditlog.models",
        "peekOfCode": "class AuditLog(TimeStampedModel):\n    ACTIONS = Choices(\n        # constant, db_id, friendly string\n        (\"VIEWED\", \"VIEWED\", \"viewed\")\n    )\n    user = models.ForeignKey(\"auth.User\", blank=True, null=True)\n    action = models.CharField(choices=ACTIONS, db_index=True, max_length=50)",
        "detail": "cla_backend.apps.cla_auditlog.models",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_auth.management.commands.copy_client_data_to_new_table",
        "description": "cla_backend.apps.cla_auth.management.commands.copy_client_data_to_new_table",
        "peekOfCode": "class Command(BaseCommand):\n    help = (\n        \"Copies client data used by older provider.oauth2 package tables\"\n        \"to newer tables used by oauth2_provider tables\"\n    )\n    def handle(self, *args, **options):\n        clients = self.get_queryset()\n        try:\n            for client in clients:\n                user = None",
        "detail": "cla_backend.apps.cla_auth.management.commands.copy_client_data_to_new_table",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_auth.migrations.0001_initial",
        "description": "cla_backend.apps.cla_auth.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = []\n    operations = [\n        migrations.CreateModel(\n            name=\"AccessAttempt\",\n            fields=[\n                (\"id\", models.AutoField(verbose_name=\"ID\", serialize=False, auto_created=True, primary_key=True)),\n                (\n                    \"created\",\n                    model_utils.fields.AutoCreatedField(",
        "detail": "cla_backend.apps.cla_auth.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "ClientDataCopyCommandTest",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_auth.tests.management.commands.test_copy_client_data_to_new_table",
        "description": "cla_backend.apps.cla_auth.tests.management.commands.test_copy_client_data_to_new_table",
        "peekOfCode": "class ClientDataCopyCommandTest(TestCase):\n    OLD_CLIENT_DATA = OrderedDict([\n        (\"client_id\", \"test\"),\n        (\"redirect_uri\", \"http://localhost:1234\"),\n        (\"client_type\", \"test_type\"),\n        (\"client_secret\", \"test_secret\"),\n        (\"name\", \"test_name\"),\n        (\"user_id\", 1234)])\n    def setUp(self):\n        super(ClientDataCopyCommandTest, self).setUp()",
        "detail": "cla_backend.apps.cla_auth.tests.management.commands.test_copy_client_data_to_new_table",
        "documentation": {}
    },
    {
        "label": "LoginTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_auth.tests.test_views",
        "description": "cla_backend.apps.cla_auth.tests.test_views",
        "peekOfCode": "class LoginTestCase(TestCase):\n    INVALID_GRANT_ERROR = '{\"error\": \"invalid_grant\"}'\n    INVALID_CLIENT_ERROR = '{\"error\": \"invalid_client\"}'\n    INVALID_CREDENTIALS_ERROR = '{\"error_description\": \"Invalid credentials given.\", \"error\": \"invalid_grant\"}'\n    def setUp(self):\n        super(LoginTestCase, self).setUp()\n        self.url = reverse(\"oauth2:access_token\")\n        # setting up 2 clients\n        self.op_username = \"operator\"\n        self.op_email = \"lennon@thebeatles.com\"",
        "detail": "cla_backend.apps.cla_auth.tests.test_views",
        "documentation": {}
    },
    {
        "label": "AccessAttemptManager",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_auth.models",
        "description": "cla_backend.apps.cla_auth.models",
        "peekOfCode": "class AccessAttemptManager(models.Manager):\n    def delete_for_username(self, username):\n        if not username:\n            return\n        self.filter(username=username).delete()\n    def create_for_username(self, username):\n        if not username:\n            return\n        return self.create(username=username)\nclass AccessAttempt(TimeStampedModel):",
        "detail": "cla_backend.apps.cla_auth.models",
        "documentation": {}
    },
    {
        "label": "AccessAttempt",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_auth.models",
        "description": "cla_backend.apps.cla_auth.models",
        "peekOfCode": "class AccessAttempt(TimeStampedModel):\n    username = models.CharField(max_length=255)\n    objects = AccessAttemptManager()",
        "detail": "cla_backend.apps.cla_auth.models",
        "documentation": {}
    },
    {
        "label": "OBIEEIPPermission",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_auth.permissions",
        "description": "cla_backend.apps.cla_auth.permissions",
        "peekOfCode": "class OBIEEIPPermission(permissions.BasePermission):\n    def has_permission(self, request, view):\n        ip_addr = request.META[\"REMOTE_ADDR\"]\n        whitelist = settings.OBIEE_IP_PERMISSIONS\n        return \"*\" in whitelist or ip_addr in whitelist",
        "detail": "cla_backend.apps.cla_auth.permissions",
        "documentation": {}
    },
    {
        "label": "LoginRateThrottle",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_auth.throttling",
        "description": "cla_backend.apps.cla_auth.throttling",
        "peekOfCode": "class LoginRateThrottle(AnonRateThrottle):\n    \"\"\"\n    Limits the rate of API calls that may be made to login endpoint.\n    The IP address of the request will be used as the unique cache key.\n    \"\"\"\n    scope = \"login\"",
        "detail": "cla_backend.apps.cla_auth.throttling",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_auth.urls",
        "description": "cla_backend.apps.cla_auth.urls",
        "peekOfCode": "urlpatterns = patterns(\"\", url(\"^access_token/?$\", csrf_exempt(views.AccessTokenView.as_view()), name=\"access_token\"))",
        "detail": "cla_backend.apps.cla_auth.urls",
        "documentation": {}
    },
    {
        "label": "AccessTokenView",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_auth.views",
        "description": "cla_backend.apps.cla_auth.views",
        "peekOfCode": "class AccessTokenView(Oauth2AccessTokenView):\n    throttle_classes = [LoginRateThrottle]\n    def __init__(self, *args, **kwargs):\n        super(AccessTokenView, self).__init__(*args, **kwargs)\n    def get_throttles(self):\n        \"\"\"\n        Instantiates and returns the list of throttles that this view uses.\n        \"\"\"\n        return [throttle() for throttle in self.throttle_classes]\n    def check_throttles(self, request):",
        "detail": "cla_backend.apps.cla_auth.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_auth.views",
        "description": "cla_backend.apps.cla_auth.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass AccessTokenView(Oauth2AccessTokenView):\n    throttle_classes = [LoginRateThrottle]\n    def __init__(self, *args, **kwargs):\n        super(AccessTokenView, self).__init__(*args, **kwargs)\n    def get_throttles(self):\n        \"\"\"\n        Instantiates and returns the list of throttles that this view uses.\n        \"\"\"\n        return [throttle() for throttle in self.throttle_classes]",
        "detail": "cla_backend.apps.cla_auth.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.management.commands.create_dummy_personal_data",
        "description": "cla_backend.apps.cla_butler.management.commands.create_dummy_personal_data",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Create dummy personal data\"\n    def handle(self, counter, **options):\n        counter = int(counter)\n        if not settings.DEBUG:\n            self.stderr(\"This command can only run in DEBUG MODE\")\n            return\n        if settings.CLA_ENV not in [\"local\", \"uat\", \"staging\"]:\n            self.stderr(\"This command can only run on the following environments: local, uat and staging\")\n            return",
        "detail": "cla_backend.apps.cla_butler.management.commands.create_dummy_personal_data",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.management.commands.delete_cases_without_personal_data",
        "description": "cla_backend.apps.cla_butler.management.commands.delete_cases_without_personal_data",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Deleting cases containing no personal data\"\n    def add_arguments(self, parser):\n        parser.add_argument(\"--force\", action=\"store_true\", dest=\"force\", help=\"Force running of housekeeping task\")\n    def handle(self, *args, **options):\n        self.stdout.write(self.help)\n        DeleteOldData().run(delete_option_no_personal_details)",
        "detail": "cla_backend.apps.cla_butler.management.commands.delete_cases_without_personal_data",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.management.commands.diversity_data_check",
        "description": "cla_backend.apps.cla_butler.management.commands.diversity_data_check",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Checks all the diversity data is encrypted with the same set of keys\"\n    def handle(self, *args, **options):\n        self.stdout.write(\"This will check all the diversity data is encrypted with the same set of keys\")\n        self.stdout.write(\n            \"It will go through all rows in the legalaid_personaldata table and attempt to decrypt the diversity data using current private key\"\n        )\n        qs = DiversityDataCheck.get_unprocessed_personal_data_qs(ACTION.CHECK)\n        self.stdout.write(\"Personal data with diversity not null is: {}\".format(qs.count()))\n        passphrase = self.get_passphrase()",
        "detail": "cla_backend.apps.cla_butler.management.commands.diversity_data_check",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.management.commands.diversity_data_reencrypt",
        "description": "cla_backend.apps.cla_butler.management.commands.diversity_data_reencrypt",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Re-encrypt diversity data\"\n    # Number of records processed by each celery task\n    chunk_size = 1000\n    def handle(self, *args, **options):\n        previous_key = os.environ.get(\"PREVIOUS_DIVERSITY_PRIVATE_KEY\", None)\n        if not previous_key:\n            self.stderr.write(\"Could not find environment variable PREVIOUS_DIVERSITY_PRIVATE_KEY\")\n            return\n        passphrase_old = self.get_old_key_passphrase()",
        "detail": "cla_backend.apps.cla_butler.management.commands.diversity_data_reencrypt",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.management.commands.fix_missing_outcome_codes",
        "description": "cla_backend.apps.cla_butler.management.commands.fix_missing_outcome_codes",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"LGA-275 specific command to re-denormalize outcome codes missing from Case instances\"\n    def handle(self, *args, **options):\n        self.re_denormalize_outcome_codes_to_cases()\n    @staticmethod\n    def re_denormalize_outcome_codes_to_cases():\n        outcome_kwargs = {\"level\": LOG_LEVELS.HIGH, \"type\": LOG_TYPES.OUTCOME}\n        outcomes_that_should_be_denormed = Log.objects.filter(**outcome_kwargs).order_by(\"created\")  # Oldest to newest\n        outcomes_missing_denormed_code = outcomes_that_should_be_denormed.filter(case__outcome_code=\"\")\n        logger.info(\"\\nLGA-275: {} outcomes_missing_denormed_code\".format(outcomes_missing_denormed_code.count()))",
        "detail": "cla_backend.apps.cla_butler.management.commands.fix_missing_outcome_codes",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_butler.management.commands.fix_missing_outcome_codes",
        "description": "cla_backend.apps.cla_butler.management.commands.fix_missing_outcome_codes",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Command(BaseCommand):\n    help = \"LGA-275 specific command to re-denormalize outcome codes missing from Case instances\"\n    def handle(self, *args, **options):\n        self.re_denormalize_outcome_codes_to_cases()\n    @staticmethod\n    def re_denormalize_outcome_codes_to_cases():\n        outcome_kwargs = {\"level\": LOG_LEVELS.HIGH, \"type\": LOG_TYPES.OUTCOME}\n        outcomes_that_should_be_denormed = Log.objects.filter(**outcome_kwargs).order_by(\"created\")  # Oldest to newest\n        outcomes_missing_denormed_code = outcomes_that_should_be_denormed.filter(case__outcome_code=\"\")",
        "detail": "cla_backend.apps.cla_butler.management.commands.fix_missing_outcome_codes",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.management.commands.housekeeping",
        "description": "cla_backend.apps.cla_butler.management.commands.housekeeping",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Deleting cases that are over three years old and that dont have an excluded outcome_code\"\n    def add_arguments(self, parser):\n        parser.add_argument(\"--force\", action=\"store_true\", dest=\"force\", help=\"Force running of housekeeping task\")\n    def handle(self, *args, **options):\n        self.stdout.write(self.help)\n        DeleteOldData().run(delete_option_three_years)",
        "detail": "cla_backend.apps.cla_butler.management.commands.housekeeping",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.management.commands.monitor_missing_outcome_codes",
        "description": "cla_backend.apps.cla_butler.management.commands.monitor_missing_outcome_codes",
        "peekOfCode": "class Command(BaseCommand):\n    help = (\n        \"LGA-275 specific monitoring command. Count and alert when outcome codes expected to be \"\n        \"denormalized to Case instances are missing\"\n    )\n    def handle(self, *args, **options):\n        self.stdout.write(\"Checking for missing outcome codes\")\n        self.check_for_missing_outcome_codes()\n    @staticmethod\n    def check_for_missing_outcome_codes():",
        "detail": "cla_backend.apps.cla_butler.management.commands.monitor_missing_outcome_codes",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_butler.management.commands.monitor_missing_outcome_codes",
        "description": "cla_backend.apps.cla_butler.management.commands.monitor_missing_outcome_codes",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Command(BaseCommand):\n    help = (\n        \"LGA-275 specific monitoring command. Count and alert when outcome codes expected to be \"\n        \"denormalized to Case instances are missing\"\n    )\n    def handle(self, *args, **options):\n        self.stdout.write(\"Checking for missing outcome codes\")\n        self.check_for_missing_outcome_codes()\n    @staticmethod",
        "detail": "cla_backend.apps.cla_butler.management.commands.monitor_missing_outcome_codes",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.management.commands.monitor_multiple_outcome_codes",
        "description": "cla_backend.apps.cla_butler.management.commands.monitor_multiple_outcome_codes",
        "peekOfCode": "class Command(BaseCommand):\n    help = (\n        \"LGA-294 specific monitoring command. Alert when multiple outcome codes \"\n        \"that should only occur once are found for today (since 00:00)\"\n    )\n    def handle(self, *args, **options):\n        self.stdout.write(\"Checking for multiple outcome codes\")\n        self.check_for_multiple_outcome_codes()\n    @staticmethod\n    def check_for_multiple_outcome_codes():",
        "detail": "cla_backend.apps.cla_butler.management.commands.monitor_multiple_outcome_codes",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_butler.management.commands.monitor_multiple_outcome_codes",
        "description": "cla_backend.apps.cla_butler.management.commands.monitor_multiple_outcome_codes",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Command(BaseCommand):\n    help = (\n        \"LGA-294 specific monitoring command. Alert when multiple outcome codes \"\n        \"that should only occur once are found for today (since 00:00)\"\n    )\n    def handle(self, *args, **options):\n        self.stdout.write(\"Checking for multiple outcome codes\")\n        self.check_for_multiple_outcome_codes()\n    @staticmethod",
        "detail": "cla_backend.apps.cla_butler.management.commands.monitor_multiple_outcome_codes",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.management.commands.reverthousekeeping",
        "description": "cla_backend.apps.cla_butler.management.commands.reverthousekeeping",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Attempts to re-load data that was deleted in the housekeeping\"\n    def add_arguments(self, parser):\n        parser.add_argument(\"directory\", nargs=1)\n    def handle(self, *args, **options):\n        path = os.path.join(settings.TEMP_DIR, args[0])\n        filewriter = QuerysetToFile(path)\n        for model in MODELS:\n            self.stdout.write(model.__name__)\n            filewriter.load(model)",
        "detail": "cla_backend.apps.cla_butler.management.commands.reverthousekeeping",
        "documentation": {}
    },
    {
        "label": "MODELS",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_butler.management.commands.reverthousekeeping",
        "description": "cla_backend.apps.cla_butler.management.commands.reverthousekeeping",
        "peekOfCode": "MODELS = [\n    Deductions,\n    Income,\n    Savings,\n    Person,\n    AdaptationDetails,\n    PersonalDetails,\n    ThirdPartyDetails,\n    EligibilityCheck,\n    Property,",
        "detail": "cla_backend.apps.cla_butler.management.commands.reverthousekeeping",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.migrations.0001_initial",
        "description": "cla_backend.apps.cla_butler.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('legalaid', '0030_eligibilitycheck_disregards'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='DiversityDataCheck',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, verbose_name='created', editable=False)),",
        "detail": "cla_backend.apps.cla_butler.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.migrations.0002_auto_20230426_1405",
        "description": "cla_backend.apps.cla_butler.migrations.0002_auto_20230426_1405",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"cla_butler\", \"0001_initial\")]\n    operations = [\n        migrations.AlterField(\n            model_name=\"diversitydatacheck\",\n            name=\"action\",\n            field=models.CharField(max_length=20, choices=[(b\"check\", b\"Check\"), (b\"reencrypt\", b\"Re-encrypt\")]),\n            preserve_default=True,\n        ),\n        migrations.AlterField(",
        "detail": "cla_backend.apps.cla_butler.migrations.0002_auto_20230426_1405",
        "documentation": {}
    },
    {
        "label": "CreateSampleDiversityData",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.tests.mixins",
        "description": "cla_backend.apps.cla_butler.tests.mixins",
        "peekOfCode": "class CreateSampleDiversityData:\n    def setUp(self):\n        sample_data = {\n            'gender': 'Prefer not to say',\n            'religion': 'Prefer not to say',\n            'disability': 'PNS - Prefer not to say',\n            'ethnicity': 'Prefer not to say',\n            'sexual_orientation': 'Prefer Not To Say'\n        }\n        self.pd_records_ids = [make_recipe(\"legalaid.personal_details\").pk for _ in range(0, 10)]",
        "detail": "cla_backend.apps.cla_butler.tests.mixins",
        "documentation": {}
    },
    {
        "label": "DiversityCheckCommandTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.tests.test_command",
        "description": "cla_backend.apps.cla_butler.tests.test_command",
        "peekOfCode": "class DiversityCheckCommandTestCase(CreateSampleDiversityData, TestCase):\n    @mock.patch(\"cla_butler.management.commands.diversity_data_check.Command.get_passphrase\", return_value=\"cla\")\n    @mock.patch(\"cla_butler.tasks.DiversityDataCheckTask.delay\")\n    def test_diversity_data_check(self, mock_delay, get_passphrase):\n        delay_result = {\"start\": None, \"end\": None}\n        expected_delay_result = {\"start\": 0, \"end\": 1000}\n        def delay(*args, **kwargs):\n            passphrase, start, end, description = args\n            delay_result[\"start\"] = start\n            delay_result[\"end\"] = end",
        "detail": "cla_backend.apps.cla_butler.tests.test_command",
        "documentation": {}
    },
    {
        "label": "DiversityReencryptCommandTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.tests.test_command",
        "description": "cla_backend.apps.cla_butler.tests.test_command",
        "peekOfCode": "class DiversityReencryptCommandTestCase(CreateSampleDiversityData, TestCase):\n    def setUp(self):\n        super(DiversityReencryptCommandTestCase, self).setUp()\n        self.scheduled_tasks = []\n        self.expected_tasks_count = 0\n    def mock_schedule_tasks(self, tasks, passphrase_old, **kwargs):\n        self.scheduled_tasks = tasks\n        records_count = len(self.pd_records_ids)\n        chunk_size = ClaButlerDiversityReencryptCommand.chunk_size\n        remainder = 1 if records_count % chunk_size else 0",
        "detail": "cla_backend.apps.cla_butler.tests.test_command",
        "documentation": {}
    },
    {
        "label": "DiversityReencryptTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.tests.test_diversity_key_change",
        "description": "cla_backend.apps.cla_butler.tests.test_diversity_key_change",
        "peekOfCode": "class DiversityReencryptTestCase(TestCase):\n    def setUp(self):\n        super(DiversityReencryptTestCase, self).setUp()\n        self.expected_diversity_data = {\"my key\": \"my value\"}\n        case = make_recipe(\"legalaid.case\")\n        diversity.save_diversity_data(case.personal_details.pk, self.expected_diversity_data)\n        self.case = Case.objects.get(pk=case.pk)\n    def get__key(self, key_name):\n        file_path = os.path.join(os.path.dirname(diversity.__file__), \"keys\", key_name)\n        with open(file_path) as f:",
        "detail": "cla_backend.apps.cla_butler.tests.test_diversity_key_change",
        "documentation": {}
    },
    {
        "label": "DiversityDataCheckModelTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.tests.test_models",
        "description": "cla_backend.apps.cla_butler.tests.test_models",
        "peekOfCode": "class DiversityDataCheckModelTestCase(CreateSampleDiversityData, TestCase):\n    def test_get_unprocessed_personal_data_qs(self):\n        ddc = DiversityDataCheck.objects.create(action=ACTION.CHECK, personal_details_id=self.pd_records_ids[0])\n        qs = DiversityDataCheck.get_unprocessed_personal_data_qs(ACTION.CHECK)\n        self.assertEqual(qs.count(), 9)\n        self.assertNotIn(ddc.pk, qs.values_list(\"id\", flat=True))",
        "detail": "cla_backend.apps.cla_butler.tests.test_models",
        "documentation": {}
    },
    {
        "label": "TasksTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.tests.test_tasks",
        "description": "cla_backend.apps.cla_butler.tests.test_tasks",
        "peekOfCode": "class TasksTestCase(TestCase):\n    \"\"\"\n    Currently in Django v1.7 database constraint checks are not done until a transaction is committed.\n    In TestCase they are never committed so therefore any tests with M2M relationships, such as\n    'test_cleanup_personal_details_no_case_attached_successful', are currently passing with a false positive.\n    On upgrade to Django v1.8+, check_constraints() is implemented in TestCase so that it will correctly check\n    constraints such as M2M relationships and raise an IntegrityError and fail the test.\n    The tests should at this point continue to pass.\n    \"\"\"\n    def setUp(self):",
        "detail": "cla_backend.apps.cla_butler.tests.test_tasks",
        "documentation": {}
    },
    {
        "label": "DiversityDataCheckTaskTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.tests.test_tasks",
        "description": "cla_backend.apps.cla_butler.tests.test_tasks",
        "peekOfCode": "class DiversityDataCheckTaskTestCase(CreateSampleDiversityData, TestCase):\n    @mock.patch(\"legalaid.utils.diversity.load_diversity_data\", mock_load_diversity_data)\n    def test_run(self):\n        DiversityDataCheckTask().run(\"cla\", 0, 1000, description=\"\")\n        success_count = DiversityDataCheck.objects.filter(action=ACTION.CHECK, status=STATUS.OK).count()\n        failure_count = DiversityDataCheck.objects.filter(action=ACTION.CHECK, status=STATUS.FAIL).count()\n        failure_messages = list(\n            DiversityDataCheck.objects.filter(action=ACTION.CHECK, status=STATUS.FAIL).values_list(\"detail\", flat=True)\n        )\n        expected_failure_messages = [u\"Something went wrong\"] * 5",
        "detail": "cla_backend.apps.cla_butler.tests.test_tasks",
        "documentation": {}
    },
    {
        "label": "DiversityDataReencryptTaskTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.tests.test_tasks",
        "description": "cla_backend.apps.cla_butler.tests.test_tasks",
        "peekOfCode": "class DiversityDataReencryptTaskTestCase(CreateSampleDiversityData, TestCase):\n    def get__key(self, key_name):\n        file_path = os.path.join(os.path.dirname(diversity.__file__), \"keys\", key_name)\n        with open(file_path) as f:\n            return f.read()\n    def test_run(self):\n        previous_key = diversity.get_private_key()\n        mock_keys = {\n            \"PREVIOUS_DIVERSITY_PRIVATE_KEY\": previous_key,\n            \"DIVERSITY_PRIVATE_KEY\": self.get__key(\"diversity_dev_reencrypt_private.key\"),",
        "detail": "cla_backend.apps.cla_butler.tests.test_tasks",
        "documentation": {}
    },
    {
        "label": "mock_load_diversity_data",
        "kind": 2,
        "importPath": "cla_backend.apps.cla_butler.tests.test_tasks",
        "description": "cla_backend.apps.cla_butler.tests.test_tasks",
        "peekOfCode": "def mock_load_diversity_data(personal_details_pk, passphrase):\n    if personal_details_pk % 2 == 0:\n        raise ValueError(\"Something went wrong\")\nclass TasksTestCase(TestCase):\n    \"\"\"\n    Currently in Django v1.7 database constraint checks are not done until a transaction is committed.\n    In TestCase they are never committed so therefore any tests with M2M relationships, such as\n    'test_cleanup_personal_details_no_case_attached_successful', are currently passing with a false positive.\n    On upgrade to Django v1.8+, check_constraints() is implemented in TestCase so that it will correctly check\n    constraints such as M2M relationships and raise an IntegrityError and fail the test.",
        "detail": "cla_backend.apps.cla_butler.tests.test_tasks",
        "documentation": {}
    },
    {
        "label": "delete_option_three_years",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_butler.constants",
        "description": "cla_backend.apps.cla_butler.constants",
        "peekOfCode": "delete_option_three_years = \"three_years\"\ndelete_option_no_personal_details = \"no_personal_details\"",
        "detail": "cla_backend.apps.cla_butler.constants",
        "documentation": {}
    },
    {
        "label": "delete_option_no_personal_details",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_butler.constants",
        "description": "cla_backend.apps.cla_butler.constants",
        "peekOfCode": "delete_option_no_personal_details = \"no_personal_details\"",
        "detail": "cla_backend.apps.cla_butler.constants",
        "documentation": {}
    },
    {
        "label": "DiversityDataCheck",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.models",
        "description": "cla_backend.apps.cla_butler.models",
        "peekOfCode": "class DiversityDataCheck(TimeStampedModel):\n    personal_details = models.ForeignKey(PersonalDetails)\n    detail = models.TextField(null=True, blank=True)\n    action = models.CharField(max_length=20, choices=ACTION)\n    status = models.CharField(max_length=10, choices=STATUS)\n    @classmethod\n    def get_unprocessed_personal_data_qs(cls, action):\n        qs = cls.get_personal_details_with_diversity_data()\n        return qs.prefetch_related(\"diversitydatacheck\").filter(\n            Q(diversitydatacheck__pk__isnull=True) | ~Q(diversitydatacheck__action=action)",
        "detail": "cla_backend.apps.cla_butler.models",
        "documentation": {}
    },
    {
        "label": "STATUS",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_butler.models",
        "description": "cla_backend.apps.cla_butler.models",
        "peekOfCode": "STATUS = Choices(\n    # constant, db_id, friendly string\n    (\"OK\", \"ok\", \"OK\"),\n    (\"FAIL\", \"fail\", \"Fail\"),\n)\nACTION = Choices(\n    # constant, db_id, friendly string\n    (\"CHECK\", \"check\", \"Check\"),\n    (\"REENCRYPT\", \"reencrypt\", \"Re-encrypt\"),\n)",
        "detail": "cla_backend.apps.cla_butler.models",
        "documentation": {}
    },
    {
        "label": "ACTION",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_butler.models",
        "description": "cla_backend.apps.cla_butler.models",
        "peekOfCode": "ACTION = Choices(\n    # constant, db_id, friendly string\n    (\"CHECK\", \"check\", \"Check\"),\n    (\"REENCRYPT\", \"reencrypt\", \"Re-encrypt\"),\n)\nclass DiversityDataCheck(TimeStampedModel):\n    personal_details = models.ForeignKey(PersonalDetails)\n    detail = models.TextField(null=True, blank=True)\n    action = models.CharField(max_length=20, choices=ACTION)\n    status = models.CharField(max_length=10, choices=STATUS)",
        "detail": "cla_backend.apps.cla_butler.models",
        "documentation": {}
    },
    {
        "label": "QuerysetToFile",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.qs_to_file",
        "description": "cla_backend.apps.cla_butler.qs_to_file",
        "peekOfCode": "class QuerysetToFile(object):\n    def __init__(self, path):\n        if not os.path.exists(path):\n            os.makedirs(path)\n        self.path = path\n    def get_file_path(self, model, ext=\"csv\"):\n        return os.path.join(self.path, \"{model}.{extension}\".format(model=model.__name__, extension=ext))\n    def get_name(self, field):\n        field_name = field.name\n        if isinstance(field, ForeignKey):",
        "detail": "cla_backend.apps.cla_butler.qs_to_file",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_butler.qs_to_file",
        "description": "cla_backend.apps.cla_butler.qs_to_file",
        "peekOfCode": "logger = logging.getLogger(__name__)\nRE_DATE = re.compile(r\"(\\d{4})-(\\d{2})-(\\d{2})$\")\nRE_DATETIME = re.compile(r\"(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})\\.(\\d{6})\\+(\\d{2}):(\\d{2})$\")\nWRITE_MODE = \"wb\"\nAPPEND_MODE = \"a\"\nclass QuerysetToFile(object):\n    def __init__(self, path):\n        if not os.path.exists(path):\n            os.makedirs(path)\n        self.path = path",
        "detail": "cla_backend.apps.cla_butler.qs_to_file",
        "documentation": {}
    },
    {
        "label": "RE_DATE",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_butler.qs_to_file",
        "description": "cla_backend.apps.cla_butler.qs_to_file",
        "peekOfCode": "RE_DATE = re.compile(r\"(\\d{4})-(\\d{2})-(\\d{2})$\")\nRE_DATETIME = re.compile(r\"(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})\\.(\\d{6})\\+(\\d{2}):(\\d{2})$\")\nWRITE_MODE = \"wb\"\nAPPEND_MODE = \"a\"\nclass QuerysetToFile(object):\n    def __init__(self, path):\n        if not os.path.exists(path):\n            os.makedirs(path)\n        self.path = path\n    def get_file_path(self, model, ext=\"csv\"):",
        "detail": "cla_backend.apps.cla_butler.qs_to_file",
        "documentation": {}
    },
    {
        "label": "RE_DATETIME",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_butler.qs_to_file",
        "description": "cla_backend.apps.cla_butler.qs_to_file",
        "peekOfCode": "RE_DATETIME = re.compile(r\"(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})\\.(\\d{6})\\+(\\d{2}):(\\d{2})$\")\nWRITE_MODE = \"wb\"\nAPPEND_MODE = \"a\"\nclass QuerysetToFile(object):\n    def __init__(self, path):\n        if not os.path.exists(path):\n            os.makedirs(path)\n        self.path = path\n    def get_file_path(self, model, ext=\"csv\"):\n        return os.path.join(self.path, \"{model}.{extension}\".format(model=model.__name__, extension=ext))",
        "detail": "cla_backend.apps.cla_butler.qs_to_file",
        "documentation": {}
    },
    {
        "label": "WRITE_MODE",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_butler.qs_to_file",
        "description": "cla_backend.apps.cla_butler.qs_to_file",
        "peekOfCode": "WRITE_MODE = \"wb\"\nAPPEND_MODE = \"a\"\nclass QuerysetToFile(object):\n    def __init__(self, path):\n        if not os.path.exists(path):\n            os.makedirs(path)\n        self.path = path\n    def get_file_path(self, model, ext=\"csv\"):\n        return os.path.join(self.path, \"{model}.{extension}\".format(model=model.__name__, extension=ext))\n    def get_name(self, field):",
        "detail": "cla_backend.apps.cla_butler.qs_to_file",
        "documentation": {}
    },
    {
        "label": "APPEND_MODE",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_butler.qs_to_file",
        "description": "cla_backend.apps.cla_butler.qs_to_file",
        "peekOfCode": "APPEND_MODE = \"a\"\nclass QuerysetToFile(object):\n    def __init__(self, path):\n        if not os.path.exists(path):\n            os.makedirs(path)\n        self.path = path\n    def get_file_path(self, model, ext=\"csv\"):\n        return os.path.join(self.path, \"{model}.{extension}\".format(model=model.__name__, extension=ext))\n    def get_name(self, field):\n        field_name = field.name",
        "detail": "cla_backend.apps.cla_butler.qs_to_file",
        "documentation": {}
    },
    {
        "label": "DeleteOldData",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.tasks",
        "description": "cla_backend.apps.cla_butler.tasks",
        "peekOfCode": "class DeleteOldData(Task):\n    \"\"\"\n    Deletes old data that is no longer needed.\n    We also delete empty cases and data thet is not connected to anything in\n    particular.\n    \"\"\"\n    OUTCOME_CODES = [\"COI\", \"MIS\", \"REOPEN\", \"SPOP\"]\n    def __init__(self, *args, **kwargs):\n        self._setup()\n    def run(self, delete_option, *args, **kwargs):",
        "detail": "cla_backend.apps.cla_butler.tasks",
        "documentation": {}
    },
    {
        "label": "DiversityDataCheckTask",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.tasks",
        "description": "cla_backend.apps.cla_butler.tasks",
        "peekOfCode": "class DiversityDataCheckTask(Task):\n    def run(self, passphrase, start, end, description, *args, **kwargs):\n        items = DiversityDataCheck.get_personal_details_with_diversity_data()[start:end]\n        logger.info(description)\n        for item in items:\n            try:\n                diversity.load_diversity_data(item.pk, passphrase)\n                status = STATUS.OK\n                detail = None\n            except Exception as e:",
        "detail": "cla_backend.apps.cla_butler.tasks",
        "documentation": {}
    },
    {
        "label": "DiversityDataReencryptTask",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_butler.tasks",
        "description": "cla_backend.apps.cla_butler.tasks",
        "peekOfCode": "class DiversityDataReencryptTask(Task):\n    def run(self, passphrase_old, ids):\n        previous_key = os.environ[\"PREVIOUS_DIVERSITY_PRIVATE_KEY\"]\n        for item in ids:\n            if DiversityDataCheck.objects.filter(personal_details_id=item, action=ACTION.REENCRYPT).count():\n                logger.info(\"Diversity data re-encryption: {} has already been re-encrypted. Skipping\".format(item))\n                continue\n            try:\n                logger.info(\"Diversity data re-encryption: Re-encrypting {}\".format(item))\n                diversity.reencrypt(item, previous_key, passphrase_old)",
        "detail": "cla_backend.apps.cla_butler.tasks",
        "documentation": {}
    },
    {
        "label": "get_pks",
        "kind": 2,
        "importPath": "cla_backend.apps.cla_butler.tasks",
        "description": "cla_backend.apps.cla_butler.tasks",
        "peekOfCode": "def get_pks(qs):\n    return [str(pk) for pk in qs.values_list(\"pk\", flat=True)]\nclass DeleteOldData(Task):\n    \"\"\"\n    Deletes old data that is no longer needed.\n    We also delete empty cases and data thet is not connected to anything in\n    particular.\n    \"\"\"\n    OUTCOME_CODES = [\"COI\", \"MIS\", \"REOPEN\", \"SPOP\"]\n    def __init__(self, *args, **kwargs):",
        "detail": "cla_backend.apps.cla_butler.tasks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_butler.tasks",
        "description": "cla_backend.apps.cla_butler.tasks",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef get_pks(qs):\n    return [str(pk) for pk in qs.values_list(\"pk\", flat=True)]\nclass DeleteOldData(Task):\n    \"\"\"\n    Deletes old data that is no longer needed.\n    We also delete empty cases and data thet is not connected to anything in\n    particular.\n    \"\"\"\n    OUTCOME_CODES = [\"COI\", \"MIS\", \"REOPEN\", \"SPOP\"]",
        "detail": "cla_backend.apps.cla_butler.tasks",
        "documentation": {}
    },
    {
        "label": "CallCentreAvailabilityHistoricCurrentDateTime",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.management.commands.add_72h_to_context",
        "description": "cla_backend.apps.cla_eventlog.management.commands.add_72h_to_context",
        "peekOfCode": "class CallCentreAvailabilityHistoricCurrentDateTime(object):\n    def __init__(self, start_time):\n        self.start_time = start_time\n        self.orig_current_datetime = call_centre_availability.current_datetime\n    def get_current_datetime(self):\n        now = self.start_time\n        if timezone.is_naive(now):\n            return now\n        else:\n            return timezone.make_naive(now, self.start_time.tzinfo)",
        "detail": "cla_backend.apps.cla_eventlog.management.commands.add_72h_to_context",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.management.commands.add_72h_to_context",
        "description": "cla_backend.apps.cla_eventlog.management.commands.add_72h_to_context",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Add 72 working hours to the event_log context to be used for sla reporting.\"\n    def handle(self, *args, **options):\n        logs = self.get_logs()\n        for log in logs:\n            context = log.context\n            context[\"sla_72h\"] = self.get_72_working_hours_sla(log.case.requires_action_at)\n            self.stdout.write(\n                \"Updating {} from requires_action_at {} to sla_72h {}\".format(\n                    log, log.case.requires_action_at, log.context[\"sla_72h\"]",
        "detail": "cla_backend.apps.cla_eventlog.management.commands.add_72h_to_context",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.management.commands.remove_same_day_consecutive_outcome_codes",
        "description": "cla_backend.apps.cla_eventlog.management.commands.remove_same_day_consecutive_outcome_codes",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"LGA-125 specific command. Remove same day consecutive outcome codes.\"\n    def handle(self, *args, **options):\n        self.remove_same_day_consecutive_outcome_codes()\n    def remove_same_day_consecutive_outcome_codes(self):\n        logger.info(\"\\nLGA-125: start remove_same_day_consecutive_outcome_codes {}\".format(now()))\n        # Older Django sans TruncDate, etc.\n        outcome_events = (\n            Log.objects.filter(type=LOG_TYPES.OUTCOME, level=LOG_LEVELS.HIGH)\n            .extra(select={\"day\": \"date( cla_eventlog_log.created )\"})",
        "detail": "cla_backend.apps.cla_eventlog.management.commands.remove_same_day_consecutive_outcome_codes",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_eventlog.management.commands.remove_same_day_consecutive_outcome_codes",
        "description": "cla_backend.apps.cla_eventlog.management.commands.remove_same_day_consecutive_outcome_codes",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Command(BaseCommand):\n    help = \"LGA-125 specific command. Remove same day consecutive outcome codes.\"\n    def handle(self, *args, **options):\n        self.remove_same_day_consecutive_outcome_codes()\n    def remove_same_day_consecutive_outcome_codes(self):\n        logger.info(\"\\nLGA-125: start remove_same_day_consecutive_outcome_codes {}\".format(now()))\n        # Older Django sans TruncDate, etc.\n        outcome_events = (\n            Log.objects.filter(type=LOG_TYPES.OUTCOME, level=LOG_LEVELS.HIGH)",
        "detail": "cla_backend.apps.cla_eventlog.management.commands.remove_same_day_consecutive_outcome_codes",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.migrations.0001_initial",
        "description": "cla_backend.apps.cla_eventlog.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"legalaid\", \"0001_initial\"),\n        (\"timer\", \"0001_initial\"),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"Log\",\n            fields=[",
        "detail": "cla_backend.apps.cla_eventlog.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.migrations.0002_analyse_20150127_1540",
        "description": "cla_backend.apps.cla_eventlog.migrations.0002_analyse_20150127_1540",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"cla_eventlog\", \"0001_initial\")]\n    operations = [migrations.RunSQL(sql)]",
        "detail": "cla_backend.apps.cla_eventlog.migrations.0002_analyse_20150127_1540",
        "documentation": {}
    },
    {
        "label": "sql",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_eventlog.migrations.0002_analyse_20150127_1540",
        "description": "cla_backend.apps.cla_eventlog.migrations.0002_analyse_20150127_1540",
        "peekOfCode": "sql = \"\"\"\nALTER table cla_eventlog_log SET (\n    autovacuum_enabled=true,\n    autovacuum_analyze_scale_factor=0.0,\n    autovacuum_analyze_threshold=5000\n);\n\"\"\"\nclass Migration(migrations.Migration):\n    dependencies = [(\"cla_eventlog\", \"0001_initial\")]\n    operations = [migrations.RunSQL(sql)]",
        "detail": "cla_backend.apps.cla_eventlog.migrations.0002_analyse_20150127_1540",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.migrations.0003_auto_20150813_1431",
        "description": "cla_backend.apps.cla_eventlog.migrations.0003_auto_20150813_1431",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"contenttypes\", \"0001_initial\"), (\"cla_eventlog\", \"0002_analyse_20150127_1540\")]\n    operations = [\n        migrations.CreateModel(\n            name=\"ComplaintLog\", fields=[], options={\"abstract\": False, \"proxy\": True}, bases=(\"cla_eventlog.log\",)\n        ),\n        migrations.AddField(\n            model_name=\"log\",\n            name=\"content_type\",\n            field=models.ForeignKey(blank=True, to=\"contenttypes.ContentType\", null=True),",
        "detail": "cla_backend.apps.cla_eventlog.migrations.0003_auto_20150813_1431",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.migrations.0004_auto_20151210_1231",
        "description": "cla_backend.apps.cla_eventlog.migrations.0004_auto_20151210_1231",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"cla_eventlog\", \"0003_auto_20150813_1431\")]\n    operations = [\n        migrations.AlterField(\n            model_name=\"log\", name=\"code\", field=models.CharField(max_length=50, db_index=True), preserve_default=True\n        ),\n        migrations.AlterField(\n            model_name=\"log\",\n            name=\"level\",\n            field=models.PositiveSmallIntegerField(",
        "detail": "cla_backend.apps.cla_eventlog.migrations.0004_auto_20151210_1231",
        "documentation": {}
    },
    {
        "label": "EventTestCaseMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.tests.base",
        "description": "cla_backend.apps.cla_eventlog.tests.base",
        "peekOfCode": "class EventTestCaseMixin(object):\n    EVENT_KEY = \"\"\n    def setUp(self):\n        self.dummy_case = make_recipe(\"legalaid.case\")\n        self.dummy_user = make_user()\n    def assertLogEqual(self, l1, l2):\n        for attr in [\"code\", \"type\", \"level\", \"created_by\", \"notes\", \"case_id\", \"timer\"]:\n            self.assertEqual(getattr(l1, attr), getattr(l2, attr))\n    def _test_process_with_implicit_code(\n        self,",
        "detail": "cla_backend.apps.cla_eventlog.tests.base",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_eventlog.tests.mommy_recipes",
        "description": "cla_backend.apps.cla_eventlog.tests.mommy_recipes",
        "peekOfCode": "log = Recipe(Log)",
        "detail": "cla_backend.apps.cla_eventlog.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "Add72workingHoursToContextCommandTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.tests.test_commands",
        "description": "cla_backend.apps.cla_eventlog.tests.test_commands",
        "peekOfCode": "class Add72workingHoursToContextCommandTestCase(CallCentreFixedOperatingHours, TestCase):\n    def setUp(self):\n        super(Add72workingHoursToContextCommandTestCase, self).setUp()\n        self.instance = Command()\n    def create_callback(self, requires_action_at):\n        case = make_recipe(\"legalaid.case\")\n        user = make_user()\n        make_recipe(\"call_centre.operator\", user=user)\n        event = event_registry.get_event(\"call_me_back\")()\n        event.get_log_code(case=case)",
        "detail": "cla_backend.apps.cla_eventlog.tests.test_commands",
        "documentation": {}
    },
    {
        "label": "TestEvent",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.tests.test_events",
        "description": "cla_backend.apps.cla_eventlog.tests.test_events",
        "peekOfCode": "class TestEvent(BaseEvent):\n    key = \"TEST_KEY\"\n    codes = {\n        \"TEST_CODE\": {\n            \"type\": LOG_TYPES.OUTCOME,\n            \"level\": LOG_LEVELS.HIGH,\n            \"selectable_by\": [],\n            \"description\": \"test code\",\n            \"stops_timer\": False,\n        }",
        "detail": "cla_backend.apps.cla_eventlog.tests.test_events",
        "documentation": {}
    },
    {
        "label": "BaseEventTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.tests.test_events",
        "description": "cla_backend.apps.cla_eventlog.tests.test_events",
        "peekOfCode": "class BaseEventTestCase(TestCase):\n    def setUp(self):\n        super(BaseEventTestCase, self).setUp()\n        self.dummy_case = make_recipe(\"legalaid.case\")\n        self.dummy_user = make_user()\n    def test_process_fails_with_wrong_code(self):\n        event = TestEvent()\n        self.assertRaises(\n            KeyError, event.process, case=self.dummy_case, code=\"wrong-code\", notes=\"\", created_by=self.dummy_user\n        )",
        "detail": "cla_backend.apps.cla_eventlog.tests.test_events",
        "documentation": {}
    },
    {
        "label": "ConsecutiveOutcomeCodesTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.tests.test_events",
        "description": "cla_backend.apps.cla_eventlog.tests.test_events",
        "peekOfCode": "class ConsecutiveOutcomeCodesTestCase(TestCase):\n    def setUp(self):\n        super(ConsecutiveOutcomeCodesTestCase, self).setUp()\n        self.dummy_case = make_recipe(\"legalaid.case\")\n        self.dummy_user = make_user()\n        self.log_attributes = dict(\n            case=self.dummy_case, code=\"FOO\", type=LOG_TYPES.OUTCOME, level=LOG_LEVELS.HIGH, created_by=self.dummy_user\n        )\n    def test_same_day_consecutive_outcome_code_not_allowed(self):\n        l1 = Log(**self.log_attributes)",
        "detail": "cla_backend.apps.cla_eventlog.tests.test_events",
        "documentation": {}
    },
    {
        "label": "SelectableEventsTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.tests.test_events",
        "description": "cla_backend.apps.cla_eventlog.tests.test_events",
        "peekOfCode": "class SelectableEventsTestCase(EventTestCaseMixin, TestCase):\n    def test_select_selectable_code(self):\n        # get dict {event_key: [list of selectable codes]}\n        selectable_events = event_registry.get_selectable_events(role=LOG_ROLES.OPERATOR)\n        for chosen_key, chosen_codes in selectable_events.items():\n            for chosen_code in chosen_codes:\n                # chosen key / code\n                event = event_registry.get_event(chosen_key)()\n                res = event.process(\n                    self.dummy_case, code=chosen_code, notes=\"selectable notes\", created_by=self.dummy_user",
        "detail": "cla_backend.apps.cla_eventlog.tests.test_events",
        "documentation": {}
    },
    {
        "label": "BaseCaseLogFormTestCaseMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.tests.test_forms",
        "description": "cla_backend.apps.cla_eventlog.tests.test_forms",
        "peekOfCode": "class BaseCaseLogFormTestCaseMixin(object):\n    FORM = None\n    def setUp(self):\n        super(BaseCaseLogFormTestCaseMixin, self).setUp()\n        self.user = make_user()\n    def get_default_data(self):\n        return {\"notes\": \"lorem ipsum\"}\n    def test_save_successfull(self):\n        self._test_save_successfull()\n    def _test_save_successfull(self, case=None, data=None):",
        "detail": "cla_backend.apps.cla_eventlog.tests.test_forms",
        "documentation": {}
    },
    {
        "label": "EventSpecificLogFormTestCaseMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.tests.test_forms",
        "description": "cla_backend.apps.cla_eventlog.tests.test_forms",
        "peekOfCode": "class EventSpecificLogFormTestCaseMixin(BaseCaseLogFormTestCaseMixin):\n    def get_default_data(self):\n        data = super(EventSpecificLogFormTestCaseMixin, self).get_default_data()\n        form = self.FORM(case=mock.MagicMock())\n        event_code = form.fields[\"event_code\"].choices[0][0]  # getting the first code\n        data[\"event_code\"] = event_code\n        return data\n    def test_invalid_event_code(self):\n        # test with invalid code\n        case = make_recipe(\"legalaid.case\")",
        "detail": "cla_backend.apps.cla_eventlog.tests.test_forms",
        "documentation": {}
    },
    {
        "label": "RegistryStartupChecksTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.tests.test_registry",
        "description": "cla_backend.apps.cla_eventlog.tests.test_registry",
        "peekOfCode": "class RegistryStartupChecksTestCase(TestCase):\n    def test_event_without_key_fails(self):\n        registry = EventRegistry()\n        class MyEvent(BaseEvent):\n            codes = {\"MY_CODE\": {\"type\": LOG_TYPES.SYSTEM, \"selectable_by\": [], \"description\": \"my code\"}}\n        self.assertRaises(ValueError, registry.register, MyEvent)\n    def test_event_without_codes_fails(self):\n        registry = EventRegistry()\n        class MyEvent(BaseEvent):\n            key = \"case\"",
        "detail": "cla_backend.apps.cla_eventlog.tests.test_registry",
        "documentation": {}
    },
    {
        "label": "EventAPIMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.tests.test_views",
        "description": "cla_backend.apps.cla_eventlog.tests.test_views",
        "peekOfCode": "class EventAPIMixin(object):\n    def get_event_key(self):\n        # getting the first event key in the registry as we don't know what's in there\n        return event_registry._registry.keys()[0]\n    def setUp(self):\n        super(EventAPIMixin, self).setUp()\n        self.detail_url = self.get_detail_url(self.get_event_key())\n    def get_detail_url(self, action):\n        return reverse(\"%s:event-detail\" % self.API_URL_NAMESPACE, args=(), kwargs={\"action\": action})\n    def test_methods_not_allowed(self):",
        "detail": "cla_backend.apps.cla_eventlog.tests.test_views",
        "documentation": {}
    },
    {
        "label": "ImplicitEventCodeViewTestCaseMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.tests.test_views",
        "description": "cla_backend.apps.cla_eventlog.tests.test_views",
        "peekOfCode": "class ImplicitEventCodeViewTestCaseMixin(object):\n    \"\"\"\n    This is for endpoints which mainly create implicit outcome after\n    an action (e.g. close case, accept case etc.).\n    The user is not given the possibility to specify an outcome code.\n    \"\"\"\n    NO_BODY_RESPONSE = True\n    def setUp(self):\n        super(ImplicitEventCodeViewTestCaseMixin, self).setUp()\n        self.url = self.get_url()",
        "detail": "cla_backend.apps.cla_eventlog.tests.test_views",
        "documentation": {}
    },
    {
        "label": "ExplicitEventCodeViewTestCaseMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.tests.test_views",
        "description": "cla_backend.apps.cla_eventlog.tests.test_views",
        "peekOfCode": "class ExplicitEventCodeViewTestCaseMixin(ImplicitEventCodeViewTestCaseMixin):\n    \"\"\"\n    This is for endpoints which create explicit outcomes after\n    an action (e.g. reject case etc.).\n    The user is given the possibility to specify an outcome code from a list of\n    valid ones.\n    \"\"\"\n    def get_event_code(self):\n        \"\"\"\n        Should return a __valid__ code for this endpoints.",
        "detail": "cla_backend.apps.cla_eventlog.tests.test_views",
        "documentation": {}
    },
    {
        "label": "LogAPIMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.tests.test_views",
        "description": "cla_backend.apps.cla_eventlog.tests.test_views",
        "peekOfCode": "class LogAPIMixin(NestedSimpleResourceAPIMixin):\n    LOOKUP_KEY = \"reference\"\n    API_URL_BASE_NAME = \"log\"\n    RESOURCE_RECIPE = \"cla_eventlog.log\"\n    LOOKUP_KEY = \"case_reference\"\n    PARENT_LOOKUP_KEY = \"reference\"\n    PARENT_RESOURCE_RECIPE = \"legalaid.case\"\n    PK_FIELD = \"case\"\n    ONE_TO_ONE_RESOURCE = False\n    def setup_resources(self):",
        "detail": "cla_backend.apps.cla_eventlog.tests.test_views",
        "documentation": {}
    },
    {
        "label": "LOG_LEVELS",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_eventlog.constants",
        "description": "cla_backend.apps.cla_eventlog.constants",
        "peekOfCode": "LOG_LEVELS = Choices(\n    # constant, db_id, friendly string\n    # Indicates the importance of the event.\n    # Events with level >= HIGH are denormalised on the\n    # case as well and 'mark' the progress of a case\n    # indirectly\n    (\"HIGH\", 29, \"HIGH\"),\n    (\"MODERATE\", 21, \"MODERATE\"),\n    (\"MINOR\", 11, \"MINOR\"),\n)",
        "detail": "cla_backend.apps.cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_TYPES",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_eventlog.constants",
        "description": "cla_backend.apps.cla_eventlog.constants",
        "peekOfCode": "LOG_TYPES = Choices(\n    # constant, db_id, friendly string\n    (\"OUTCOME\", \"outcome\", \"outcome\"),  # codes that CLA understands and uses. E.g. CLSP\n    (\"SYSTEM\", \"system\", \"system\"),  # system codes, somethimes shown to users as well. E.g. CASE_CREATED\n    (\"EVENT\", \"event\", \"event\"),\n)\nLOG_ROLES = Choices(\n    # constant, db_id, friendly string\n    # Not currently used.\n    (\"OPERATOR\", \"operator\", \"operator\"),",
        "detail": "cla_backend.apps.cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "LOG_ROLES",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_eventlog.constants",
        "description": "cla_backend.apps.cla_eventlog.constants",
        "peekOfCode": "LOG_ROLES = Choices(\n    # constant, db_id, friendly string\n    # Not currently used.\n    (\"OPERATOR\", \"operator\", \"operator\"),\n    (\"SPECIALIST\", \"specialist\", \"special\"),\n)",
        "detail": "cla_backend.apps.cla_eventlog.constants",
        "documentation": {}
    },
    {
        "label": "BaseEvent",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.events",
        "description": "cla_backend.apps.cla_eventlog.events",
        "peekOfCode": "class BaseEvent(object):\n    \"\"\"\n    Subclass this when defining new events.\n    E.g.\n        class MyEvent(BaseEvent):\n            key = 'my_key'\n            codes = {\n                'CODE1': {\n                    'type': LOG_TYPES.OUTCOME,\n                    'level': LOG_LEVELS.HIGH,",
        "detail": "cla_backend.apps.cla_eventlog.events",
        "documentation": {}
    },
    {
        "label": "None_if_owned_by_operator",
        "kind": 2,
        "importPath": "cla_backend.apps.cla_eventlog.events",
        "description": "cla_backend.apps.cla_eventlog.events",
        "peekOfCode": "def None_if_owned_by_operator(case):\n    if case.requires_action_by_operator:\n        return None\n    return case.requires_action_by\ndef None_if_owned_by_op_or_op_manager(case):\n    if case.requires_action_by_operator:\n        return None\n    if case.requires_action_by_operator_manager:\n        return None\n    return case.requires_action_by",
        "detail": "cla_backend.apps.cla_eventlog.events",
        "documentation": {}
    },
    {
        "label": "None_if_owned_by_op_or_op_manager",
        "kind": 2,
        "importPath": "cla_backend.apps.cla_eventlog.events",
        "description": "cla_backend.apps.cla_eventlog.events",
        "peekOfCode": "def None_if_owned_by_op_or_op_manager(case):\n    if case.requires_action_by_operator:\n        return None\n    if case.requires_action_by_operator_manager:\n        return None\n    return case.requires_action_by\nclass BaseEvent(object):\n    \"\"\"\n    Subclass this when defining new events.\n    E.g.",
        "detail": "cla_backend.apps.cla_eventlog.events",
        "documentation": {}
    },
    {
        "label": "BaseCaseLogForm",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.forms",
        "description": "cla_backend.apps.cla_eventlog.forms",
        "peekOfCode": "class BaseCaseLogForm(forms.Form):\n    \"\"\"\n    Use this class if your event is of one of these types:\n        1. one code event where something happens and you want an event\n            log to get created\n        2. implicit code event where something happens and the system\n            chooses which code to use.\n            In this case, you need to override the `get_kwargs` method\n            and add your logic. The same kwargs will be passed to the\n            `Event.get_log_code`.",
        "detail": "cla_backend.apps.cla_eventlog.forms",
        "documentation": {}
    },
    {
        "label": "EventSpecificLogForm",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.forms",
        "description": "cla_backend.apps.cla_eventlog.forms",
        "peekOfCode": "class EventSpecificLogForm(BaseCaseLogForm):\n    \"\"\"\n    Use this class if your event is a selectable code event where\n    the client chooses which code to use.\n    \"\"\"\n    event_code = forms.ChoiceField(choices=())\n    def __init__(self, *args, **kwargs):\n        super(EventSpecificLogForm, self).__init__(*args, **kwargs)\n        self.fields[\"event_code\"].choices = self.get_event_code_choices()\n    def get_event_code_choices(self):",
        "detail": "cla_backend.apps.cla_eventlog.forms",
        "documentation": {}
    },
    {
        "label": "SelectableEventLogForm",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.forms",
        "description": "cla_backend.apps.cla_eventlog.forms",
        "peekOfCode": "class SelectableEventLogForm(EventSpecificLogForm):\n    \"\"\"\n    Not currently used.\n    \"\"\"\n    ROLE = None\n    def get_role(self):\n        if self.ROLE:\n            return self.ROLE\n        else:\n            raise NotImplementedError(\"Role must be set or this method must \" \"be overwritten in a subclass\")",
        "detail": "cla_backend.apps.cla_eventlog.forms",
        "documentation": {}
    },
    {
        "label": "Log",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.models",
        "description": "cla_backend.apps.cla_eventlog.models",
        "peekOfCode": "class Log(TimeStampedModel):\n    case = models.ForeignKey(\"legalaid.Case\")\n    timer = models.ForeignKey(\"timer.Timer\", null=True, blank=True)\n    code = models.CharField(db_index=True, max_length=50)\n    type = models.CharField(db_index=True, choices=LOG_TYPES.CHOICES, max_length=20)\n    level = models.PositiveSmallIntegerField(db_index=True, choices=LOG_LEVELS.CHOICES)\n    created_by = models.ForeignKey(settings.AUTH_USER_MODEL)\n    notes = models.TextField(null=True, blank=True)\n    # patch is a json field with the following structure:\n    # {",
        "detail": "cla_backend.apps.cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "ComplaintLog",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.models",
        "description": "cla_backend.apps.cla_eventlog.models",
        "peekOfCode": "class ComplaintLog(Log):\n    class Meta(Log.Meta):\n        proxy = True\n    def __unicode__(self):\n        return u\"%s: %s - %s:%s\" % (self.complaint, self.case, self.type, self.code)\n    @property\n    def complaint(self):\n        return self.content_object",
        "detail": "cla_backend.apps.cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_eventlog.models",
        "description": "cla_backend.apps.cla_eventlog.models",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Log(TimeStampedModel):\n    case = models.ForeignKey(\"legalaid.Case\")\n    timer = models.ForeignKey(\"timer.Timer\", null=True, blank=True)\n    code = models.CharField(db_index=True, max_length=50)\n    type = models.CharField(db_index=True, choices=LOG_TYPES.CHOICES, max_length=20)\n    level = models.PositiveSmallIntegerField(db_index=True, choices=LOG_LEVELS.CHOICES)\n    created_by = models.ForeignKey(settings.AUTH_USER_MODEL)\n    notes = models.TextField(null=True, blank=True)\n    # patch is a json field with the following structure:",
        "detail": "cla_backend.apps.cla_eventlog.models",
        "documentation": {}
    },
    {
        "label": "EventRegistry",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.registry",
        "description": "cla_backend.apps.cla_eventlog.registry",
        "peekOfCode": "class EventRegistry(object):\n    def __init__(self):\n        self._registry = {}\n    def register(self, event_cls):\n        # checking that codes is not empty\n        if not event_cls.codes:\n            raise ValueError(\"%s does not define any codes. Please add codes={} to the class\" % event_cls.__name__)\n        if not event_cls.key:\n            raise ValueError(\n                \"%s does not define any key. Please add key='<action-key>' to the class\" % event_cls.__name__",
        "detail": "cla_backend.apps.cla_eventlog.registry",
        "documentation": {}
    },
    {
        "label": "is_code_valid",
        "kind": 2,
        "importPath": "cla_backend.apps.cla_eventlog.registry",
        "description": "cla_backend.apps.cla_eventlog.registry",
        "peekOfCode": "def is_code_valid(code):\n    required_keys = {\n        \"type\": basestring,\n        \"level\": int,\n        \"selectable_by\": list,\n        \"description\": basestring,\n        \"stops_timer\": bool,\n    }\n    all_keys = required_keys.keys() + [\"set_requires_action_by\", \"order\"]\n    for key, type_ in required_keys.items():",
        "detail": "cla_backend.apps.cla_eventlog.registry",
        "documentation": {}
    },
    {
        "label": "event_registry",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_eventlog.registry",
        "description": "cla_backend.apps.cla_eventlog.registry",
        "peekOfCode": "event_registry = EventRegistry()",
        "detail": "cla_backend.apps.cla_eventlog.registry",
        "documentation": {}
    },
    {
        "label": "LogSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.serializers",
        "description": "cla_backend.apps.cla_eventlog.serializers",
        "peekOfCode": "class LogSerializerBase(ClaModelSerializer):\n    code = serializers.CharField(read_only=True)\n    created_by = serializers.CharField(read_only=True, source=\"created_by.username\")\n    created = serializers.DateTimeField(read_only=True)\n    level = serializers.CharField(read_only=True)\n    type = serializers.CharField(read_only=True)\n    timer_id = serializers.IntegerField(read_only=True)\n    notes = serializers.CharField(read_only=True)\n    patch = JSONField()\n    class Meta(object):",
        "detail": "cla_backend.apps.cla_eventlog.serializers",
        "documentation": {}
    },
    {
        "label": "BaseEventViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.views",
        "description": "cla_backend.apps.cla_eventlog.views",
        "peekOfCode": "class BaseEventViewSet(viewsets.ViewSetMixin, views.APIView):\n    \"\"\"\n    This ViewSet defines two endpoints:\n        /event/<event_key>/ : returns a list of codes by event_key\n        /event/selectable/  : returns a list of selectable codes\n    This is not DRF standard but it's a good way to group the logic behind\n    events using ViewSets.\n    \"\"\"\n    lookup_field = \"action\"\n    def retrieve(self, request, *args, **kwargs):",
        "detail": "cla_backend.apps.cla_eventlog.views",
        "documentation": {}
    },
    {
        "label": "BaseLogViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_eventlog.views",
        "description": "cla_backend.apps.cla_eventlog.views",
        "peekOfCode": "class BaseLogViewSet(NestedGenericModelMixin, mixins.ListModelMixin, CompatGenericViewSet):\n    PARENT_FIELD = \"log_set\"\n    lookup_field = \"reference\"\n    serializer_class = LogSerializerBase\n    model = Log\n    queryset = Log.objects.all()\n    def get_queryset(self):\n        qs = super(BaseLogViewSet, self).get_queryset()\n        return qs.filter(level__gt=LOG_LEVELS.MINOR)",
        "detail": "cla_backend.apps.cla_eventlog.views",
        "documentation": {}
    },
    {
        "label": "StaffAdminForm",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.admin.forms",
        "description": "cla_backend.apps.cla_provider.admin.forms",
        "peekOfCode": "class StaffAdminForm(OneToOneUserAdminForm):\n    chs_password = ReadOnlyPasswordHashField(\n        widget=PasswordInput(attrs={\"class\": \"vTextField\"}),\n        required=False,\n        help_text=\"Password can only be set, not viewed.\",\n    )\n    chs_organisation = forms.CharField(initial=None, required=False, widget=widgets.AdminTextInputWidget)\n    chs_user = forms.CharField(initial=None, required=False, widget=widgets.AdminTextInputWidget)\n    def clean(self):\n        data = self.cleaned_data",
        "detail": "cla_backend.apps.cla_provider.admin.forms",
        "documentation": {}
    },
    {
        "label": "ProviderAllocationInlineFormset",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.admin.formsets",
        "description": "cla_backend.apps.cla_provider.admin.formsets",
        "peekOfCode": "class ProviderAllocationInlineFormset(forms.models.BaseInlineFormSet):\n    def clean(self):\n        # if any form in error => skip\n        if any([not form.is_valid() for form in self.forms]):\n            return\n        categories = []\n        for form in self.forms:\n            category = form.cleaned_data.get(\"category\")\n            if form.cleaned_data.get(\"DELETE\"):\n                continue",
        "detail": "cla_backend.apps.cla_provider.admin.formsets",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.management.commands.provider_allocation",
        "description": "cla_backend.apps.cla_provider.management.commands.provider_allocation",
        "peekOfCode": "class Command(BaseCommand):\n    \"\"\"\n    ./manage.py provider_allocation [from_date 2015-11-02]\n    \"\"\"\n    help = \"Gets provider allocations per category for period with no \" \"weighting changes\"\n    def handle(self, *args, **kwargs):\n        if len(args):\n            from_date = datetime.datetime.strptime(args[0], \"%Y-%m-%d\").replace(tzinfo=pytz.utc)\n        else:\n            from_date = datetime.datetime.utcnow().replace(tzinfo=pytz.utc)",
        "detail": "cla_backend.apps.cla_provider.management.commands.provider_allocation",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.management.commands.test_for_call_bunching",
        "description": "cla_backend.apps.cla_provider.management.commands.test_for_call_bunching",
        "peekOfCode": "class Command(BaseCommand):\n    \"\"\"\n    ./manage.py test_for_call_bunching [minutes] [mnumber_consecutive]\n    \"\"\"\n    help = (\n        \"Goes through all calls and detects if any provider has had 3 \"\n        \"consecutive calls allocated for the same category in a row\"\n    )\n    def handle(self, *args, **kwargs):\n        minutes = 5",
        "detail": "cla_backend.apps.cla_provider.management.commands.test_for_call_bunching",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.migrations.0001_initial",
        "description": "cla_backend.apps.cla_provider.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [migrations.swappable_dependency(settings.AUTH_USER_MODEL)]\n    operations = [\n        migrations.CreateModel(\n            name=\"CSVUpload\",\n            fields=[\n                (\"id\", models.AutoField(verbose_name=\"ID\", serialize=False, auto_created=True, primary_key=True)),\n                (\n                    \"created\",\n                    model_utils.fields.AutoCreatedField(",
        "detail": "cla_backend.apps.cla_provider.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.migrations.0002_auto_20150127_1536",
        "description": "cla_backend.apps.cla_provider.migrations.0002_auto_20150127_1536",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"cla_provider\", \"0001_initial\"), (\"legalaid\", \"0001_initial\")]\n    operations = [\n        migrations.AddField(\n            model_name=\"providerpreallocation\",\n            name=\"case\",\n            field=models.ForeignKey(to=\"legalaid.Case\"),\n            preserve_default=True,\n        ),\n        migrations.AddField(",
        "detail": "cla_backend.apps.cla_provider.migrations.0002_auto_20150127_1536",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.migrations.0003_auto_20221122_1029",
        "description": "cla_backend.apps.cla_provider.migrations.0003_auto_20221122_1029",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"cla_provider\", \"0002_auto_20150127_1536\")]\n    operations = [migrations.AlterUniqueTogether(name=\"staff\", unique_together=set([]))]",
        "detail": "cla_backend.apps.cla_provider.migrations.0003_auto_20221122_1029",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.migrations.0003_auto_20230405_1449",
        "description": "cla_backend.apps.cla_provider.migrations.0003_auto_20230405_1449",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"cla_provider\", \"0003_auto_20221122_1029\")]\n    operations = [\n        migrations.AlterField(\n            model_name=\"provider\",\n            name=\"name\",\n            field=models.CharField(unique=True, max_length=255),\n            preserve_default=True,\n        )\n    ]",
        "detail": "cla_backend.apps.cla_provider.migrations.0003_auto_20230405_1449",
        "documentation": {}
    },
    {
        "label": "AdaptationsMetadataTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_adaptations_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_adaptations_api",
        "peekOfCode": "class AdaptationsMetadataTestCase(CLAProviderAuthBaseApiTestMixin, AdaptationsMetadataAPIMixin, APITestCase):\n    pass\nclass AdaptationsDetailsTestCase(CLAProviderAuthBaseApiTestMixin, AdaptationsDetailsAPIMixin, APITestCase):\n    def make_parent_resource(self, **kwargs):\n        kwargs.update({\"provider\": self.provider, \"requires_action_by\": REQUIRES_ACTION_BY.PROVIDER})\n        return super(AdaptationsDetailsTestCase, self).make_parent_resource(**kwargs)\n    # SECURITY\n    def test_get_not_found_if_not_belonging_to_provider(self):\n        self.parent_resource.provider = None\n        self.parent_resource.requires_action_by = REQUIRES_ACTION_BY.OPERATOR",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_adaptations_api",
        "documentation": {}
    },
    {
        "label": "AdaptationsDetailsTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_adaptations_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_adaptations_api",
        "peekOfCode": "class AdaptationsDetailsTestCase(CLAProviderAuthBaseApiTestMixin, AdaptationsDetailsAPIMixin, APITestCase):\n    def make_parent_resource(self, **kwargs):\n        kwargs.update({\"provider\": self.provider, \"requires_action_by\": REQUIRES_ACTION_BY.PROVIDER})\n        return super(AdaptationsDetailsTestCase, self).make_parent_resource(**kwargs)\n    # SECURITY\n    def test_get_not_found_if_not_belonging_to_provider(self):\n        self.parent_resource.provider = None\n        self.parent_resource.requires_action_by = REQUIRES_ACTION_BY.OPERATOR\n        self.parent_resource.save()\n        response = self.client.get(self.detail_url, format=\"json\", HTTP_AUTHORIZATION=self.get_http_authorization())",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_adaptations_api",
        "documentation": {}
    },
    {
        "label": "BaseCaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "peekOfCode": "class BaseCaseTestCase(CLAProviderAuthBaseApiTestMixin, BaseFullCaseAPIMixin, APITestCase):\n    @property\n    def response_keys(self):\n        return [\n            \"eligibility_check\",\n            \"personal_details\",\n            \"reference\",\n            \"created\",\n            \"modified\",\n            \"created_by\",",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "CaseGeneralTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "peekOfCode": "class CaseGeneralTestCase(BaseCaseTestCase, FullCaseAPIMixin):\n    def test_methods_not_allowed(self):\n        \"\"\"\n        Ensure that we can't POST, PUT or DELETE\n        \"\"\"\n        # LIST\n        self._test_delete_not_allowed(self.list_url)\n        self._test_post_not_allowed(self.list_url)\n        # DETAIL\n        self._test_delete_not_allowed(self.detail_url)",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "SearchCaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "peekOfCode": "class SearchCaseTestCase(BaseSearchCaseAPIMixin, BaseCaseTestCase):\n    # person_ref PARAM\n    def test_list_with_person_ref_param(self):\n        \"\"\"\n        Testing that if ?person_ref param is specified, it will only return\n        cases for that person.\n        This is different from the related call_centre test as it\n        has to ignore cases not currently assigned to the provider\n        \"\"\"\n        Case.objects.all().delete()",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "FilteredSearchCaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "peekOfCode": "class FilteredSearchCaseTestCase(BaseCaseTestCase):\n    def setUp(self):\n        \"\"\"\n            obj1 on operator queue => always ignored\n            obj2 assigned to different provider => always ignored\n            obj3 assigned to provider => new\n            obj4 assigned and opened by provider => opened\n            obj5 assigned to provider but marked as 'IRCB' => always ignored\n            obj6 accepted by provider => accepted\n            obj7 closed by provider => closed",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "UpdateCaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "peekOfCode": "class UpdateCaseTestCase(BaseUpdateCaseTestCase, BaseCaseTestCase):\n    def test_patch_provider_notes_allowed(self):\n        \"\"\"\n        Test that provider can post provider notes up to max character limit\n        \"\"\"\n        self.assertEqual(CaseNotesHistory.objects.all().count(), 0)\n        max_character_limit = \"A\" * CaseSerializer().fields[\"provider_notes\"].max_length\n        response = self.client.patch(\n            self.detail_url,\n            data={\"provider_notes\": max_character_limit},",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "RejectCaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "peekOfCode": "class RejectCaseTestCase(ExplicitEventCodeViewTestCaseMixin, BaseCaseTestCase):\n    def get_event_code(self):\n        form = RejectCaseForm(case=mock.MagicMock())\n        return form.fields[\"event_code\"].choices[0][0]\n    def get_url(self, reference=None):\n        reference = reference or self.resource.reference\n        return reverse(\"cla_provider:case-reject\", args=(), kwargs={\"reference\": reference})\n    def _test_provider_closed(self, code, expected_None):\n        data = self.get_default_post_data()\n        data[\"event_code\"] = code",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "AcceptCaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "peekOfCode": "class AcceptCaseTestCase(ImplicitEventCodeViewTestCaseMixin, BaseCaseTestCase):\n    NO_BODY_RESPONSE = False\n    def get_url(self, reference=None):\n        reference = reference or self.resource.reference\n        return reverse(\"cla_provider:case-accept\", args=(), kwargs={\"reference\": reference})\nclass CloseCaseTestCase(ImplicitEventCodeViewTestCaseMixin, BaseCaseTestCase):\n    def get_url(self, reference=None):\n        reference = reference or self.resource.reference\n        return reverse(\"cla_provider:case-close\", args=(), kwargs={\"reference\": reference})\n    def test_successful(self):",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "CloseCaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "peekOfCode": "class CloseCaseTestCase(ImplicitEventCodeViewTestCaseMixin, BaseCaseTestCase):\n    def get_url(self, reference=None):\n        reference = reference or self.resource.reference\n        return reverse(\"cla_provider:case-close\", args=(), kwargs={\"reference\": reference})\n    def test_successful(self):\n        self.assertEqual(self.resource.provider_closed, None)\n        super(CloseCaseTestCase, self).test_successful()\n        self.resource = self.resource.__class__.objects.get(pk=self.resource.pk)\n        self.assertNotEqual(self.resource.provider_closed, None)\nclass ReopenCaseTestCase(ImplicitEventCodeViewTestCaseMixin, BaseCaseTestCase):",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "ReopenCaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "peekOfCode": "class ReopenCaseTestCase(ImplicitEventCodeViewTestCaseMixin, BaseCaseTestCase):\n    NO_BODY_RESPONSE = False\n    def setUp(self):\n        super(ReopenCaseTestCase, self).setUp()\n        self.resource.provider_closed = timezone.now()\n        self.resource.save()\n    def get_url(self, reference=None):\n        reference = reference or self.resource.reference\n        return reverse(\"cla_provider:case-reopen\", args=(), kwargs={\"reference\": reference})\n    def test_fails_if_case_not_closed(self):",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "SplitCaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "peekOfCode": "class SplitCaseTestCase(ImplicitEventCodeViewTestCaseMixin, BaseCaseTestCase):\n    def setUp(self):\n        super(SplitCaseTestCase, self).setUp()\n    def get_default_post_data(self):\n        category = make_recipe(\"legalaid.category\")\n        matter_type1 = make_recipe(\"legalaid.matter_type1\", category=category)\n        matter_type2 = make_recipe(\"legalaid.matter_type2\", category=category)\n        return {\n            \"category\": category.code,\n            \"matter_type1\": matter_type1.code,",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_case_api",
        "documentation": {}
    },
    {
        "label": "CaseNotesHistoryViewSetTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_case_notes_history_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_case_notes_history_api",
        "peekOfCode": "class CaseNotesHistoryViewSetTestCase(CLAProviderAuthBaseApiTestMixin, CaseNotesHistoryAPIMixin, APITestCase):\n    def make_parent_resource(self, **kwargs):\n        kwargs.update({\"provider\": self.provider, \"requires_action_by\": REQUIRES_ACTION_BY.PROVIDER})\n        return super(CaseNotesHistoryViewSetTestCase, self).make_parent_resource(**kwargs)",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_case_notes_history_api",
        "documentation": {}
    },
    {
        "label": "CategoryTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_category_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_category_api",
        "peekOfCode": "class CategoryTestCase(CLAProviderAuthBaseApiTestMixin, CategoryAPIMixin, APITestCase):\n    pass",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_category_api",
        "documentation": {}
    },
    {
        "label": "CSVUploadAPIMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_csvupload_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_csvupload_api",
        "peekOfCode": "class CSVUploadAPIMixin(SimpleResourceAPIMixin):\n    RESOURCE_RECIPE = \"cla_provider.csvupload_case\"\n    API_URL_BASE_NAME = \"csvupload\"\n    @property\n    def response_keys(self):\n        return [\"id\", \"provider\", \"created_by\", \"comment\", \"rows\", \"month\", \"created\", \"modified\"]\n    @property\n    def response_keys_details(self):\n        keys = self.response_keys[:]\n        keys.remove(\"rows\")",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_csvupload_api",
        "documentation": {}
    },
    {
        "label": "CSVUploadTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_csvupload_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_csvupload_api",
        "peekOfCode": "class CSVUploadTestCase(CSVUploadAPIMixin, CLAProviderAuthBaseApiTestMixin, APITestCase):\n    def setUp(self):\n        super(CSVUploadTestCase, self).setUp()\n        self.wrong_user = User.objects.create_user(\"wrong user\", \"wr@ng.user\", \"password\")\n        self.wrong_provider = make_recipe(\"cla_provider.provider\")\n        self.wrong_provider.staff_set.add(Staff(user=self.wrong_user, is_manager=True))\n        self.wrong_provider.save()\n        expiry_date = datetime.datetime.now() + datetime.timedelta(days=2)\n        # Create an access token from wrong user\n        self.wrong_staff_token = AccessToken.objects.create(",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_csvupload_api",
        "documentation": {}
    },
    {
        "label": "ProviderCSVValidatorTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_csvupload_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_csvupload_api",
        "peekOfCode": "class ProviderCSVValidatorTestCase(unittest.TestCase):\n    def setUp(self):\n        contract_2013_format_data = v.contract_2013_validators_for_original_field_order.copy()\n        contract_2013_format_data[\"CLA Reference Number\"] = u\"3333333\"\n        contract_2013_format_data[\"Client Ref\"] = u\"0001\"\n        contract_2013_format_data[\"Account Number\"] = u\"2B222B\"\n        contract_2013_format_data[\"First Name\"] = u\"A N Other\"\n        contract_2013_format_data[\"Surname\"] = u\"Corgi\"\n        contract_2013_format_data[\"DOB\"] = u\"02/01/2014\"\n        contract_2013_format_data[\"Age Range\"] = u\"E\"",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_csvupload_api",
        "documentation": {}
    },
    {
        "label": "DependsOnDecoratorTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_csvupload_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_csvupload_api",
        "peekOfCode": "class DependsOnDecoratorTestCase(unittest.TestCase):\n    def test_method_called(self):\n        class Test1(object):\n            @v.depends_on(\"a\", check=v.value_is_truthy)\n            def do_something(self, d):\n                return 1\n        inst = Test1()\n        self.assertEqual(1, inst.do_something({\"a\": True}))\n    def test_method_called_default_check_is_TRUTHY(self):\n        class Test1(object):",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_csvupload_api",
        "documentation": {}
    },
    {
        "label": "DiagnosisTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_diagnosis_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_diagnosis_api",
        "peekOfCode": "class DiagnosisTestCase(DiagnosisAPIMixin, CLAProviderAuthBaseApiTestMixin, APITestCase):\n    def make_parent_resource(self, **kwargs):\n        kwargs.update({\"provider\": self.provider, \"requires_action_by\": REQUIRES_ACTION_BY.PROVIDER})\n        return super(DiagnosisTestCase, self).make_parent_resource(**kwargs)",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_diagnosis_api",
        "documentation": {}
    },
    {
        "label": "EligibilityCheckTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_eligibility_check_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_eligibility_check_api",
        "peekOfCode": "class EligibilityCheckTestCase(CLAProviderAuthBaseApiTestMixin, NestedEligibilityCheckAPIMixin, APITestCase):\n    LOOKUP_KEY = \"case_reference\"\n    @property\n    def response_keys(self):\n        return [\n            \"reference\",\n            \"category\",\n            \"notes\",\n            \"your_problem_notes\",\n            \"property_set\",",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_eligibility_check_api",
        "documentation": {}
    },
    {
        "label": "EventViewSetTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_event_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_event_api",
        "peekOfCode": "class EventViewSetTestCase(CLAProviderAuthBaseApiTestMixin, EventAPIMixin, APITestCase):\n    pass",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_event_api",
        "documentation": {}
    },
    {
        "label": "FeedbackAPIMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_feedback_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_feedback_api",
        "peekOfCode": "class FeedbackAPIMixin(NestedSimpleResourceAPIMixin):\n    LOOKUP_KEY = \"case_reference\"\n    RESOURCE_RECIPE = \"cla_provider.feedback\"\n    API_URL_BASE_NAME = \"feedback\"\n    PARENT_LOOKUP_KEY = \"reference\"\n    PARENT_RESOURCE_RECIPE = \"legalaid.case\"\n    PK_FIELD = \"case\"\n    ONE_TO_ONE_RESOURCE = False\n    def make_resource(self, **kwargs):\n        kwargs.update({\"created_by\": self.user.staff})",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_feedback_api",
        "documentation": {}
    },
    {
        "label": "FeedbackAPITestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_feedback_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_feedback_api",
        "peekOfCode": "class FeedbackAPITestCase(FeedbackAPIMixin, CLAProviderAuthBaseApiTestMixin, APITestCase):\n    def test_patch_comment_allowed(self):\n        comment = \"test\"\n        response = self.client.patch(\n            self.detail_url, data={\"comment\": comment}, format=\"json\", HTTP_AUTHORIZATION=self.get_http_authorization()\n        )\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(response.data[\"comment\"], comment)\n    def test_create_adds_current_user_as_created_by(self):\n        created = self._create(data={\"comment\": \"qqq\", \"issue\": \"OTHR\"}, url=self.list_url)",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_feedback_api",
        "documentation": {}
    },
    {
        "label": "LogViewSetTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_log_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_log_api",
        "peekOfCode": "class LogViewSetTestCase(CLAProviderAuthBaseApiTestMixin, LogAPIMixin, APITestCase):\n    def make_parent_resource(self, **kwargs):\n        kwargs.update({\"provider\": self.provider, \"requires_action_by\": REQUIRES_ACTION_BY.PROVIDER})\n        return super(LogViewSetTestCase, self).make_parent_resource(**kwargs)\n    def test_get_404_if_not_access_to_case(self):\n        other_provider = make_recipe(\"cla_provider.provider\")\n        self.parent_resource.provider = other_provider\n        self.parent_resource.save()\n        response = self.client.get(self.list_url, HTTP_AUTHORIZATION=self.get_http_authorization())\n        self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND)",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_log_api",
        "documentation": {}
    },
    {
        "label": "PersonalDetailsTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_personal_details_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_personal_details_api",
        "peekOfCode": "class PersonalDetailsTestCase(CLAProviderAuthBaseApiTestMixin, PersonalDetailsAPIMixin, APITestCase):\n    def make_parent_resource(self, **kwargs):\n        kwargs.update({\"provider\": self.provider, \"requires_action_by\": REQUIRES_ACTION_BY.PROVIDER})\n        return super(PersonalDetailsTestCase, self).make_parent_resource(**kwargs)\n    # SECURITY\n    def test_get_not_found_if_not_belonging_to_provider(self):\n        self.parent_resource.provider = None\n        self.parent_resource.requires_action_by = REQUIRES_ACTION_BY.OPERATOR\n        self.parent_resource.save()\n        response = self.client.get(self.detail_url, format=\"json\", HTTP_AUTHORIZATION=self.get_http_authorization())",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_personal_details_api",
        "documentation": {}
    },
    {
        "label": "ProviderExtractTests",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_provider_extract_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_provider_extract_api",
        "peekOfCode": "class ProviderExtractTests(CLAProviderAuthBaseApiTestMixin, ProviderExtractAPIMixin, APITestCase):\n    def test_contents_is_xmlish(self):\n        \"\"\"\n        The extract we're copying isn't valid XML but we can still check that the\n        extract we're sending is somewhat valid XML.\n        \"\"\"\n        response = self.client.post(self.detail_url, data=self.get_valid_post_data(CHSCRN=self.case.reference))\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        o = objectify.fromstring(response.content)\n        self.assertListEqual(o.attrib.keys(), [\"CRN\", \"CaseCreated\"])",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_provider_extract_api",
        "documentation": {}
    },
    {
        "label": "ThirdPartyDetailsTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_third_party_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_third_party_api",
        "peekOfCode": "class ThirdPartyDetailsTestCase(CLAProviderAuthBaseApiTestMixin, ThirdPartyDetailsApiMixin, APITestCase):\n    def make_parent_resource(self, **kwargs):\n        kwargs.update({\"provider\": self.provider, \"requires_action_by\": REQUIRES_ACTION_BY.PROVIDER})\n        return super(ThirdPartyDetailsTestCase, self).make_parent_resource(**kwargs)\n    # SECURITY\n    def test_get_not_found_if_not_belonging_to_provider(self):\n        self.parent_resource.provider = None\n        self.parent_resource.requires_action_by = REQUIRES_ACTION_BY.OPERATOR\n        self.parent_resource.save()\n        response = self.client.get(self.detail_url, format=\"json\", HTTP_AUTHORIZATION=self.get_http_authorization())",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_third_party_api",
        "documentation": {}
    },
    {
        "label": "UserTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.api.test_user_api",
        "description": "cla_backend.apps.cla_provider.tests.api.test_user_api",
        "peekOfCode": "class UserTestCase(CLAProviderAuthBaseApiTestMixin, UserAPIMixin, APITestCase):\n    def assertUserEqual(self, data):\n        _data = data.copy()\n        del _data[\"provider\"][\"id\"]\n        self.assertDictContainsSubset(\n            {\n                \"username\": u\"john\",\n                \"first_name\": u\"\",\n                \"last_name\": u\"\",\n                \"email\": u\"lennon@thebeatles.com\",",
        "detail": "cla_backend.apps.cla_provider.tests.api.test_user_api",
        "documentation": {}
    },
    {
        "label": "provider",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_provider.tests.mommy_recipes",
        "description": "cla_backend.apps.cla_provider.tests.mommy_recipes",
        "peekOfCode": "provider = Recipe(Provider, name=seq(\"Name\"))\nstaff = Recipe(Staff)\noutofhoursrota = Recipe(OutOfHoursRota)\nprovider_allocation = Recipe(ProviderAllocation)\nfeedback = Recipe(Feedback, created_by=foreign_key(staff))\ncsvupload_determination = Recipe(\n    CSVUpload,\n    body=[\n        u\"2222222\",\n        u\"0000\",",
        "detail": "cla_backend.apps.cla_provider.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "staff",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_provider.tests.mommy_recipes",
        "description": "cla_backend.apps.cla_provider.tests.mommy_recipes",
        "peekOfCode": "staff = Recipe(Staff)\noutofhoursrota = Recipe(OutOfHoursRota)\nprovider_allocation = Recipe(ProviderAllocation)\nfeedback = Recipe(Feedback, created_by=foreign_key(staff))\ncsvupload_determination = Recipe(\n    CSVUpload,\n    body=[\n        u\"2222222\",\n        u\"0000\",\n        u\"1A111A\",",
        "detail": "cla_backend.apps.cla_provider.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "outofhoursrota",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_provider.tests.mommy_recipes",
        "description": "cla_backend.apps.cla_provider.tests.mommy_recipes",
        "peekOfCode": "outofhoursrota = Recipe(OutOfHoursRota)\nprovider_allocation = Recipe(ProviderAllocation)\nfeedback = Recipe(Feedback, created_by=foreign_key(staff))\ncsvupload_determination = Recipe(\n    CSVUpload,\n    body=[\n        u\"2222222\",\n        u\"0000\",\n        u\"1A111A\",\n        u\"A\",",
        "detail": "cla_backend.apps.cla_provider.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "provider_allocation",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_provider.tests.mommy_recipes",
        "description": "cla_backend.apps.cla_provider.tests.mommy_recipes",
        "peekOfCode": "provider_allocation = Recipe(ProviderAllocation)\nfeedback = Recipe(Feedback, created_by=foreign_key(staff))\ncsvupload_determination = Recipe(\n    CSVUpload,\n    body=[\n        u\"2222222\",\n        u\"0000\",\n        u\"1A111A\",\n        u\"A\",\n        u\"Corgi\",",
        "detail": "cla_backend.apps.cla_provider.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "feedback",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_provider.tests.mommy_recipes",
        "description": "cla_backend.apps.cla_provider.tests.mommy_recipes",
        "peekOfCode": "feedback = Recipe(Feedback, created_by=foreign_key(staff))\ncsvupload_determination = Recipe(\n    CSVUpload,\n    body=[\n        u\"2222222\",\n        u\"0000\",\n        u\"1A111A\",\n        u\"A\",\n        u\"Corgi\",\n        u\"01/01/1901\",",
        "detail": "cla_backend.apps.cla_provider.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "csvupload_determination",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_provider.tests.mommy_recipes",
        "description": "cla_backend.apps.cla_provider.tests.mommy_recipes",
        "peekOfCode": "csvupload_determination = Recipe(\n    CSVUpload,\n    body=[\n        u\"2222222\",\n        u\"0000\",\n        u\"1A111A\",\n        u\"A\",\n        u\"Corgi\",\n        u\"01/01/1901\",\n        u\"D\",",
        "detail": "cla_backend.apps.cla_provider.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "csvupload_case",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_provider.tests.mommy_recipes",
        "description": "cla_backend.apps.cla_provider.tests.mommy_recipes",
        "peekOfCode": "csvupload_case = Recipe(\n    CSVUpload,\n    body=[\n        [\n            u\"3333333\",\n            u\"0001\",\n            u\"2B222B\",\n            u\"A N Other\",\n            u\"Corgi\",\n            u\"02/01/1901\",",
        "detail": "cla_backend.apps.cla_provider.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "LegacyCHSAuthenticationTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.test_auth",
        "description": "cla_backend.apps.cla_provider.tests.test_auth",
        "peekOfCode": "class LegacyCHSAuthenticationTestCase(CLAProviderAuthBaseApiTestMixin, TestCase):\n    def setUp(self):\n        super(LegacyCHSAuthenticationTestCase, self).setUp()\n        self.staff = self.user.staff\n        self.staff.set_chs_password(\"password\")\n        self.staff.chs_organisation = \"org123\"\n        self.staff.chs_user = \"user\"\n        self.staff.save()\n    def test_valid_login(self):\n        authenticator = LegacyCHSAuthentication()",
        "detail": "cla_backend.apps.cla_provider.tests.test_auth",
        "documentation": {}
    },
    {
        "label": "RejectCaseEventTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.test_events",
        "description": "cla_backend.apps.cla_provider.tests.test_events",
        "peekOfCode": "class RejectCaseEventTestCase(EventTestCaseMixin, TestCase):\n    EVENT_KEY = \"reject_case\"\n    def test_reject_case(self):\n        self._test_process_with_expicit_code([\"MIS\", \"MIS-MEANS\", \"MIS-OOS\", \"COI\"])\n    def test_reject_conflict(self):\n        self._test_process_with_implicit_code(\"COI\", process_kwargs={\"is_conflict\": True})\nclass AcceptCaseEventTestCase(EventTestCaseMixin, TestCase):\n    EVENT_KEY = \"accept_case\"\n    def test_accept_case(self):\n        self._test_process_with_implicit_code(\"SPOP\")",
        "detail": "cla_backend.apps.cla_provider.tests.test_events",
        "documentation": {}
    },
    {
        "label": "AcceptCaseEventTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.test_events",
        "description": "cla_backend.apps.cla_provider.tests.test_events",
        "peekOfCode": "class AcceptCaseEventTestCase(EventTestCaseMixin, TestCase):\n    EVENT_KEY = \"accept_case\"\n    def test_accept_case(self):\n        self._test_process_with_implicit_code(\"SPOP\")\nclass CloseCaseEventTestCase(EventTestCaseMixin, TestCase):\n    EVENT_KEY = \"close_case\"\n    def test_close_case(self):\n        self._test_process_with_implicit_code(\"CLSP\")\n    def test_close_case_with_DREFER(self):\n        self._test_process_with_implicit_code(\"DREFER\", process_kwargs={\"is_debt_referral\": True})",
        "detail": "cla_backend.apps.cla_provider.tests.test_events",
        "documentation": {}
    },
    {
        "label": "CloseCaseEventTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.test_events",
        "description": "cla_backend.apps.cla_provider.tests.test_events",
        "peekOfCode": "class CloseCaseEventTestCase(EventTestCaseMixin, TestCase):\n    EVENT_KEY = \"close_case\"\n    def test_close_case(self):\n        self._test_process_with_implicit_code(\"CLSP\")\n    def test_close_case_with_DREFER(self):\n        self._test_process_with_implicit_code(\"DREFER\", process_kwargs={\"is_debt_referral\": True})",
        "detail": "cla_backend.apps.cla_provider.tests.test_events",
        "documentation": {}
    },
    {
        "label": "AcceptCaseFormTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.test_forms",
        "description": "cla_backend.apps.cla_provider.tests.test_forms",
        "peekOfCode": "class AcceptCaseFormTestCase(BaseCaseLogFormTestCaseMixin, TestCase):\n    FORM = AcceptCaseForm\n    def test_save_successfull(self):\n        case = make_recipe(\"legalaid.case\")\n        self.assertEqual(case.provider_accepted, None)\n        self._test_save_successfull(case=case)\n        self.assertNotEqual(case.provider_accepted, None)\nclass RejectCaseFormTestCase(EventSpecificLogFormTestCaseMixin, TestCase):\n    FORM = RejectCaseForm\n    def _test_provider_closed(self, code, expected_None):",
        "detail": "cla_backend.apps.cla_provider.tests.test_forms",
        "documentation": {}
    },
    {
        "label": "RejectCaseFormTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.test_forms",
        "description": "cla_backend.apps.cla_provider.tests.test_forms",
        "peekOfCode": "class RejectCaseFormTestCase(EventSpecificLogFormTestCaseMixin, TestCase):\n    FORM = RejectCaseForm\n    def _test_provider_closed(self, code, expected_None):\n        case = make_recipe(\"legalaid.case\")\n        data = self.get_default_data()\n        data[\"event_code\"] = code\n        self.assertEqual(case.provider_closed, None)\n        self._test_save_successfull(case=case, data=data)\n        if expected_None:\n            self.assertNotEqual(case.provider_closed, None)",
        "detail": "cla_backend.apps.cla_provider.tests.test_forms",
        "documentation": {}
    },
    {
        "label": "CloseCaseFormTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.test_forms",
        "description": "cla_backend.apps.cla_provider.tests.test_forms",
        "peekOfCode": "class CloseCaseFormTestCase(BaseCaseLogFormTestCaseMixin, TestCase):\n    FORM = CloseCaseForm\n    def test_CLSP_save_successfull(self):\n        case = make_recipe(\"legalaid.case\")\n        self.assertEqual(case.provider_closed, None)\n        self._test_save_successfull(case=case)\n        self.assertNotEqual(case.provider_closed, None)\n    def test_DREFER_save_successfull(self):\n        case = make_recipe(\"legalaid.case\")\n        self.assertEqual(case.provider_closed, None)",
        "detail": "cla_backend.apps.cla_provider.tests.test_forms",
        "documentation": {}
    },
    {
        "label": "SplitCaseFormTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.test_forms",
        "description": "cla_backend.apps.cla_provider.tests.test_forms",
        "peekOfCode": "class SplitCaseFormTestCase(TestCase):\n    def build_category_data(self):\n        class CatData:\n            def __init__(self):\n                self.category = make_recipe(\"legalaid.category\")\n                self.matter_type1 = make_recipe(\"legalaid.matter_type1\", category=self.category)\n                self.matter_type2 = make_recipe(\"legalaid.matter_type2\", category=self.category)\n        return CatData()\n    def setUp(self):\n        super(SplitCaseFormTestCase, self).setUp()",
        "detail": "cla_backend.apps.cla_provider.tests.test_forms",
        "documentation": {}
    },
    {
        "label": "ProviderAllocationHelperTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.test_helpers",
        "description": "cla_backend.apps.cla_provider.tests.test_helpers",
        "peekOfCode": "class ProviderAllocationHelperTestCase(TestCase):\n    def build_providers(self, providers_data):\n        providers = []\n        for id, pa in providers_data.items():\n            providers.append(mock.MagicMock(provider=mock.MagicMock(id=id), weighted_distribution=pa[\"weight\"]))\n        return providers\n    def _test__get_random_provider(self, alloc_data, num_iterations=100000):\n        # print \"\\n\\nNew test\"\n        helper = ProviderAllocationHelper()\n        helper._providers_in_category = self.build_providers(alloc_data)",
        "detail": "cla_backend.apps.cla_provider.tests.test_helpers",
        "documentation": {}
    },
    {
        "label": "ProviderModelTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.test_models",
        "description": "cla_backend.apps.cla_provider.tests.test_models",
        "peekOfCode": "class ProviderModelTestCase(TestCase):\n    def test_unique_provider_name(self):\n        make_recipe(\"cla_provider.provider\", name=\"Stephensons\")\n        with self.assertRaises(IntegrityError):\n            make_recipe(\"cla_provider.provider\", name=\"Stephensons\")",
        "detail": "cla_backend.apps.cla_provider.tests.test_models",
        "documentation": {}
    },
    {
        "label": "MockGovNotifyMailBox",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.test_notify",
        "description": "cla_backend.apps.cla_provider.tests.test_notify",
        "peekOfCode": "class MockGovNotifyMailBox(object):\n    def setUp(self):\n        super(MockGovNotifyMailBox, self).setUp()\n        self.mailbox = []\n        self.mock_send_email = mock.patch.object(GovUkNotify, \"send_email\", self.send_email)\n        self.mock_send_email.start()\n    def tearDown(self):\n        super(MockGovNotifyMailBox, self).tearDown()\n        self.mock_send_email.stop()\n    def send_email(self, email_address, template_id, personalisation):",
        "detail": "cla_backend.apps.cla_provider.tests.test_notify",
        "documentation": {}
    },
    {
        "label": "NotifyTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.tests.test_notify",
        "description": "cla_backend.apps.cla_provider.tests.test_notify",
        "peekOfCode": "class NotifyTestCase(MockGovNotifyMailBox, TestCase):\n    def setUp(self):\n        super(NotifyTestCase, self).setUp()\n        self.case = make_recipe(\"legalaid.case\", outcome_code=\"SPOR\")\n        self.provider = make_recipe(\"cla_provider.provider\", email_address=\"test@digital.justice.gov.uk\", active=True)\n    def test_notify_case_assigned_success(self):\n        template_id = settings.GOVUK_NOTIFY_TEMPLATES[\"PROVIDER_CASE_ASSIGNED\"]\n        now = datetime.now()\n        case_url = \"https://{}/provider/{}/\".format(settings.FRONTEND_HOST_NAME, self.case.reference)\n        personalisation = {",
        "detail": "cla_backend.apps.cla_provider.tests.test_notify",
        "documentation": {}
    },
    {
        "label": "LegacyCHSAuthentication",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.authentication",
        "description": "cla_backend.apps.cla_provider.authentication",
        "peekOfCode": "class LegacyCHSAuthentication(BaseAuthentication):\n    def authenticate(self, request):\n        \"\"\"\n        Returns a `User` if a correct username and password have been supplied\n        in the HTTP Post authentication.  Otherwise returns `None`.\n        \"\"\"\n        userid, password, org = (\n            request.data.get(\"CHSUserName\"),\n            request.data.get(\"CHSPassword\"),\n            request.data.get(\"CHSOrganisationID\", request.data.get(\"CHSOrgansationID\")),",
        "detail": "cla_backend.apps.cla_provider.authentication",
        "documentation": {}
    },
    {
        "label": "RejectCaseEvent",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.events",
        "description": "cla_backend.apps.cla_provider.events",
        "peekOfCode": "class RejectCaseEvent(BaseEvent):\n    key = \"reject_case\"\n    codes = {\n        \"MIS-OOS\": {\n            \"type\": LOG_TYPES.OUTCOME,\n            \"level\": LOG_LEVELS.HIGH,\n            \"selectable_by\": [],\n            \"description\": \"Misdiagnosed, out of scope\",\n            \"stops_timer\": False,\n            \"order\": 10,",
        "detail": "cla_backend.apps.cla_provider.events",
        "documentation": {}
    },
    {
        "label": "AcceptCaseEvent",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.events",
        "description": "cla_backend.apps.cla_provider.events",
        "peekOfCode": "class AcceptCaseEvent(BaseEvent):\n    key = \"accept_case\"\n    codes = {\n        \"SPOP\": {\n            \"type\": LOG_TYPES.OUTCOME,\n            \"level\": LOG_LEVELS.HIGH,\n            \"selectable_by\": [],\n            \"description\": \"Case taken\",\n            \"stops_timer\": False,\n            \"set_requires_action_by\": REQUIRES_ACTION_BY.PROVIDER,",
        "detail": "cla_backend.apps.cla_provider.events",
        "documentation": {}
    },
    {
        "label": "CloseCaseEvent",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.events",
        "description": "cla_backend.apps.cla_provider.events",
        "peekOfCode": "class CloseCaseEvent(BaseEvent):\n    key = \"close_case\"\n    codes = {\n        \"CLSP\": {\n            \"type\": LOG_TYPES.OUTCOME,\n            \"level\": LOG_LEVELS.HIGH,\n            \"selectable_by\": [],\n            \"description\": \"Closed SP Case\",\n            \"stops_timer\": False,\n            \"set_requires_action_by\": None,",
        "detail": "cla_backend.apps.cla_provider.events",
        "documentation": {}
    },
    {
        "label": "ReopenCaseEvent",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.events",
        "description": "cla_backend.apps.cla_provider.events",
        "peekOfCode": "class ReopenCaseEvent(BaseEvent):\n    key = \"reopen_case\"\n    codes = {\n        \"REOPEN\": {\n            \"type\": LOG_TYPES.OUTCOME,\n            \"level\": LOG_LEVELS.HIGH,\n            \"selectable_by\": [],\n            \"description\": \"Reopened SP Case\",\n            \"stops_timer\": False,\n        }",
        "detail": "cla_backend.apps.cla_provider.events",
        "documentation": {}
    },
    {
        "label": "SplitCaseEvent",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.events",
        "description": "cla_backend.apps.cla_provider.events",
        "peekOfCode": "class SplitCaseEvent(BaseEvent):\n    key = \"split_case\"\n    codes = {\n        \"REF-EXT\": {\n            \"type\": LOG_TYPES.OUTCOME,\n            \"level\": LOG_LEVELS.HIGH,\n            \"selectable_by\": [],\n            \"description\": \"Referred externally\",\n            \"stops_timer\": False,\n        },",
        "detail": "cla_backend.apps.cla_provider.events",
        "documentation": {}
    },
    {
        "label": "RejectCaseForm",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.forms",
        "description": "cla_backend.apps.cla_provider.forms",
        "peekOfCode": "class RejectCaseForm(EventSpecificLogForm):\n    \"\"\"\n    Rejects a case. If the outcome code has 'requires_action_by' == None\n    then it sets case.provider_closed field\n    \"\"\"\n    LOG_EVENT_KEY = \"reject_case\"\n    def save(self, user):\n        code = self.get_event_code()\n        event = event_registry.get_event(self.get_event_key())()\n        code_data = event.codes[code]",
        "detail": "cla_backend.apps.cla_provider.forms",
        "documentation": {}
    },
    {
        "label": "AcceptCaseForm",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.forms",
        "description": "cla_backend.apps.cla_provider.forms",
        "peekOfCode": "class AcceptCaseForm(BaseCaseLogForm):\n    \"\"\"\n    Accepts a case and sets case.provider_accepted field\n    \"\"\"\n    LOG_EVENT_KEY = \"accept_case\"\n    def save(self, user):\n        val = super(AcceptCaseForm, self).save(user)\n        self.case.accept_by_provider()\n        return val\nclass CloseCaseForm(BaseCaseLogForm):",
        "detail": "cla_backend.apps.cla_provider.forms",
        "documentation": {}
    },
    {
        "label": "CloseCaseForm",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.forms",
        "description": "cla_backend.apps.cla_provider.forms",
        "peekOfCode": "class CloseCaseForm(BaseCaseLogForm):\n    \"\"\"\n    Closes a case and sets case.provider_closed field\n    \"\"\"\n    LOG_EVENT_KEY = \"close_case\"\n    is_debt_referral = forms.BooleanField(required=False)\n    def clean(self, *args, **kwargs):\n        cleaned_data = super(CloseCaseForm, self).clean(*args, **kwargs)\n        if self._errors:  # if already in error => skip\n            return cleaned_data",
        "detail": "cla_backend.apps.cla_provider.forms",
        "documentation": {}
    },
    {
        "label": "ReopenCaseForm",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.forms",
        "description": "cla_backend.apps.cla_provider.forms",
        "peekOfCode": "class ReopenCaseForm(BaseCaseLogForm):\n    \"\"\"\n    Reopens a case and resets case.provider_closed field\n    \"\"\"\n    LOG_EVENT_KEY = \"reopen_case\"\n    NOTES_MANDATORY = True\n    def clean(self, *args, **kwargs):\n        cleaned_data = super(ReopenCaseForm, self).clean(*args, **kwargs)\n        if self._errors:  # if already in error => skip\n            return cleaned_data",
        "detail": "cla_backend.apps.cla_provider.forms",
        "documentation": {}
    },
    {
        "label": "SplitCaseForm",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.forms",
        "description": "cla_backend.apps.cla_provider.forms",
        "peekOfCode": "class SplitCaseForm(BaseCaseLogForm):\n    LOG_EVENT_KEY = \"split_case\"\n    category = forms.ModelChoiceField(queryset=Category.objects.all(), to_field_name=\"code\", required=True)\n    matter_type1 = forms.ModelChoiceField(\n        queryset=MatterType.objects.filter(level=MATTER_TYPE_LEVELS.ONE), to_field_name=\"code\", required=False\n    )\n    matter_type2 = forms.ModelChoiceField(\n        queryset=MatterType.objects.filter(level=MATTER_TYPE_LEVELS.TWO), to_field_name=\"code\", required=False\n    )\n    internal = forms.BooleanField(required=False)",
        "detail": "cla_backend.apps.cla_provider.forms",
        "documentation": {}
    },
    {
        "label": "ProviderExtractForm",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.forms",
        "description": "cla_backend.apps.cla_provider.forms",
        "peekOfCode": "class ProviderExtractForm(Form):\n    CHSUserName = forms.CharField(required=True)\n    CHSOrganisationID = forms.CharField(required=True)\n    CHSPassword = forms.CharField(required=True)\n    CHSCRN = forms.CharField(required=True)\n    def clean_CHSCRN(self):\n        data = self.cleaned_data[\"CHSCRN\"]\n        if data:\n            data = data.strip().upper()\n        return data",
        "detail": "cla_backend.apps.cla_provider.forms",
        "documentation": {}
    },
    {
        "label": "ProviderDistributionHelper",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.helpers",
        "description": "cla_backend.apps.cla_provider.helpers",
        "peekOfCode": "class ProviderDistributionHelper(object):\n    def __init__(self, dt=None):\n        self.date = dt.replace(hour=0, minute=0, second=0) if dt else None\n    def get_distribution(self, category, include_pre_allocations=False):\n        last_update = ProviderAllocation.objects.filter(category=category).order_by(\"-modified\").first()\n        raw = (\n            Case.objects.order_by(\"provider\")\n            .filter(diagnosis__category=category)\n            .filter(assigned_out_of_hours=False)\n            .exclude(log__code=\"MANREF\")",
        "detail": "cla_backend.apps.cla_provider.helpers",
        "documentation": {}
    },
    {
        "label": "ProviderAllocationHelper",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.helpers",
        "description": "cla_backend.apps.cla_provider.helpers",
        "peekOfCode": "class ProviderAllocationHelper(object):\n    def __init__(self, as_of=None):\n        self._providers_in_category = None\n        self.as_of = timezone.localtime(as_of or timezone.now())\n        self.distribution = ProviderDistributionHelper()\n    def get_qualifying_providers_allocation(self, category):\n        \"\"\"\n        @return: list\n        \"\"\"\n        if not self._providers_in_category:",
        "detail": "cla_backend.apps.cla_provider.helpers",
        "documentation": {}
    },
    {
        "label": "ProviderExtractFormatter",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.helpers",
        "description": "cla_backend.apps.cla_provider.helpers",
        "peekOfCode": "class ProviderExtractFormatter(object):\n    def __init__(self, case):\n        self.case = case\n    def format(self):\n        ctx = {\"case\": self.case}\n        template = get_template(\"provider/case.xml\")\n        resp = HttpResponse(template.render(ctx), content_type=\"text/xml\")\n        resp[\"Access-Control-Allow-Origin\"] = \"*\"\n        return resp",
        "detail": "cla_backend.apps.cla_provider.helpers",
        "documentation": {}
    },
    {
        "label": "notify_case_assigned",
        "kind": 2,
        "importPath": "cla_backend.apps.cla_provider.helpers",
        "description": "cla_backend.apps.cla_provider.helpers",
        "peekOfCode": "def notify_case_assigned(provider, case):\n    if not provider.email_address:\n        return\n    case_url = \"https://{0}/provider/{1}/\"\n    now = datetime.datetime.now()\n    personalisation = {\n        \"reference\": case.reference,\n        \"provider\": provider.name,\n        \"eligibility_check_category\": case.eligibility_check.category.name,\n        \"is_SPOR\": case.outcome_code == \"SPOR\",",
        "detail": "cla_backend.apps.cla_provider.helpers",
        "documentation": {}
    },
    {
        "label": "notify_case_RDSPed",
        "kind": 2,
        "importPath": "cla_backend.apps.cla_provider.helpers",
        "description": "cla_backend.apps.cla_provider.helpers",
        "peekOfCode": "def notify_case_RDSPed(provider, case):\n    if not provider.email_address:\n        return\n    case_url = \"https://{0}/provider/{1}/\"\n    now = datetime.datetime.now()\n    personalisation = {\n        \"reference\": case.reference,\n        \"time\": now.strftime(\"%H:%M\"),\n        \"date\": now.strftime(\"%D\"),\n        \"case_url\": case_url.format(settings.FRONTEND_HOST_NAME, case.reference),",
        "detail": "cla_backend.apps.cla_provider.helpers",
        "documentation": {}
    },
    {
        "label": "ProviderManager",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.models",
        "description": "cla_backend.apps.cla_provider.models",
        "peekOfCode": "class ProviderManager(models.Manager):\n    def active(self):\n        return self.get_queryset().filter(active=True)\nclass Provider(TimeStampedModel):\n    name = models.CharField(max_length=255, unique=True)\n    opening_hours = models.CharField(max_length=100, blank=True)\n    law_category = models.ManyToManyField(\"legalaid.Category\", through=\"ProviderAllocation\")\n    active = models.BooleanField(default=False)\n    short_code = models.CharField(max_length=100, blank=True)\n    telephone_frontdoor = models.CharField(max_length=100, blank=True)",
        "detail": "cla_backend.apps.cla_provider.models",
        "documentation": {}
    },
    {
        "label": "Provider",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.models",
        "description": "cla_backend.apps.cla_provider.models",
        "peekOfCode": "class Provider(TimeStampedModel):\n    name = models.CharField(max_length=255, unique=True)\n    opening_hours = models.CharField(max_length=100, blank=True)\n    law_category = models.ManyToManyField(\"legalaid.Category\", through=\"ProviderAllocation\")\n    active = models.BooleanField(default=False)\n    short_code = models.CharField(max_length=100, blank=True)\n    telephone_frontdoor = models.CharField(max_length=100, blank=True)\n    telephone_backdoor = models.CharField(max_length=100, blank=True)\n    email_address = models.EmailField(blank=True)\n    objects = ProviderManager()",
        "detail": "cla_backend.apps.cla_provider.models",
        "documentation": {}
    },
    {
        "label": "ProviderAllocationManager",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.models",
        "description": "cla_backend.apps.cla_provider.models",
        "peekOfCode": "class ProviderAllocationManager(models.Manager):\n    def has_category(self, category):\n        \"\"\"\n        @param category: type legalaid.Category\n        \"\"\"\n        return self.get_queryset().filter(category=category)\nclass ProviderAllocation(TimeStampedModel):\n    provider = models.ForeignKey(Provider)\n    category = models.ForeignKey(\"legalaid.Category\")\n    weighted_distribution = models.FloatField()  # see XXXXXXXXXXXX",
        "detail": "cla_backend.apps.cla_provider.models",
        "documentation": {}
    },
    {
        "label": "ProviderAllocation",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.models",
        "description": "cla_backend.apps.cla_provider.models",
        "peekOfCode": "class ProviderAllocation(TimeStampedModel):\n    provider = models.ForeignKey(Provider)\n    category = models.ForeignKey(\"legalaid.Category\")\n    weighted_distribution = models.FloatField()  # see XXXXXXXXXXXX\n    objects = ProviderAllocationManager()\n    def __unicode__(self):\n        return u\"%s provides %s\" % (self.provider, self.category)\nclass ProviderPreAllocationManager(models.Manager):\n    def get_queryset(self):\n        super(ProviderPreAllocationManager, self).get_queryset().filter(",
        "detail": "cla_backend.apps.cla_provider.models",
        "documentation": {}
    },
    {
        "label": "ProviderPreAllocationManager",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.models",
        "description": "cla_backend.apps.cla_provider.models",
        "peekOfCode": "class ProviderPreAllocationManager(models.Manager):\n    def get_queryset(self):\n        super(ProviderPreAllocationManager, self).get_queryset().filter(\n            created__lte=timezone.now() - timedelta(seconds=60)\n        ).delete()\n        return super(ProviderPreAllocationManager, self).get_queryset()\n    def pre_allocate(self, category, provider, case):\n        self.get_queryset().filter(case=case).delete()\n        if not case.provider:\n            self.get_queryset().create(category=category, provider=provider, case=case)",
        "detail": "cla_backend.apps.cla_provider.models",
        "documentation": {}
    },
    {
        "label": "ProviderPreAllocation",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.models",
        "description": "cla_backend.apps.cla_provider.models",
        "peekOfCode": "class ProviderPreAllocation(TimeStampedModel):\n    provider = models.ForeignKey(Provider)\n    category = models.ForeignKey(\"legalaid.Category\")\n    case = models.ForeignKey(\"legalaid.Case\")\n    objects = ProviderPreAllocationManager()\nclass Staff(TimeStampedModel):\n    user = models.OneToOneField(\"auth.User\")\n    provider = models.ForeignKey(Provider)\n    is_manager = models.BooleanField(default=False)\n    chs_organisation = models.CharField(",
        "detail": "cla_backend.apps.cla_provider.models",
        "documentation": {}
    },
    {
        "label": "Staff",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.models",
        "description": "cla_backend.apps.cla_provider.models",
        "peekOfCode": "class Staff(TimeStampedModel):\n    user = models.OneToOneField(\"auth.User\")\n    provider = models.ForeignKey(Provider)\n    is_manager = models.BooleanField(default=False)\n    chs_organisation = models.CharField(\n        max_length=500,\n        help_text=\"Fake field to mirror old CHS extract, user can set this to whatever they like\",\n        blank=True,\n        null=True,\n    )",
        "detail": "cla_backend.apps.cla_provider.models",
        "documentation": {}
    },
    {
        "label": "OutOfHoursRotaManager",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.models",
        "description": "cla_backend.apps.cla_provider.models",
        "peekOfCode": "class OutOfHoursRotaManager(models.Manager):\n    def get_current(self, category, as_of=None):\n        if not as_of:\n            as_of = timezone.localtime(timezone.now())\n        return self.get_queryset().get(category=category, start_date__lte=as_of, end_date__gte=as_of)\nclass OutOfHoursRota(TimeStampedModel):\n    start_date = models.DateTimeField()\n    end_date = models.DateTimeField()\n    category = models.ForeignKey(\"legalaid.Category\")\n    provider = models.ForeignKey(Provider)",
        "detail": "cla_backend.apps.cla_provider.models",
        "documentation": {}
    },
    {
        "label": "OutOfHoursRota",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.models",
        "description": "cla_backend.apps.cla_provider.models",
        "peekOfCode": "class OutOfHoursRota(TimeStampedModel):\n    start_date = models.DateTimeField()\n    end_date = models.DateTimeField()\n    category = models.ForeignKey(\"legalaid.Category\")\n    provider = models.ForeignKey(Provider)\n    objects = OutOfHoursRotaManager()\n    def __unicode__(self):\n        return u\"%s provides out of hours service for %s between %s - %s\" % (\n            self.provider,\n            self.category.code,",
        "detail": "cla_backend.apps.cla_provider.models",
        "documentation": {}
    },
    {
        "label": "Feedback",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.models",
        "description": "cla_backend.apps.cla_provider.models",
        "peekOfCode": "class Feedback(TimeStampedModel):\n    reference = UUIDField(auto=True, unique=True)\n    case = models.ForeignKey(\"legalaid.Case\", related_name=\"provider_feedback\")\n    created_by = models.ForeignKey(Staff)\n    comment = models.TextField()\n    justified = models.BooleanField(default=False)\n    resolved = models.BooleanField(default=False)\n    issue = models.CharField(choices=FEEDBACK_ISSUE, max_length=100)\nclass CSVUpload(TimeStampedModel):\n    provider = models.ForeignKey(Provider)",
        "detail": "cla_backend.apps.cla_provider.models",
        "documentation": {}
    },
    {
        "label": "CSVUpload",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.models",
        "description": "cla_backend.apps.cla_provider.models",
        "peekOfCode": "class CSVUpload(TimeStampedModel):\n    provider = models.ForeignKey(Provider)\n    created_by = models.ForeignKey(Staff)\n    comment = models.TextField(blank=True, null=True)\n    body = JSONField()\n    month = models.DateField(validators=[validate_first_of_month])\n    class Meta(object):\n        unique_together = [[\"provider\", \"month\"]]\npost_save.connect(log_staff_created, sender=Staff)\npre_save.connect(log_staff_modified, sender=Staff)",
        "detail": "cla_backend.apps.cla_provider.models",
        "documentation": {}
    },
    {
        "label": "random_uuid_str",
        "kind": 2,
        "importPath": "cla_backend.apps.cla_provider.models",
        "description": "cla_backend.apps.cla_provider.models",
        "peekOfCode": "def random_uuid_str():\n    return str(uuid.uuid4())\nclass ProviderManager(models.Manager):\n    def active(self):\n        return self.get_queryset().filter(active=True)\nclass Provider(TimeStampedModel):\n    name = models.CharField(max_length=255, unique=True)\n    opening_hours = models.CharField(max_length=100, blank=True)\n    law_category = models.ManyToManyField(\"legalaid.Category\", through=\"ProviderAllocation\")\n    active = models.BooleanField(default=False)",
        "detail": "cla_backend.apps.cla_provider.models",
        "documentation": {}
    },
    {
        "label": "CLAProviderClientIDPermission",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.permissions",
        "description": "cla_backend.apps.cla_provider.permissions",
        "peekOfCode": "class CLAProviderClientIDPermission(ClientIDPermission):\n    client_name = \"staff\"",
        "detail": "cla_backend.apps.cla_provider.permissions",
        "documentation": {}
    },
    {
        "label": "PropertySerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.serializers",
        "description": "cla_backend.apps.cla_provider.serializers",
        "peekOfCode": "class PropertySerializer(PropertySerializerBase):\n    class Meta(PropertySerializerBase.Meta):\n        fields = (\"value\", \"mortgage_left\", \"share\", \"id\", \"disputed\", \"main\")\nclass IncomeSerializer(IncomeSerializerBase):\n    class Meta(IncomeSerializerBase.Meta):\n        fields = (\n            \"earnings\",\n            \"self_employment_drawings\",\n            \"benefits\",\n            \"tax_credits\",",
        "detail": "cla_backend.apps.cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "IncomeSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.serializers",
        "description": "cla_backend.apps.cla_provider.serializers",
        "peekOfCode": "class IncomeSerializer(IncomeSerializerBase):\n    class Meta(IncomeSerializerBase.Meta):\n        fields = (\n            \"earnings\",\n            \"self_employment_drawings\",\n            \"benefits\",\n            \"tax_credits\",\n            \"child_benefits\",\n            \"maintenance_received\",\n            \"pension\",",
        "detail": "cla_backend.apps.cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "PartnerIncomeSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.serializers",
        "description": "cla_backend.apps.cla_provider.serializers",
        "peekOfCode": "class PartnerIncomeSerializer(IncomeSerializerBase):\n    \"\"\"\n    Like IncomeSerializer but without 'child_benefits'\n    \"\"\"\n    self_employed = serializers.NullBooleanField(default=None)\n    class Meta(IncomeSerializerBase.Meta):\n        fields = (\n            \"earnings\",\n            \"self_employment_drawings\",\n            \"benefits\",",
        "detail": "cla_backend.apps.cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "SavingsSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.serializers",
        "description": "cla_backend.apps.cla_provider.serializers",
        "peekOfCode": "class SavingsSerializer(SavingsSerializerBase):\n    class Meta(SavingsSerializerBase.Meta):\n        fields = (\"bank_balance\", \"investment_balance\", \"asset_balance\", \"credit_balance\", \"total\")\nclass DeductionsSerializer(DeductionsSerializerBase):\n    class Meta(DeductionsSerializerBase.Meta):\n        fields = (\n            \"income_tax\",\n            \"national_insurance\",\n            \"maintenance\",\n            \"childcare\",",
        "detail": "cla_backend.apps.cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "DeductionsSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.serializers",
        "description": "cla_backend.apps.cla_provider.serializers",
        "peekOfCode": "class DeductionsSerializer(DeductionsSerializerBase):\n    class Meta(DeductionsSerializerBase.Meta):\n        fields = (\n            \"income_tax\",\n            \"national_insurance\",\n            \"maintenance\",\n            \"childcare\",\n            \"mortgage\",\n            \"rent\",\n            \"criminal_legalaid_contributions\",",
        "detail": "cla_backend.apps.cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "PersonalDetailsSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.serializers",
        "description": "cla_backend.apps.cla_provider.serializers",
        "peekOfCode": "class PersonalDetailsSerializer(PersonalDetailsSerializerFull):\n    class Meta(PersonalDetailsSerializerFull.Meta):\n        fields = (\n            \"reference\",\n            \"title\",\n            \"full_name\",\n            \"postcode\",\n            \"street\",\n            \"mobile_phone\",\n            \"home_phone\",",
        "detail": "cla_backend.apps.cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "ThirdPartyPersonalDetailsSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.serializers",
        "description": "cla_backend.apps.cla_provider.serializers",
        "peekOfCode": "class ThirdPartyPersonalDetailsSerializer(ThirdPartyPersonalDetailsSerializerBase):\n    class Meta(ThirdPartyPersonalDetailsSerializerBase.Meta):\n        fields = (\n            \"reference\",\n            \"title\",\n            \"full_name\",\n            \"postcode\",\n            \"street\",\n            \"mobile_phone\",\n            \"home_phone\",",
        "detail": "cla_backend.apps.cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "ThirdPartyDetailsSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.serializers",
        "description": "cla_backend.apps.cla_provider.serializers",
        "peekOfCode": "class ThirdPartyDetailsSerializer(ThirdPartyDetailsSerializerBase):\n    personal_details = ThirdPartyPersonalDetailsSerializer(required=True)\n    class Meta(ThirdPartyDetailsSerializerBase.Meta):\n        fields = (\n            \"reference\",\n            \"personal_details\",\n            \"pass_phrase\",\n            \"reason\",\n            \"personal_relationship\",\n            \"personal_relationship_note\",",
        "detail": "cla_backend.apps.cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "PersonSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.serializers",
        "description": "cla_backend.apps.cla_provider.serializers",
        "peekOfCode": "class PersonSerializer(PersonSerializerBase):\n    income = IncomeSerializer(required=False, allow_null=True)\n    savings = SavingsSerializer(required=False, allow_null=True)\n    deductions = DeductionsSerializer(required=False, allow_null=True)\n    class Meta(PersonSerializerBase.Meta):\n        fields = (\"income\", \"savings\", \"deductions\")\nclass PartnerPersonSerializer(PersonSerializer):\n    \"\"\"\n        Like PersonSerializer but without child_benefits\n    \"\"\"",
        "detail": "cla_backend.apps.cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "PartnerPersonSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.serializers",
        "description": "cla_backend.apps.cla_provider.serializers",
        "peekOfCode": "class PartnerPersonSerializer(PersonSerializer):\n    \"\"\"\n        Like PersonSerializer but without child_benefits\n    \"\"\"\n    income = PartnerIncomeSerializer(required=False, allow_null=True)\n    class Meta(PersonSerializer.Meta):\n        pass\nclass EligibilityCheckSerializer(EligibilityCheckSerializerBase):\n    property_set = PropertySerializer(many=True, required=False, allow_null=True)\n    you = PersonSerializer(required=False)",
        "detail": "cla_backend.apps.cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "EligibilityCheckSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.serializers",
        "description": "cla_backend.apps.cla_provider.serializers",
        "peekOfCode": "class EligibilityCheckSerializer(EligibilityCheckSerializerBase):\n    property_set = PropertySerializer(many=True, required=False, allow_null=True)\n    you = PersonSerializer(required=False)\n    partner = PartnerPersonSerializer(required=False, allow_null=True)\n    notes = serializers.CharField(max_length=500, required=False, read_only=True)\n    disputed_savings = SavingsSerializer(required=False, allow_null=True)\n    class Meta(EligibilityCheckSerializerBase.Meta):\n        fields = (\n            \"reference\",\n            \"category\",",
        "detail": "cla_backend.apps.cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "ExtendedEligibilityCheckSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.serializers",
        "description": "cla_backend.apps.cla_provider.serializers",
        "peekOfCode": "class ExtendedEligibilityCheckSerializer(EligibilityCheckSerializer):\n    calculations = JSONField(read_only=True)\n    class Meta(EligibilityCheckSerializer.Meta):\n        fields = list(EligibilityCheckSerializer.Meta.fields) + [\"calculations\"]\nclass LogSerializer(LogSerializerBase):\n    class Meta(LogSerializerBase.Meta):\n        fields = (\"code\", \"created_by\", \"created\", \"notes\", \"type\", \"level\", \"timer\", \"patch\")\nclass CaseSerializer(CaseSerializerFull):\n    notes = serializers.CharField(max_length=5000, required=False, read_only=True)\n    provider_viewed = serializers.DateTimeField(read_only=True)",
        "detail": "cla_backend.apps.cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "LogSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.serializers",
        "description": "cla_backend.apps.cla_provider.serializers",
        "peekOfCode": "class LogSerializer(LogSerializerBase):\n    class Meta(LogSerializerBase.Meta):\n        fields = (\"code\", \"created_by\", \"created\", \"notes\", \"type\", \"level\", \"timer\", \"patch\")\nclass CaseSerializer(CaseSerializerFull):\n    notes = serializers.CharField(max_length=5000, required=False, read_only=True)\n    provider_viewed = serializers.DateTimeField(read_only=True)\n    provider_accepted = serializers.DateTimeField(read_only=True)\n    provider_closed = serializers.DateTimeField(read_only=True)\n    class Meta(CaseSerializerFull.Meta):\n        fields = (",
        "detail": "cla_backend.apps.cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "CaseSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.serializers",
        "description": "cla_backend.apps.cla_provider.serializers",
        "peekOfCode": "class CaseSerializer(CaseSerializerFull):\n    notes = serializers.CharField(max_length=5000, required=False, read_only=True)\n    provider_viewed = serializers.DateTimeField(read_only=True)\n    provider_accepted = serializers.DateTimeField(read_only=True)\n    provider_closed = serializers.DateTimeField(read_only=True)\n    class Meta(CaseSerializerFull.Meta):\n        fields = (\n            \"eligibility_check\",\n            \"personal_details\",\n            \"reference\",",
        "detail": "cla_backend.apps.cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "CaseListSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.serializers",
        "description": "cla_backend.apps.cla_provider.serializers",
        "peekOfCode": "class CaseListSerializer(CaseSerializer):\n    class Meta(CaseSerializer.Meta):\n        fields = (\n            \"reference\",\n            \"created\",\n            \"modified\",\n            \"full_name\",\n            \"laa_reference\",\n            \"eligibility_state\",\n            \"personal_details\",",
        "detail": "cla_backend.apps.cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "AdaptationDetailsSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.serializers",
        "description": "cla_backend.apps.cla_provider.serializers",
        "peekOfCode": "class AdaptationDetailsSerializer(AdaptationDetailsSerializerBase):\n    class Meta(AdaptationDetailsSerializerBase.Meta):\n        fields = (\n            \"bsl_webcam\",\n            \"minicom\",\n            \"text_relay\",\n            \"skype_webcam\",\n            \"language\",\n            \"notes\",\n            \"reference\",",
        "detail": "cla_backend.apps.cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "ProviderSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.serializers",
        "description": "cla_backend.apps.cla_provider.serializers",
        "peekOfCode": "class ProviderSerializer(ProviderSerializerBase):\n    class Meta(ProviderSerializerBase.Meta):\n        fields = (\"name\", \"id\")\nclass StaffSerializer(ExtendedUserSerializerBase):\n    provider = ProviderSerializer(read_only=True)\n    chs_user = serializers.CharField(required=False)\n    chs_organisation = serializers.CharField(required=False)\n    chs_password = serializers.CharField(required=False, write_only=True)\n    class Meta(ExtendedUserSerializerBase.Meta):\n        model = Staff",
        "detail": "cla_backend.apps.cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "StaffSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.serializers",
        "description": "cla_backend.apps.cla_provider.serializers",
        "peekOfCode": "class StaffSerializer(ExtendedUserSerializerBase):\n    provider = ProviderSerializer(read_only=True)\n    chs_user = serializers.CharField(required=False)\n    chs_organisation = serializers.CharField(required=False)\n    chs_password = serializers.CharField(required=False, write_only=True)\n    class Meta(ExtendedUserSerializerBase.Meta):\n        model = Staff\n        fields = (\n            \"username\",\n            \"first_name\",",
        "detail": "cla_backend.apps.cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "FeedbackSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.serializers",
        "description": "cla_backend.apps.cla_provider.serializers",
        "peekOfCode": "class FeedbackSerializer(FeedbackSerializerBase):\n    issue = serializers.ChoiceField(choices=FEEDBACK_ISSUE)\n    comment = serializers.CharField(max_length=5000, required=False, allow_blank=True)\n    class Meta(FeedbackSerializerBase.Meta):\n        fields = (\n            \"reference\",\n            \"provider\",\n            \"case\",\n            \"created_by\",\n            \"comment\",",
        "detail": "cla_backend.apps.cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "CSVUploadSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.serializers",
        "description": "cla_backend.apps.cla_provider.serializers",
        "peekOfCode": "class CSVUploadSerializer(CSVUploadSerializerBase):\n    body = JSONField(write_only=True)\n    class Meta(CSVUploadSerializerBase.Meta):\n        fields = [\"id\", \"provider\", \"created_by\", \"comment\", \"rows\", \"body\", \"month\", \"created\", \"modified\"]\nclass CSVUploadDetailSerializer(CSVUploadSerializerBase):\n    class Meta(CSVUploadSerializerBase.Meta):\n        fields = [\"id\", \"provider\", \"created_by\", \"comment\", \"body\", \"month\", \"created\", \"modified\"]\nclass CaseNotesHistorySerializer(CaseNotesHistorySerializerBase):\n    class Meta(CaseNotesHistorySerializerBase.Meta):\n        fields = (\"created_by\", \"created\", \"operator_notes\", \"provider_notes\", \"type_notes\")",
        "detail": "cla_backend.apps.cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "CSVUploadDetailSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.serializers",
        "description": "cla_backend.apps.cla_provider.serializers",
        "peekOfCode": "class CSVUploadDetailSerializer(CSVUploadSerializerBase):\n    class Meta(CSVUploadSerializerBase.Meta):\n        fields = [\"id\", \"provider\", \"created_by\", \"comment\", \"body\", \"month\", \"created\", \"modified\"]\nclass CaseNotesHistorySerializer(CaseNotesHistorySerializerBase):\n    class Meta(CaseNotesHistorySerializerBase.Meta):\n        fields = (\"created_by\", \"created\", \"operator_notes\", \"provider_notes\", \"type_notes\")",
        "detail": "cla_backend.apps.cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "CaseNotesHistorySerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.serializers",
        "description": "cla_backend.apps.cla_provider.serializers",
        "peekOfCode": "class CaseNotesHistorySerializer(CaseNotesHistorySerializerBase):\n    class Meta(CaseNotesHistorySerializerBase.Meta):\n        fields = (\"created_by\", \"created\", \"operator_notes\", \"provider_notes\", \"type_notes\")",
        "detail": "cla_backend.apps.cla_provider.serializers",
        "documentation": {}
    },
    {
        "label": "log_staff_created",
        "kind": 2,
        "importPath": "cla_backend.apps.cla_provider.signals",
        "description": "cla_backend.apps.cla_provider.signals",
        "peekOfCode": "def log_staff_created(sender, instance, created, **kwargs):\n    if created:\n        log_staff_action(\"created\", instance)\ndef log_staff_modified(sender, instance, **kwargs):\n    try:\n        sender.objects.get(pk=instance.pk)\n    except sender.DoesNotExist:\n        return\n    log_staff_action(\"modified\", instance)\ndef log_staff_action(action, instance):",
        "detail": "cla_backend.apps.cla_provider.signals",
        "documentation": {}
    },
    {
        "label": "log_staff_modified",
        "kind": 2,
        "importPath": "cla_backend.apps.cla_provider.signals",
        "description": "cla_backend.apps.cla_provider.signals",
        "peekOfCode": "def log_staff_modified(sender, instance, **kwargs):\n    try:\n        sender.objects.get(pk=instance.pk)\n    except sender.DoesNotExist:\n        return\n    log_staff_action(\"modified\", instance)\ndef log_staff_action(action, instance):\n    logger.info(\n        \"Specialist user {}\".format(action),\n        extra={",
        "detail": "cla_backend.apps.cla_provider.signals",
        "documentation": {}
    },
    {
        "label": "log_staff_action",
        "kind": 2,
        "importPath": "cla_backend.apps.cla_provider.signals",
        "description": "cla_backend.apps.cla_provider.signals",
        "peekOfCode": "def log_staff_action(action, instance):\n    logger.info(\n        \"Specialist user {}\".format(action),\n        extra={\n            \"USERNAME\": instance.user.username,\n            \"PROVIDER\": instance.provider.name,\n            \"IS_MANAGER\": unicode(instance.is_manager),\n        },\n    )\n    email = GovUkNotify()",
        "detail": "cla_backend.apps.cla_provider.signals",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_provider.signals",
        "description": "cla_backend.apps.cla_provider.signals",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef log_staff_created(sender, instance, created, **kwargs):\n    if created:\n        log_staff_action(\"created\", instance)\ndef log_staff_modified(sender, instance, **kwargs):\n    try:\n        sender.objects.get(pk=instance.pk)\n    except sender.DoesNotExist:\n        return\n    log_staff_action(\"modified\", instance)",
        "detail": "cla_backend.apps.cla_provider.signals",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_provider.urls",
        "description": "cla_backend.apps.cla_provider.urls",
        "peekOfCode": "router = routers.DefaultRouter()\nrouter.register(r\"category\", views.CategoryViewSet)\nrouter.register(r\"case\", views.CaseViewSet)\nrouter.register(r\"user\", views.UserViewSet, base_name=\"user\")\nrouter.register(r\"event\", views.EventViewSet, base_name=\"event\")\n# router.register(r'knowledgebase/article', views.ArticleViewSet)\n# router.register(r'knowledgebase/category', views.ArticleCategoryViewSet)\nrouter.register(r\"adaptations\", views.AdaptationDetailsMetadataViewSet, base_name=\"adaptations-metadata\")\nrouter.register(r\"contact_research_methods\", views.ContactResearchMethodViewSet)\nrouter.register(r\"mattertype\", views.MatterTypeViewSet)",
        "detail": "cla_backend.apps.cla_provider.urls",
        "documentation": {}
    },
    {
        "label": "case_one2one_router",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_provider.urls",
        "description": "cla_backend.apps.cla_provider.urls",
        "peekOfCode": "case_one2one_router = NestedCLARouter(router, \"case\", lookup=\"case\")\ncase_one2one_router.register(r\"eligibility_check\", views.EligibilityCheckViewSet, base_name=\"eligibility_check\")\ncase_one2one_router.register(r\"personal_details\", views.PersonalDetailsViewSet)\ncase_one2one_router.register(r\"adaptation_details\", views.AdaptationDetailsViewSet)\ncase_one2one_router.register(r\"thirdparty_details\", views.ThirdPartyDetailsViewSet)\ncase_one2one_router.register(r\"diagnosis\", views.DiagnosisViewSet, base_name=\"diagnosis\")\ncase_one2many_router = NestedSimpleRouter(router, r\"case\", lookup=\"case\")\ncase_one2many_router.register(r\"feedback\", views.FeedbackViewSet)\ncase_one2many_router.register(r\"logs\", views.LogViewSet)\ncase_one2many_router.register(r\"notes_history\", views.CaseNotesHistoryViewSet)",
        "detail": "cla_backend.apps.cla_provider.urls",
        "documentation": {}
    },
    {
        "label": "case_one2many_router",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_provider.urls",
        "description": "cla_backend.apps.cla_provider.urls",
        "peekOfCode": "case_one2many_router = NestedSimpleRouter(router, r\"case\", lookup=\"case\")\ncase_one2many_router.register(r\"feedback\", views.FeedbackViewSet)\ncase_one2many_router.register(r\"logs\", views.LogViewSet)\ncase_one2many_router.register(r\"notes_history\", views.CaseNotesHistoryViewSet)\nurlpatterns = patterns(\n    \"\",\n    url(r\"^\", include(case_one2one_router.urls)),\n    url(r\"^\", include(case_one2many_router.urls)),\n    url(r\"^caseExport/$\", views.ProviderExtract.as_view(), name=\"provider-extract\"),\n    url(r\"^\", include(router.urls)),",
        "detail": "cla_backend.apps.cla_provider.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_provider.urls",
        "description": "cla_backend.apps.cla_provider.urls",
        "peekOfCode": "urlpatterns = patterns(\n    \"\",\n    url(r\"^\", include(case_one2one_router.urls)),\n    url(r\"^\", include(case_one2many_router.urls)),\n    url(r\"^caseExport/$\", views.ProviderExtract.as_view(), name=\"provider-extract\"),\n    url(r\"^\", include(router.urls)),\n)",
        "detail": "cla_backend.apps.cla_provider.urls",
        "documentation": {}
    },
    {
        "label": "CLAProviderPermissionViewSetMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.views",
        "description": "cla_backend.apps.cla_provider.views",
        "peekOfCode": "class CLAProviderPermissionViewSetMixin(object):\n    permission_classes = (CLAProviderClientIDPermission,)\n    def get_logged_in_user_model(self):\n        return self.request.user.staff\nclass CategoryViewSet(CLAProviderPermissionViewSetMixin, BaseCategoryViewSet):\n    pass\nclass EligibilityCheckViewSet(\n    CLAProviderPermissionViewSetMixin,\n    ClaUpdateModelMixin,\n    mixins.RetrieveModelMixin,",
        "detail": "cla_backend.apps.cla_provider.views",
        "documentation": {}
    },
    {
        "label": "CategoryViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.views",
        "description": "cla_backend.apps.cla_provider.views",
        "peekOfCode": "class CategoryViewSet(CLAProviderPermissionViewSetMixin, BaseCategoryViewSet):\n    pass\nclass EligibilityCheckViewSet(\n    CLAProviderPermissionViewSetMixin,\n    ClaUpdateModelMixin,\n    mixins.RetrieveModelMixin,\n    BaseNestedEligibilityCheckViewSet,\n):\n    serializer_class = EligibilityCheckSerializer\n    # this is to fix a stupid thing in DRF where pre_save doesn't call super",
        "detail": "cla_backend.apps.cla_provider.views",
        "documentation": {}
    },
    {
        "label": "EligibilityCheckViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.views",
        "description": "cla_backend.apps.cla_provider.views",
        "peekOfCode": "class EligibilityCheckViewSet(\n    CLAProviderPermissionViewSetMixin,\n    ClaUpdateModelMixin,\n    mixins.RetrieveModelMixin,\n    BaseNestedEligibilityCheckViewSet,\n):\n    serializer_class = EligibilityCheckSerializer\n    # this is to fix a stupid thing in DRF where pre_save doesn't call super\n    def perform_create(self, serializer):\n        original_obj = self.get_object()",
        "detail": "cla_backend.apps.cla_provider.views",
        "documentation": {}
    },
    {
        "label": "MatterTypeViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.views",
        "description": "cla_backend.apps.cla_provider.views",
        "peekOfCode": "class MatterTypeViewSet(CLAProviderPermissionViewSetMixin, BaseMatterTypeViewSet):\n    pass\nclass MediaCodeViewSet(CLAProviderPermissionViewSetMixin, BaseMediaCodeViewSet):\n    pass\nclass CaseViewSet(CLAProviderPermissionViewSetMixin, FullCaseViewSet):\n    serializer_class = CaseListSerializer\n    serializer_detail_class = CaseSerializer\n    queryset = Case.objects.exclude(provider=None).select_related(\"diagnosis\", \"eligibility_check\", \"personal_details\")\n    queryset_detail = Case.objects.exclude(provider=None).select_related(\n        \"eligibility_check\",",
        "detail": "cla_backend.apps.cla_provider.views",
        "documentation": {}
    },
    {
        "label": "MediaCodeViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.views",
        "description": "cla_backend.apps.cla_provider.views",
        "peekOfCode": "class MediaCodeViewSet(CLAProviderPermissionViewSetMixin, BaseMediaCodeViewSet):\n    pass\nclass CaseViewSet(CLAProviderPermissionViewSetMixin, FullCaseViewSet):\n    serializer_class = CaseListSerializer\n    serializer_detail_class = CaseSerializer\n    queryset = Case.objects.exclude(provider=None).select_related(\"diagnosis\", \"eligibility_check\", \"personal_details\")\n    queryset_detail = Case.objects.exclude(provider=None).select_related(\n        \"eligibility_check\",\n        \"personal_details\",\n        \"adaptation_details\",",
        "detail": "cla_backend.apps.cla_provider.views",
        "documentation": {}
    },
    {
        "label": "CaseViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.views",
        "description": "cla_backend.apps.cla_provider.views",
        "peekOfCode": "class CaseViewSet(CLAProviderPermissionViewSetMixin, FullCaseViewSet):\n    serializer_class = CaseListSerializer\n    serializer_detail_class = CaseSerializer\n    queryset = Case.objects.exclude(provider=None).select_related(\"diagnosis\", \"eligibility_check\", \"personal_details\")\n    queryset_detail = Case.objects.exclude(provider=None).select_related(\n        \"eligibility_check\",\n        \"personal_details\",\n        \"adaptation_details\",\n        \"matter_type1\",\n        \"matter_type2\",",
        "detail": "cla_backend.apps.cla_provider.views",
        "documentation": {}
    },
    {
        "label": "ProviderExtract",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.views",
        "description": "cla_backend.apps.cla_provider.views",
        "peekOfCode": "class ProviderExtract(APIView):\n    permission_classes = (IsProviderPermission,)\n    authentication_classes = (LegacyCHSAuthentication,)\n    http_method_names = [u\"post\", \"options\"]\n    def options(self, request):\n        \"\"\"\n        CORS requests begin with an OPTIONS request, which must not require\n        authentication and must have CORS headers in the response.\n        \"\"\"\n        return DRFResponse(",
        "detail": "cla_backend.apps.cla_provider.views",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.views",
        "description": "cla_backend.apps.cla_provider.views",
        "peekOfCode": "class UserViewSet(CLAProviderPermissionViewSetMixin, BaseUserViewSet):\n    queryset = Staff.objects.all()\n    model = Staff\n    serializer_class = StaffSerializer\n    permission_classes = (CLAProviderClientIDPermission, IsManagerOrMePermission)\n    def get_queryset(self):\n        this_provider = get_object_or_404(Staff, user=self.request.user).provider\n        qs = super(UserViewSet, self).get_queryset().filter(provider=this_provider)\n        return qs\n    def perform_create(self, serializer):",
        "detail": "cla_backend.apps.cla_provider.views",
        "documentation": {}
    },
    {
        "label": "PersonalDetailsViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.views",
        "description": "cla_backend.apps.cla_provider.views",
        "peekOfCode": "class PersonalDetailsViewSet(CLAProviderPermissionViewSetMixin, FullPersonalDetailsViewSet):\n    serializer_class = PersonalDetailsSerializer\nclass ThirdPartyDetailsViewSet(CLAProviderPermissionViewSetMixin, BaseThirdPartyDetailsViewSet):\n    serializer_class = ThirdPartyDetailsSerializer\nclass EventViewSet(CLAProviderPermissionViewSetMixin, BaseEventViewSet):\n    pass\nclass AdaptationDetailsViewSet(CLAProviderPermissionViewSetMixin, BaseAdaptationDetailsViewSet):\n    serializer_class = AdaptationDetailsSerializer\nclass AdaptationDetailsMetadataViewSet(CLAProviderPermissionViewSetMixin, BaseAdaptationDetailsMetadataViewSet):\n    serializer_class = AdaptationDetailsSerializer",
        "detail": "cla_backend.apps.cla_provider.views",
        "documentation": {}
    },
    {
        "label": "ThirdPartyDetailsViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.views",
        "description": "cla_backend.apps.cla_provider.views",
        "peekOfCode": "class ThirdPartyDetailsViewSet(CLAProviderPermissionViewSetMixin, BaseThirdPartyDetailsViewSet):\n    serializer_class = ThirdPartyDetailsSerializer\nclass EventViewSet(CLAProviderPermissionViewSetMixin, BaseEventViewSet):\n    pass\nclass AdaptationDetailsViewSet(CLAProviderPermissionViewSetMixin, BaseAdaptationDetailsViewSet):\n    serializer_class = AdaptationDetailsSerializer\nclass AdaptationDetailsMetadataViewSet(CLAProviderPermissionViewSetMixin, BaseAdaptationDetailsMetadataViewSet):\n    serializer_class = AdaptationDetailsSerializer\nclass ContactResearchMethodViewSet(CLAProviderPermissionViewSetMixin, BaseContactResearchMethodViewSet):\n    serializer_class = ContactResearchMethodSerializerBase",
        "detail": "cla_backend.apps.cla_provider.views",
        "documentation": {}
    },
    {
        "label": "EventViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.views",
        "description": "cla_backend.apps.cla_provider.views",
        "peekOfCode": "class EventViewSet(CLAProviderPermissionViewSetMixin, BaseEventViewSet):\n    pass\nclass AdaptationDetailsViewSet(CLAProviderPermissionViewSetMixin, BaseAdaptationDetailsViewSet):\n    serializer_class = AdaptationDetailsSerializer\nclass AdaptationDetailsMetadataViewSet(CLAProviderPermissionViewSetMixin, BaseAdaptationDetailsMetadataViewSet):\n    serializer_class = AdaptationDetailsSerializer\nclass ContactResearchMethodViewSet(CLAProviderPermissionViewSetMixin, BaseContactResearchMethodViewSet):\n    serializer_class = ContactResearchMethodSerializerBase\nclass DiagnosisViewSet(CLAProviderPermissionViewSetMixin, BaseDiagnosisViewSet):\n    pass",
        "detail": "cla_backend.apps.cla_provider.views",
        "documentation": {}
    },
    {
        "label": "AdaptationDetailsViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.views",
        "description": "cla_backend.apps.cla_provider.views",
        "peekOfCode": "class AdaptationDetailsViewSet(CLAProviderPermissionViewSetMixin, BaseAdaptationDetailsViewSet):\n    serializer_class = AdaptationDetailsSerializer\nclass AdaptationDetailsMetadataViewSet(CLAProviderPermissionViewSetMixin, BaseAdaptationDetailsMetadataViewSet):\n    serializer_class = AdaptationDetailsSerializer\nclass ContactResearchMethodViewSet(CLAProviderPermissionViewSetMixin, BaseContactResearchMethodViewSet):\n    serializer_class = ContactResearchMethodSerializerBase\nclass DiagnosisViewSet(CLAProviderPermissionViewSetMixin, BaseDiagnosisViewSet):\n    pass\nclass LogViewSet(CLAProviderPermissionViewSetMixin, BaseLogViewSet):\n    serializer_class = LogSerializer",
        "detail": "cla_backend.apps.cla_provider.views",
        "documentation": {}
    },
    {
        "label": "AdaptationDetailsMetadataViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.views",
        "description": "cla_backend.apps.cla_provider.views",
        "peekOfCode": "class AdaptationDetailsMetadataViewSet(CLAProviderPermissionViewSetMixin, BaseAdaptationDetailsMetadataViewSet):\n    serializer_class = AdaptationDetailsSerializer\nclass ContactResearchMethodViewSet(CLAProviderPermissionViewSetMixin, BaseContactResearchMethodViewSet):\n    serializer_class = ContactResearchMethodSerializerBase\nclass DiagnosisViewSet(CLAProviderPermissionViewSetMixin, BaseDiagnosisViewSet):\n    pass\nclass LogViewSet(CLAProviderPermissionViewSetMixin, BaseLogViewSet):\n    serializer_class = LogSerializer\nclass FeedbackViewSet(CLAProviderPermissionViewSetMixin, BaseFeedbackViewSet, ClaCreateModelMixin):\n    serializer_class = FeedbackSerializer",
        "detail": "cla_backend.apps.cla_provider.views",
        "documentation": {}
    },
    {
        "label": "ContactResearchMethodViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.views",
        "description": "cla_backend.apps.cla_provider.views",
        "peekOfCode": "class ContactResearchMethodViewSet(CLAProviderPermissionViewSetMixin, BaseContactResearchMethodViewSet):\n    serializer_class = ContactResearchMethodSerializerBase\nclass DiagnosisViewSet(CLAProviderPermissionViewSetMixin, BaseDiagnosisViewSet):\n    pass\nclass LogViewSet(CLAProviderPermissionViewSetMixin, BaseLogViewSet):\n    serializer_class = LogSerializer\nclass FeedbackViewSet(CLAProviderPermissionViewSetMixin, BaseFeedbackViewSet, ClaCreateModelMixin):\n    serializer_class = FeedbackSerializer\n    filter_backends = (OrderingFilter,)\n    ordering = (\"-created\",)",
        "detail": "cla_backend.apps.cla_provider.views",
        "documentation": {}
    },
    {
        "label": "DiagnosisViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.views",
        "description": "cla_backend.apps.cla_provider.views",
        "peekOfCode": "class DiagnosisViewSet(CLAProviderPermissionViewSetMixin, BaseDiagnosisViewSet):\n    pass\nclass LogViewSet(CLAProviderPermissionViewSetMixin, BaseLogViewSet):\n    serializer_class = LogSerializer\nclass FeedbackViewSet(CLAProviderPermissionViewSetMixin, BaseFeedbackViewSet, ClaCreateModelMixin):\n    serializer_class = FeedbackSerializer\n    filter_backends = (OrderingFilter,)\n    ordering = (\"-created\",)\n    def perform_create(self, serializer):\n        serializer.validated_data[\"case\"] = self.get_parent_object()",
        "detail": "cla_backend.apps.cla_provider.views",
        "documentation": {}
    },
    {
        "label": "LogViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.views",
        "description": "cla_backend.apps.cla_provider.views",
        "peekOfCode": "class LogViewSet(CLAProviderPermissionViewSetMixin, BaseLogViewSet):\n    serializer_class = LogSerializer\nclass FeedbackViewSet(CLAProviderPermissionViewSetMixin, BaseFeedbackViewSet, ClaCreateModelMixin):\n    serializer_class = FeedbackSerializer\n    filter_backends = (OrderingFilter,)\n    ordering = (\"-created\",)\n    def perform_create(self, serializer):\n        serializer.validated_data[\"case\"] = self.get_parent_object()\n        serializer.validated_data[\"created_by\"] = Staff.objects.get(user=self.request.user)\n        super(FeedbackViewSet, self).perform_create(serializer)",
        "detail": "cla_backend.apps.cla_provider.views",
        "documentation": {}
    },
    {
        "label": "FeedbackViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.views",
        "description": "cla_backend.apps.cla_provider.views",
        "peekOfCode": "class FeedbackViewSet(CLAProviderPermissionViewSetMixin, BaseFeedbackViewSet, ClaCreateModelMixin):\n    serializer_class = FeedbackSerializer\n    filter_backends = (OrderingFilter,)\n    ordering = (\"-created\",)\n    def perform_create(self, serializer):\n        serializer.validated_data[\"case\"] = self.get_parent_object()\n        serializer.validated_data[\"created_by\"] = Staff.objects.get(user=self.request.user)\n        super(FeedbackViewSet, self).perform_create(serializer)\nclass CSVUploadViewSet(CLAProviderPermissionViewSetMixin, BaseCSVUploadViewSet):\n    serializer_class = CSVUploadSerializer",
        "detail": "cla_backend.apps.cla_provider.views",
        "documentation": {}
    },
    {
        "label": "CSVUploadViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.views",
        "description": "cla_backend.apps.cla_provider.views",
        "peekOfCode": "class CSVUploadViewSet(CLAProviderPermissionViewSetMixin, BaseCSVUploadViewSet):\n    serializer_class = CSVUploadSerializer\n    serializer_detail_class = CSVUploadDetailSerializer\n    ordering = (\"-month\",)\n    pagination_class = StandardResultsSetPagination\n    def get_queryset(self, *args, **kwargs):\n        this_provider = get_object_or_404(Staff, user=self.request.user).provider\n        qs = super(CSVUploadViewSet, self).get_queryset(*args, **kwargs).filter(provider=this_provider)\n        return qs\n    def set_provider_user(self, serializer):",
        "detail": "cla_backend.apps.cla_provider.views",
        "documentation": {}
    },
    {
        "label": "CaseNotesHistoryViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.cla_provider.views",
        "description": "cla_backend.apps.cla_provider.views",
        "peekOfCode": "class CaseNotesHistoryViewSet(CLAProviderPermissionViewSetMixin, BaseCaseNotesHistoryViewSet):\n    serializer_class = CaseNotesHistorySerializer",
        "detail": "cla_backend.apps.cla_provider.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "cla_backend.apps.cla_provider.views",
        "description": "cla_backend.apps.cla_provider.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CLAProviderPermissionViewSetMixin(object):\n    permission_classes = (CLAProviderClientIDPermission,)\n    def get_logged_in_user_model(self):\n        return self.request.user.staff\nclass CategoryViewSet(CLAProviderPermissionViewSetMixin, BaseCategoryViewSet):\n    pass\nclass EligibilityCheckViewSet(\n    CLAProviderPermissionViewSetMixin,\n    ClaUpdateModelMixin,",
        "detail": "cla_backend.apps.cla_provider.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.complaints.migrations.0001_initial",
        "description": "cla_backend.apps.complaints.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        (\"legalaid\", \"0010_complaints_mi_permissions\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"Category\",\n            fields=[\n                (\"id\", models.AutoField(verbose_name=\"ID\", serialize=False, auto_created=True, primary_key=True)),",
        "detail": "cla_backend.apps.complaints.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.complaints.migrations.0002_complaint_audit_log",
        "description": "cla_backend.apps.complaints.migrations.0002_complaint_audit_log",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"cla_auditlog\", \"0001_initial\"), (\"complaints\", \"0001_initial\")]\n    operations = [\n        migrations.AddField(\n            model_name=\"complaint\",\n            name=\"audit_log\",\n            field=models.ManyToManyField(to=\"cla_auditlog.AuditLog\", blank=True),\n            preserve_default=True,\n        )\n    ]",
        "detail": "cla_backend.apps.complaints.migrations.0002_complaint_audit_log",
        "documentation": {}
    },
    {
        "label": "category",
        "kind": 5,
        "importPath": "cla_backend.apps.complaints.tests.mommy_recipes",
        "description": "cla_backend.apps.complaints.tests.mommy_recipes",
        "peekOfCode": "category = Recipe(Category)\ncomplaint = Recipe(Complaint, eod=foreign_key(eod_details), category=foreign_key(category))",
        "detail": "cla_backend.apps.complaints.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "complaint",
        "kind": 5,
        "importPath": "cla_backend.apps.complaints.tests.mommy_recipes",
        "description": "cla_backend.apps.complaints.tests.mommy_recipes",
        "peekOfCode": "complaint = Recipe(Complaint, eod=foreign_key(eod_details), category=foreign_key(category))",
        "detail": "cla_backend.apps.complaints.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "ComplaintTestMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.complaints.tests.test_complaints_api",
        "description": "cla_backend.apps.complaints.tests.test_complaints_api",
        "peekOfCode": "class ComplaintTestMixin(object):\n    API_URL_BASE_NAME = \"complaints\"\n    RESOURCE_RECIPE = \"complaints.complaint\"\nclass SearchComplaintTestCase(\n    ComplaintTestMixin, CLAOperatorAuthBaseApiTestMixin, SimpleResourceAPIMixin, APITestCase\n):\n    \"\"\"\n    Tests to check the search functionality for complaints\n    \"\"\"\n    API_URL_BASE_NAME = \"complaints\"",
        "detail": "cla_backend.apps.complaints.tests.test_complaints_api",
        "documentation": {}
    },
    {
        "label": "SearchComplaintTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.complaints.tests.test_complaints_api",
        "description": "cla_backend.apps.complaints.tests.test_complaints_api",
        "peekOfCode": "class SearchComplaintTestCase(\n    ComplaintTestMixin, CLAOperatorAuthBaseApiTestMixin, SimpleResourceAPIMixin, APITestCase\n):\n    \"\"\"\n    Tests to check the search functionality for complaints\n    \"\"\"\n    API_URL_BASE_NAME = \"complaints\"\n    RESOURCE_RECIPE = \"complaints.complaint\"\n    @classmethod\n    def setUpTestData(cls):",
        "detail": "cla_backend.apps.complaints.tests.test_complaints_api",
        "documentation": {}
    },
    {
        "label": "ComplaintTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.complaints.tests.test_complaints_api",
        "description": "cla_backend.apps.complaints.tests.test_complaints_api",
        "peekOfCode": "class ComplaintTestCase(ComplaintTestMixin, CLAOperatorAuthBaseApiTestMixin, SimpleResourceAPIMixin, APITestCase):\n    def assertSingleEventCreated(self, resource, event_code):\n        created_log = ComplaintLog.objects.get(object_id=resource.pk, code=event_code)\n        self.assertEqual(created_log.code, event_code)\n    @property\n    def response_keys(self):\n        return [\n            \"id\",\n            \"created\",\n            \"modified\",",
        "detail": "cla_backend.apps.complaints.tests.test_complaints_api",
        "documentation": {}
    },
    {
        "label": "ProviderComplaintTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.complaints.tests.test_complaints_api",
        "description": "cla_backend.apps.complaints.tests.test_complaints_api",
        "peekOfCode": "class ProviderComplaintTestCase(\n    ComplaintTestMixin, CLAProviderAuthBaseApiTestMixin, SimpleResourceAPIMixin, APITestCase\n):\n    def assertUrlsNonExistant(self, url_property_function):\n        try:\n            url_property_function()\n            self.fail(\"Complaint url should not exist for providers\")\n        except NoReverseMatch:\n            pass\n    def test_methods_not_allowed(self):",
        "detail": "cla_backend.apps.complaints.tests.test_complaints_api",
        "documentation": {}
    },
    {
        "label": "utc",
        "kind": 5,
        "importPath": "cla_backend.apps.complaints.tests.test_complaints_api",
        "description": "cla_backend.apps.complaints.tests.test_complaints_api",
        "peekOfCode": "utc = pytz.utc\nclass ComplaintTestMixin(object):\n    API_URL_BASE_NAME = \"complaints\"\n    RESOURCE_RECIPE = \"complaints.complaint\"\nclass SearchComplaintTestCase(\n    ComplaintTestMixin, CLAOperatorAuthBaseApiTestMixin, SimpleResourceAPIMixin, APITestCase\n):\n    \"\"\"\n    Tests to check the search functionality for complaints\n    \"\"\"",
        "detail": "cla_backend.apps.complaints.tests.test_complaints_api",
        "documentation": {}
    },
    {
        "label": "ComplaintAdmin",
        "kind": 6,
        "importPath": "cla_backend.apps.complaints.admin",
        "description": "cla_backend.apps.complaints.admin",
        "peekOfCode": "class ComplaintAdmin(admin.ModelAdmin):\n    raw_id_fields = [\"eod\"]\n    def save_model(self, request, obj, form, change):\n        if not obj.pk:\n            obj.created_by = request.user\n        obj.save()\n    # Shouldn't be editable\n    exclude = (\"audit_log\",)\nadmin.site.register(Complaint, ComplaintAdmin)\nadmin.site.register(Category)",
        "detail": "cla_backend.apps.complaints.admin",
        "documentation": {}
    },
    {
        "label": "COMPLAINT_SOURCE",
        "kind": 5,
        "importPath": "cla_backend.apps.complaints.constants",
        "description": "cla_backend.apps.complaints.constants",
        "peekOfCode": "COMPLAINT_SOURCE = Choices((\"EMAIL\", \"email\", \"email\"), (\"PHONE\", \"phone\", \"phone\"), (\"LETTER\", \"letter\", \"letter\"))\n# days between complaint creation and closing date (whether resolved or not)\nSLA_DAYS = 15\n# days between complaint creation and holding letter being sent\nHOLDING_LETTER_SLA_DAYS = 1",
        "detail": "cla_backend.apps.complaints.constants",
        "documentation": {}
    },
    {
        "label": "SLA_DAYS",
        "kind": 5,
        "importPath": "cla_backend.apps.complaints.constants",
        "description": "cla_backend.apps.complaints.constants",
        "peekOfCode": "SLA_DAYS = 15\n# days between complaint creation and holding letter being sent\nHOLDING_LETTER_SLA_DAYS = 1",
        "detail": "cla_backend.apps.complaints.constants",
        "documentation": {}
    },
    {
        "label": "HOLDING_LETTER_SLA_DAYS",
        "kind": 5,
        "importPath": "cla_backend.apps.complaints.constants",
        "description": "cla_backend.apps.complaints.constants",
        "peekOfCode": "HOLDING_LETTER_SLA_DAYS = 1",
        "detail": "cla_backend.apps.complaints.constants",
        "documentation": {}
    },
    {
        "label": "ComplaintEvent",
        "kind": 6,
        "importPath": "cla_backend.apps.complaints.events",
        "description": "cla_backend.apps.complaints.events",
        "peekOfCode": "class ComplaintEvent(BaseEvent):\n    key = \"complaint\"\n    codes = OrderedDict(\n        [\n            (\n                \"COMPLAINT_CREATED\",\n                {\n                    \"type\": LOG_TYPES.SYSTEM,\n                    \"level\": LOG_LEVELS.HIGH,\n                    \"selectable_by\": [],",
        "detail": "cla_backend.apps.complaints.events",
        "documentation": {}
    },
    {
        "label": "ComplaintLogForm",
        "kind": 6,
        "importPath": "cla_backend.apps.complaints.forms",
        "description": "cla_backend.apps.complaints.forms",
        "peekOfCode": "class ComplaintLogForm(EventSpecificLogForm):\n    LOG_EVENT_KEY = \"complaint\"\n    NOTES_MANDATORY = True\n    notes = forms.CharField(required=True, max_length=10000)\n    resolved = forms.NullBooleanField(required=False)\n    @classmethod\n    def get_operator_code_objects(cls):\n        event_cls = event_registry.get_event(cls.LOG_EVENT_KEY)\n        return [item for item in event_cls.codes.items() if LOG_ROLES.OPERATOR in item[1][\"selectable_by\"]]\n    def __init__(self, *args, **kwargs):",
        "detail": "cla_backend.apps.complaints.forms",
        "documentation": {}
    },
    {
        "label": "ComplaintManager",
        "kind": 6,
        "importPath": "cla_backend.apps.complaints.models",
        "description": "cla_backend.apps.complaints.models",
        "peekOfCode": "class ComplaintManager(models.Manager):\n    def get_queryset(self):\n        return (\n            super(ComplaintManager, self)\n            .get_queryset()\n            .select_related(\n                \"eod\",\n                \"eod__case\",\n                \"eod__case__personal_details\",\n                \"eod__case__eligibility_check\",",
        "detail": "cla_backend.apps.complaints.models",
        "documentation": {}
    },
    {
        "label": "Complaint",
        "kind": 6,
        "importPath": "cla_backend.apps.complaints.models",
        "description": "cla_backend.apps.complaints.models",
        "peekOfCode": "class Complaint(TimeStampedModel):\n    eod = models.ForeignKey(\"legalaid.EODDetails\")\n    description = models.TextField(null=True, blank=True)\n    source = models.CharField(max_length=15, choices=COMPLAINT_SOURCE, blank=True)\n    level = models.PositiveSmallIntegerField(\n        choices=((LOG_LEVELS.HIGH, \"Major\"), (LOG_LEVELS.MINOR, \"Minor\")), default=LOG_LEVELS.MINOR\n    )\n    justified = models.NullBooleanField()\n    resolved = models.NullBooleanField()\n    category = models.ForeignKey(\"Category\", blank=True, null=True)",
        "detail": "cla_backend.apps.complaints.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "cla_backend.apps.complaints.models",
        "description": "cla_backend.apps.complaints.models",
        "peekOfCode": "class Category(TimeStampedModel):\n    name = models.CharField(max_length=255)\n    class Meta:\n        ordering = (\"name\",)\n        verbose_name_plural = \"categories\"\n    def __unicode__(self):\n        return self.name",
        "detail": "cla_backend.apps.complaints.models",
        "documentation": {}
    },
    {
        "label": "CreatedByField",
        "kind": 6,
        "importPath": "cla_backend.apps.complaints.serializers",
        "description": "cla_backend.apps.complaints.serializers",
        "peekOfCode": "class CreatedByField(serializers.RelatedField):\n    def to_representation(self, obj):\n        return {\"username\": obj.username, \"first_name\": obj.first_name, \"last_name\": obj.last_name}\nclass CategorySerializerBase(serializers.ModelSerializer):\n    class Meta:\n        model = Category\n        fields = (\"id\", \"name\")\nclass ComplaintSerializerBase(serializers.ModelSerializer):\n    eod = UUIDSerializer(slug_field=\"reference\", queryset=EODDetails.objects.all())\n    owner = serializers.SlugRelatedField(",
        "detail": "cla_backend.apps.complaints.serializers",
        "documentation": {}
    },
    {
        "label": "CategorySerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.complaints.serializers",
        "description": "cla_backend.apps.complaints.serializers",
        "peekOfCode": "class CategorySerializerBase(serializers.ModelSerializer):\n    class Meta:\n        model = Category\n        fields = (\"id\", \"name\")\nclass ComplaintSerializerBase(serializers.ModelSerializer):\n    eod = UUIDSerializer(slug_field=\"reference\", queryset=EODDetails.objects.all())\n    owner = serializers.SlugRelatedField(\n        slug_field=\"username\", required=False, queryset=get_user_model().objects.all()\n    )\n    created_by = CreatedByField(read_only=True)",
        "detail": "cla_backend.apps.complaints.serializers",
        "documentation": {}
    },
    {
        "label": "ComplaintSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.complaints.serializers",
        "description": "cla_backend.apps.complaints.serializers",
        "peekOfCode": "class ComplaintSerializerBase(serializers.ModelSerializer):\n    eod = UUIDSerializer(slug_field=\"reference\", queryset=EODDetails.objects.all())\n    owner = serializers.SlugRelatedField(\n        slug_field=\"username\", required=False, queryset=get_user_model().objects.all()\n    )\n    created_by = CreatedByField(read_only=True)\n    category_name = serializers.CharField(source=\"category.name\", read_only=True)\n    full_name = serializers.CharField(source=\"eod.case.personal_details.full_name\", read_only=True)\n    category_of_law = serializers.CharField(source=\"eod.case.eligibility_check.category\", read_only=True)\n    case_reference = serializers.CharField(source=\"eod.case.reference\", read_only=True)",
        "detail": "cla_backend.apps.complaints.serializers",
        "documentation": {}
    },
    {
        "label": "ComplaintLogSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.complaints.serializers",
        "description": "cla_backend.apps.complaints.serializers",
        "peekOfCode": "class ComplaintLogSerializerBase(LogSerializerBase):\n    class Meta:\n        model = ComplaintLog",
        "detail": "cla_backend.apps.complaints.serializers",
        "documentation": {}
    },
    {
        "label": "ComplaintFormActionMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.complaints.views",
        "description": "cla_backend.apps.complaints.views",
        "peekOfCode": "class ComplaintFormActionMixin(FormActionMixin):\n    \"\"\"\n    This is for backward compatibility\n    \"\"\"\n    FORM_ACTION_OBJ_PARAM = \"complaint\"\nclass BaseComplaintViewSet(\n    ComplaintFormActionMixin,\n    ClaCreateModelMixin,\n    ClaUpdateModelMixin,\n    ClaRetrieveModelMixinWithSelfInstance,",
        "detail": "cla_backend.apps.complaints.views",
        "documentation": {}
    },
    {
        "label": "BaseComplaintViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.complaints.views",
        "description": "cla_backend.apps.complaints.views",
        "peekOfCode": "class BaseComplaintViewSet(\n    ComplaintFormActionMixin,\n    ClaCreateModelMixin,\n    ClaUpdateModelMixin,\n    ClaRetrieveModelMixinWithSelfInstance,\n    mixins.ListModelMixin,\n    CompatGenericViewSet,\n):\n    queryset = Complaint.objects.all()\n    model = Complaint",
        "detail": "cla_backend.apps.complaints.views",
        "documentation": {}
    },
    {
        "label": "BaseComplaintCategoryViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.complaints.views",
        "description": "cla_backend.apps.complaints.views",
        "peekOfCode": "class BaseComplaintCategoryViewSet(mixins.ListModelMixin, mixins.RetrieveModelMixin, CompatGenericViewSet):\n    queryset = Category.objects.all()\n    model = Category\n    serializer_class = CategorySerializerBase\nclass BaseComplaintConstantsView(rest_views.APIView):\n    @classmethod\n    def get_field_choices(cls, key):\n        return [\n            {\"value\": choice[0], \"description\": capfirst(force_text(choice[1]))}\n            for choice in Complaint._meta.get_field(key).choices",
        "detail": "cla_backend.apps.complaints.views",
        "documentation": {}
    },
    {
        "label": "BaseComplaintConstantsView",
        "kind": 6,
        "importPath": "cla_backend.apps.complaints.views",
        "description": "cla_backend.apps.complaints.views",
        "peekOfCode": "class BaseComplaintConstantsView(rest_views.APIView):\n    @classmethod\n    def get_field_choices(cls, key):\n        return [\n            {\"value\": choice[0], \"description\": capfirst(force_text(choice[1]))}\n            for choice in Complaint._meta.get_field(key).choices\n        ]\n    @classmethod\n    def make_bool_choices(cls, *args):\n        return [dict(zip((\"value\", \"description\"), item)) for item in zip((True, False), args)]",
        "detail": "cla_backend.apps.complaints.views",
        "documentation": {}
    },
    {
        "label": "BaseComplaintLogViewset",
        "kind": 6,
        "importPath": "cla_backend.apps.complaints.views",
        "description": "cla_backend.apps.complaints.views",
        "peekOfCode": "class BaseComplaintLogViewset(\n    mixins.ListModelMixin, mixins.RetrieveModelMixin, NestedGenericModelMixin, CompatGenericViewSet\n):\n    model = ComplaintLog\n    queryset = ComplaintLog.objects.all()\n    serializer_class = ComplaintLogSerializerBase\n    lookup_field = \"pk\"\n    PARENT_FIELD = \"logs\"\n    def get_queryset(self):\n        content_type = ContentType.objects.get_for_model(Complaint)",
        "detail": "cla_backend.apps.complaints.views",
        "documentation": {}
    },
    {
        "label": "MarkdownAdminField",
        "kind": 6,
        "importPath": "cla_backend.apps.core.admin.fields",
        "description": "cla_backend.apps.core.admin.fields",
        "peekOfCode": "class MarkdownAdminField(forms.CharField):\n    \"\"\"\n    Markdown Admin Field which uses AdminPagedownWidget as default widget and\n    supports whitelist validation.\n    The extra parameter 'markdown_whitelist' manages the specific tags,\n    attributes and styles allowed.\n    The value is a dict of this form:\n        {\n            'tags': ['strong', 'b', 'ul', 'li', 'ol', 'p'],\n            'attributes': {",
        "detail": "cla_backend.apps.core.admin.fields",
        "documentation": {}
    },
    {
        "label": "DEFAULT_MARKDOWN_WHITELIST",
        "kind": 5,
        "importPath": "cla_backend.apps.core.admin.fields",
        "description": "cla_backend.apps.core.admin.fields",
        "peekOfCode": "DEFAULT_MARKDOWN_WHITELIST = {\"tags\": [\"strong\", \"b\", \"ul\", \"li\", \"ol\", \"p\"], \"attributes\": [], \"styles\": []}\nclass MarkdownAdminField(forms.CharField):\n    \"\"\"\n    Markdown Admin Field which uses AdminPagedownWidget as default widget and\n    supports whitelist validation.\n    The extra parameter 'markdown_whitelist' manages the specific tags,\n    attributes and styles allowed.\n    The value is a dict of this form:\n        {\n            'tags': ['strong', 'b', 'ul', 'li', 'ol', 'p'],",
        "detail": "cla_backend.apps.core.admin.fields",
        "documentation": {}
    },
    {
        "label": "OneToOneUserAdminForm",
        "kind": 6,
        "importPath": "cla_backend.apps.core.admin.forms",
        "description": "cla_backend.apps.core.admin.forms",
        "peekOfCode": "class OneToOneUserAdminForm(forms.ModelForm):\n    error_messages = {\n        \"duplicate_username\": _(\"A user with that username already exists.\"),\n        \"password_mismatch\": _(\"The two password fields didn't match.\"),\n    }\n    username = forms.RegexField(\n        label=_(\"Username\"),\n        max_length=30,\n        regex=r\"^[\\w.@+-]+$\",\n        help_text=_(\"Required. 30 characters or fewer. Letters, digits and \" \"@/./+/-/_ only.\"),",
        "detail": "cla_backend.apps.core.admin.forms",
        "documentation": {}
    },
    {
        "label": "ClaSessionSecurityMiddleware",
        "kind": 6,
        "importPath": "cla_backend.apps.core.admin.middleware",
        "description": "cla_backend.apps.core.admin.middleware",
        "peekOfCode": "class ClaSessionSecurityMiddleware(SessionSecurityMiddleware):\n    \"\"\"\n    Extends session_security and adds the ability to specify passive urls via regular expression.\n    \"\"\"\n    def __init__(self):\n        self.PASSIVE_URL_REGEX_LIST = getattr(settings, \"PASSIVE_URL_REGEX_LIST\", [])\n        super(ClaSessionSecurityMiddleware, self).__init__()\n    def _is_passive_request(self, request):\n        url_match_found = any(re.search(url_check, request.path) for url_check in self.PASSIVE_URL_REGEX_LIST)\n        if url_match_found and request.path != reverse('session_security_ping'):",
        "detail": "cla_backend.apps.core.admin.middleware",
        "documentation": {}
    },
    {
        "label": "OneToOneUserAdmin",
        "kind": 6,
        "importPath": "cla_backend.apps.core.admin.modeladmin",
        "description": "cla_backend.apps.core.admin.modeladmin",
        "peekOfCode": "class OneToOneUserAdmin(admin.ModelAdmin):\n    change_password_form = AdminPasswordChangeForm\n    change_user_password_template = None\n    def username_display(self, one2one_model):\n        return one2one_model.user.username\n    username_display.short_description = \"Username\"\n    username_display.admin_order_field = \"user__username\"\n    def first_name_display(self, one2one_model):\n        return one2one_model.user.first_name\n    first_name_display.short_description = \"First name\"",
        "detail": "cla_backend.apps.core.admin.modeladmin",
        "documentation": {}
    },
    {
        "label": "sensitive_post_parameters_m",
        "kind": 5,
        "importPath": "cla_backend.apps.core.admin.modeladmin",
        "description": "cla_backend.apps.core.admin.modeladmin",
        "peekOfCode": "sensitive_post_parameters_m = method_decorator(sensitive_post_parameters())\nrequire_POST_m = method_decorator(require_POST)\nclass OneToOneUserAdmin(admin.ModelAdmin):\n    change_password_form = AdminPasswordChangeForm\n    change_user_password_template = None\n    def username_display(self, one2one_model):\n        return one2one_model.user.username\n    username_display.short_description = \"Username\"\n    username_display.admin_order_field = \"user__username\"\n    def first_name_display(self, one2one_model):",
        "detail": "cla_backend.apps.core.admin.modeladmin",
        "documentation": {}
    },
    {
        "label": "require_POST_m",
        "kind": 5,
        "importPath": "cla_backend.apps.core.admin.modeladmin",
        "description": "cla_backend.apps.core.admin.modeladmin",
        "peekOfCode": "require_POST_m = method_decorator(require_POST)\nclass OneToOneUserAdmin(admin.ModelAdmin):\n    change_password_form = AdminPasswordChangeForm\n    change_user_password_template = None\n    def username_display(self, one2one_model):\n        return one2one_model.user.username\n    username_display.short_description = \"Username\"\n    username_display.admin_order_field = \"user__username\"\n    def first_name_display(self, one2one_model):\n        return one2one_model.user.first_name",
        "detail": "cla_backend.apps.core.admin.modeladmin",
        "documentation": {}
    },
    {
        "label": "detail_route",
        "kind": 2,
        "importPath": "cla_backend.apps.core.drf.decorators",
        "description": "cla_backend.apps.core.drf.decorators",
        "peekOfCode": "def detail_route(methods=[\"get\"], **kwargs):\n    \"\"\"\n    Used to mark a method on a ViewSet that should be routed for detail requests.\n    \"\"\"\n    def decorator(func):\n        func.bind_to_methods = methods\n        func.detail = True\n        func.kwargs = kwargs\n        return func\n    return decorator",
        "detail": "cla_backend.apps.core.drf.decorators",
        "documentation": {}
    },
    {
        "label": "ConflictException",
        "kind": 6,
        "importPath": "cla_backend.apps.core.drf.exceptions",
        "description": "cla_backend.apps.core.drf.exceptions",
        "peekOfCode": "class ConflictException(APIException):\n    status_code = status.HTTP_409_CONFLICT\n    default_detail = \"Resource already exists.\"",
        "detail": "cla_backend.apps.core.drf.exceptions",
        "documentation": {}
    },
    {
        "label": "MoneyIntervalFieldMaxValidator",
        "kind": 6,
        "importPath": "cla_backend.apps.core.drf.fields",
        "description": "cla_backend.apps.core.drf.fields",
        "peekOfCode": "class MoneyIntervalFieldMaxValidator(validators.MaxValueValidator):\n    def __call__(self, obj):\n        value = getattr(obj, \"per_interval_value\", None)\n        if value is not None:\n            return super(MoneyIntervalFieldMaxValidator, self).__call__(value)\nclass MoneyIntervalFieldMinValidator(validators.MinValueValidator):\n    def __call__(self, obj):\n        value = getattr(obj, \"per_interval_value\", None)\n        if value is not None:\n            return super(MoneyIntervalFieldMinValidator, self).__call__(value)",
        "detail": "cla_backend.apps.core.drf.fields",
        "documentation": {}
    },
    {
        "label": "MoneyIntervalFieldMinValidator",
        "kind": 6,
        "importPath": "cla_backend.apps.core.drf.fields",
        "description": "cla_backend.apps.core.drf.fields",
        "peekOfCode": "class MoneyIntervalFieldMinValidator(validators.MinValueValidator):\n    def __call__(self, obj):\n        value = getattr(obj, \"per_interval_value\", None)\n        if value is not None:\n            return super(MoneyIntervalFieldMinValidator, self).__call__(value)\nclass MoneyIntervalDRFField(serializers.Field):\n    type_name = \"MoneyIntervalDRFField\"\n    type_label = \"moneyIntervalDRFField\"\n    form_field_class = MoneyIntervalField\n    def __init__(self, max_value=9999999999, min_value=0, *args, **kwargs):",
        "detail": "cla_backend.apps.core.drf.fields",
        "documentation": {}
    },
    {
        "label": "MoneyIntervalDRFField",
        "kind": 6,
        "importPath": "cla_backend.apps.core.drf.fields",
        "description": "cla_backend.apps.core.drf.fields",
        "peekOfCode": "class MoneyIntervalDRFField(serializers.Field):\n    type_name = \"MoneyIntervalDRFField\"\n    type_label = \"moneyIntervalDRFField\"\n    form_field_class = MoneyIntervalField\n    def __init__(self, max_value=9999999999, min_value=0, *args, **kwargs):\n        kwargs.setdefault(\"validators\", [])\n        if max_value is not None:\n            kwargs[\"validators\"].append(MoneyIntervalFieldMaxValidator(max_value))\n        if min_value is not None:\n            kwargs[\"validators\"].append(MoneyIntervalFieldMinValidator(min_value))",
        "detail": "cla_backend.apps.core.drf.fields",
        "documentation": {}
    },
    {
        "label": "ThreePartDateField",
        "kind": 6,
        "importPath": "cla_backend.apps.core.drf.fields",
        "description": "cla_backend.apps.core.drf.fields",
        "peekOfCode": "class ThreePartDateField(serializers.Field):\n    \"\"\"\n    A serializer field for handling three part date time JSON formatted\n    datetime.date.\n    Expected input format:\n        {\n            \"day\": 25,\n            \"month\": 12,\n            \"year\": 2012\n        }",
        "detail": "cla_backend.apps.core.drf.fields",
        "documentation": {}
    },
    {
        "label": "NoParentReferenceException",
        "kind": 6,
        "importPath": "cla_backend.apps.core.drf.mixins",
        "description": "cla_backend.apps.core.drf.mixins",
        "peekOfCode": "class NoParentReferenceException(BaseException):\n    pass\nclass NestedGenericModelMixin(object):\n    def get_parent_lookup_kwarg(self):\n        return self.parent_prefix + \"_\" + self.lookup_field\n    # def get_parent_queryset(self):\n    #     return self.parent(requet=self.request).get_queryset()\n    def get_parent_object(self):\n        parent_key = self.kwargs.get(self.get_parent_lookup_kwarg(), None)\n        if not parent_key:",
        "detail": "cla_backend.apps.core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "NestedGenericModelMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.core.drf.mixins",
        "description": "cla_backend.apps.core.drf.mixins",
        "peekOfCode": "class NestedGenericModelMixin(object):\n    def get_parent_lookup_kwarg(self):\n        return self.parent_prefix + \"_\" + self.lookup_field\n    # def get_parent_queryset(self):\n    #     return self.parent(requet=self.request).get_queryset()\n    def get_parent_object(self):\n        parent_key = self.kwargs.get(self.get_parent_lookup_kwarg(), None)\n        if not parent_key:\n            raise NoParentReferenceException(\"Trying to do a nested lookup on a non-nested viewset\")\n        parent_viewset_instance = self.parent(request=self.request, kwargs={self.lookup_field: parent_key})",
        "detail": "cla_backend.apps.core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "JsonPatchViewSetMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.core.drf.mixins",
        "description": "cla_backend.apps.core.drf.mixins",
        "peekOfCode": "class JsonPatchViewSetMixin(object):\n    @property\n    def jsonpatch(self):\n        forwards = jsonpatch.JsonPatch.from_diff(self.__pre_save__, self.__post_save__)\n        backwards = jsonpatch.JsonPatch.from_diff(self.__post_save__, self.__pre_save__)\n        serializer = self.get_serializer_class()\n        return {\n            \"serializer\": \".\".join([serializer.__module__, serializer.__name__]),\n            \"backwards\": backwards.patch,\n            \"forwards\": forwards.patch,",
        "detail": "cla_backend.apps.core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "FormActionMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.core.drf.mixins",
        "description": "cla_backend.apps.core.drf.mixins",
        "peekOfCode": "class FormActionMixin(object):\n    FORM_ACTION_OBJ_PARAM = \"obj\"\n    def _form_action(self, request, Form, no_body=True, form_kwargs={}):\n        obj = self.get_object()\n        _form_kwargs = form_kwargs.copy()\n        _form_kwargs[\"data\"] = request.data\n        _form_kwargs[self.FORM_ACTION_OBJ_PARAM] = obj\n        form = Form(**_form_kwargs)\n        if form.is_valid():\n            form.save(request.user)",
        "detail": "cla_backend.apps.core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "ClaCreateModelMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.core.drf.mixins",
        "description": "cla_backend.apps.core.drf.mixins",
        "peekOfCode": "class ClaCreateModelMixin(mixins.CreateModelMixin):\n    def perform_create(self, serializer):\n        obj = serializer.save()\n        self.post_save(serializer.instance, created=True)\n        return obj\nclass ClaRetrieveModelMixinWithSelfInstance(mixins.RetrieveModelMixin):\n    \"\"\"\n    Retrieve a model instance.\n    \"\"\"\n    def retrieve(self, request, *args, **kwargs):",
        "detail": "cla_backend.apps.core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "ClaRetrieveModelMixinWithSelfInstance",
        "kind": 6,
        "importPath": "cla_backend.apps.core.drf.mixins",
        "description": "cla_backend.apps.core.drf.mixins",
        "peekOfCode": "class ClaRetrieveModelMixinWithSelfInstance(mixins.RetrieveModelMixin):\n    \"\"\"\n    Retrieve a model instance.\n    \"\"\"\n    def retrieve(self, request, *args, **kwargs):\n        self.instance = self.get_object()\n        serializer = self.get_serializer(self.instance)\n        return DRFResponse(serializer.data)\nclass ClaUpdateModelMixin(mixins.UpdateModelMixin):\n    def perform_update(self, serializer):",
        "detail": "cla_backend.apps.core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "ClaUpdateModelMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.core.drf.mixins",
        "description": "cla_backend.apps.core.drf.mixins",
        "peekOfCode": "class ClaUpdateModelMixin(mixins.UpdateModelMixin):\n    def perform_update(self, serializer):\n        super(ClaUpdateModelMixin, self).perform_update(serializer)\n        self.post_save(serializer.instance, created=False)",
        "detail": "cla_backend.apps.core.drf.mixins",
        "documentation": {}
    },
    {
        "label": "StandardResultsSetPagination",
        "kind": 6,
        "importPath": "cla_backend.apps.core.drf.paginator",
        "description": "cla_backend.apps.core.drf.paginator",
        "peekOfCode": "class StandardResultsSetPagination(PageNumberPagination):\n    page_size = 20\n    page_size_query_param = \"page_size\"\n    max_page_size = 100\nclass CaseNotesHistoryResultsSetPagination(PageNumberPagination):\n    page_size = 5\n    page_size_query_param = \"page_size\"\n    max_page_size = 100",
        "detail": "cla_backend.apps.core.drf.paginator",
        "documentation": {}
    },
    {
        "label": "CaseNotesHistoryResultsSetPagination",
        "kind": 6,
        "importPath": "cla_backend.apps.core.drf.paginator",
        "description": "cla_backend.apps.core.drf.paginator",
        "peekOfCode": "class CaseNotesHistoryResultsSetPagination(PageNumberPagination):\n    page_size = 5\n    page_size_query_param = \"page_size\"\n    max_page_size = 100",
        "detail": "cla_backend.apps.core.drf.paginator",
        "documentation": {}
    },
    {
        "label": "NestedSimpleRouter",
        "kind": 6,
        "importPath": "cla_backend.apps.core.drf.router",
        "description": "cla_backend.apps.core.drf.router",
        "peekOfCode": "class NestedSimpleRouter(OriginalNestedSimpleRouter):\n    def get_parent_viewset(self):\n        parent_viewset_dict = {name: viewset for name, viewset, _ in self.parent_router.registry}\n        return parent_viewset_dict.get(self.parent_prefix)\n    def register(self, prefix, viewset, base_name=None):\n        viewset.parent = self.get_parent_viewset()\n        viewset.parent_prefix = self.parent_prefix\n        return super(NestedSimpleRouter, self).register(prefix, viewset, base_name)\nclass NestedCLARouter(NestedSimpleRouter):\n    routes = [",
        "detail": "cla_backend.apps.core.drf.router",
        "documentation": {}
    },
    {
        "label": "NestedCLARouter",
        "kind": 6,
        "importPath": "cla_backend.apps.core.drf.router",
        "description": "cla_backend.apps.core.drf.router",
        "peekOfCode": "class NestedCLARouter(NestedSimpleRouter):\n    routes = [\n        # Detail route.\n        Route(\n            url=r\"^{prefix}/$\",\n            mapping={\n                \"get\": \"retrieve\",\n                \"put\": \"update\",\n                \"patch\": \"partial_update\",\n                \"delete\": \"destroy\",",
        "detail": "cla_backend.apps.core.drf.router",
        "documentation": {}
    },
    {
        "label": "AdvancedSimpleRouter",
        "kind": 6,
        "importPath": "cla_backend.apps.core.drf.router",
        "description": "cla_backend.apps.core.drf.router",
        "peekOfCode": "class AdvancedSimpleRouter(BaseRouter):\n    \"\"\"\n    Borrowed directly from DRF v3.0.2.\n    Adds support for list_route and detail_route.\n    \"\"\"\n    routes = [\n        # List route.\n        Route(\n            url=r\"^{prefix}{trailing_slash}$\",\n            mapping={\"get\": \"list\", \"post\": \"create\"},",
        "detail": "cla_backend.apps.core.drf.router",
        "documentation": {}
    },
    {
        "label": "AdvancedDefaultRouter",
        "kind": 6,
        "importPath": "cla_backend.apps.core.drf.router",
        "description": "cla_backend.apps.core.drf.router",
        "peekOfCode": "class AdvancedDefaultRouter(AdvancedSimpleRouter):\n    \"\"\"\n    Borrowed directly from DRF v3.0.2.\n    The default router extends the AdvancedSimpleRouter, but also adds in a default\n    API root view, and adds format suffix patterns to the URLs.\n    \"\"\"\n    include_root_view = True\n    include_format_suffixes = True\n    root_view_name = \"api-root\"\n    def get_api_root_view(self):",
        "detail": "cla_backend.apps.core.drf.router",
        "documentation": {}
    },
    {
        "label": "CompatGenericViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.core.drf.viewsets",
        "description": "cla_backend.apps.core.drf.viewsets",
        "peekOfCode": "class CompatGenericViewSet(GenericViewSet):\n    def post_save(self, obj, created=False):\n        pass",
        "detail": "cla_backend.apps.core.drf.viewsets",
        "documentation": {}
    },
    {
        "label": "TimeoutEmailBackend",
        "kind": 6,
        "importPath": "cla_backend.apps.core.mail.backends",
        "description": "cla_backend.apps.core.mail.backends",
        "peekOfCode": "class TimeoutEmailBackend(smtp.EmailBackend):\n    def __init__(self, *args, **kwargs):\n        kwargs.setdefault(\"timeout\", settings.EMAIL_TIMEOUT)\n        super(TimeoutEmailBackend, self).__init__(*args, **kwargs)",
        "detail": "cla_backend.apps.core.mail.backends",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.core.management.commands.install_postgres_extensions",
        "description": "cla_backend.apps.core.management.commands.install_postgres_extensions",
        "peekOfCode": "class Command(NoArgsCommand):\n    \"\"\"\n    Installs pgcrypto if it is missing.\n    Currently called from migrations.startup init script inside the docker container.\n    \"\"\"\n    help = textwrap.dedent(__doc__).strip()\n    def handle_noargs(self, **options):\n        from django.db import connections, DEFAULT_DB_ALIAS\n        connection = connections[DEFAULT_DB_ALIAS]\n        if connection.vendor != \"postgresql\":",
        "detail": "cla_backend.apps.core.management.commands.install_postgres_extensions",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.core.management.commands.translations",
        "description": "cla_backend.apps.core.management.commands.translations",
        "peekOfCode": "class Command(LabelCommand):\n    \"\"\"\n    Short-cuts for making and compiling Django gettext messages and\n    pushing/pulling them with Transifex\n    \"\"\"\n    help = textwrap.dedent(__doc__).strip()\n    args = \"update|push|pull\"\n    label = \"action\"\n    standard_options = {}\n    verbosity = 1",
        "detail": "cla_backend.apps.core.management.commands.translations",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.core.management.commands.worker_probes",
        "description": "cla_backend.apps.core.management.commands.worker_probes",
        "peekOfCode": "class Command(NoArgsCommand):\n    def handle_noargs(self, **options):\n        self.celery_probe()\n        self.database_probe()\n    def database_probe(self):\n        # Ability to connect to the db; doesn't matter if the result is True or False\n        Case.objects.exists()\n    def celery_probe(self):\n        # Ability to connect to the queue\n        # The following will raise an exception if it fails",
        "detail": "cla_backend.apps.core.management.commands.worker_probes",
        "documentation": {}
    },
    {
        "label": "CustomForm",
        "kind": 6,
        "importPath": "cla_backend.apps.core.tests.admin.test_fields",
        "description": "cla_backend.apps.core.tests.admin.test_fields",
        "peekOfCode": "class CustomForm(forms.Form):\n    text = MarkdownAdminField(required=False, markdown_whitelist=TEST_MARKDOWN_WHITELIST)\nclass TestMarkdownAdminField(unittest.TestCase):\n    def test_tag_not_allowed(self):\n        invalid_data = [\n            \"header\\n======\",  # header\n            \" - List item 1\\n - List item 2\\n - List item 3\",  # list\n            \"> Blockquote\",  # blockquote\n            \"[description][1]\\n\\n\\n\\n[1]: http://www.google.co.uk\",  # link\n            \"    code\",  # code",
        "detail": "cla_backend.apps.core.tests.admin.test_fields",
        "documentation": {}
    },
    {
        "label": "TestMarkdownAdminField",
        "kind": 6,
        "importPath": "cla_backend.apps.core.tests.admin.test_fields",
        "description": "cla_backend.apps.core.tests.admin.test_fields",
        "peekOfCode": "class TestMarkdownAdminField(unittest.TestCase):\n    def test_tag_not_allowed(self):\n        invalid_data = [\n            \"header\\n======\",  # header\n            \" - List item 1\\n - List item 2\\n - List item 3\",  # list\n            \"> Blockquote\",  # blockquote\n            \"[description][1]\\n\\n\\n\\n[1]: http://www.google.co.uk\",  # link\n            \"    code\",  # code\n            \"<script>javascript</script>\",  # raw html\n        ]",
        "detail": "cla_backend.apps.core.tests.admin.test_fields",
        "documentation": {}
    },
    {
        "label": "TEST_MARKDOWN_WHITELIST",
        "kind": 5,
        "importPath": "cla_backend.apps.core.tests.admin.test_fields",
        "description": "cla_backend.apps.core.tests.admin.test_fields",
        "peekOfCode": "TEST_MARKDOWN_WHITELIST = {\"tags\": [\"strong\", \"b\", \"i\", \"em\", \"p\"], \"attributes\": [], \"styles\": []}\nclass CustomForm(forms.Form):\n    text = MarkdownAdminField(required=False, markdown_whitelist=TEST_MARKDOWN_WHITELIST)\nclass TestMarkdownAdminField(unittest.TestCase):\n    def test_tag_not_allowed(self):\n        invalid_data = [\n            \"header\\n======\",  # header\n            \" - List item 1\\n - List item 2\\n - List item 3\",  # list\n            \"> Blockquote\",  # blockquote\n            \"[description][1]\\n\\n\\n\\n[1]: http://www.google.co.uk\",  # link",
        "detail": "cla_backend.apps.core.tests.admin.test_fields",
        "documentation": {}
    },
    {
        "label": "TestClaSessionSecurityMiddleware",
        "kind": 6,
        "importPath": "cla_backend.apps.core.tests.admin.test_middleware",
        "description": "cla_backend.apps.core.tests.admin.test_middleware",
        "peekOfCode": "class TestClaSessionSecurityMiddleware(unittest.TestCase):\n    \"\"\"Unit tests for the ClaSessionSecurityMiddleware class.\n    \"\"\"\n    # This regex will match any string that start with /ignore/.\n    TEST_REGEX_ONE = r\"^\\/ignore\\/.*\"\n    # This regex will match any string that start with /ignore/other/.\n    TEST_REGEX_TWO = r\"^\\/ignore\\/other\\/.*\"\n    SESSION_SECURITY_PING_URL = \"/session_security/ping\"\n    def setUp(self):\n        \"\"\"Sets up the required mocks for the ClaSessionSecurityMiddleware tests.",
        "detail": "cla_backend.apps.core.tests.admin.test_middleware",
        "documentation": {}
    },
    {
        "label": "TestScenario",
        "kind": 6,
        "importPath": "cla_backend.apps.core.tests.admin.test_middleware",
        "description": "cla_backend.apps.core.tests.admin.test_middleware",
        "peekOfCode": "class TestScenario(object):\n    def __init__(self, test_url, mock_call_expected):\n        self.test_url = test_url\n        self.mock_call_expected = mock_call_expected",
        "detail": "cla_backend.apps.core.tests.admin.test_middleware",
        "documentation": {}
    },
    {
        "label": "make_recipe",
        "kind": 2,
        "importPath": "cla_backend.apps.core.tests.mommy_utils",
        "description": "cla_backend.apps.core.tests.mommy_utils",
        "peekOfCode": "def make_recipe(model_def, **kwargs):\n    app, model_name = model_def.split(\".\")\n    return mommy.make_recipe(u\"%s.tests.%s\" % (app.lower(), model_name.lower()), **kwargs)\ndef make_user(**kwargs):\n    return mommy.make(settings.AUTH_USER_MODEL, **kwargs)",
        "detail": "cla_backend.apps.core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "make_user",
        "kind": 2,
        "importPath": "cla_backend.apps.core.tests.mommy_utils",
        "description": "cla_backend.apps.core.tests.mommy_utils",
        "peekOfCode": "def make_user(**kwargs):\n    return mommy.make(settings.AUTH_USER_MODEL, **kwargs)",
        "detail": "cla_backend.apps.core.tests.mommy_utils",
        "documentation": {}
    },
    {
        "label": "CLABaseApiTestMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.core.tests.test_base",
        "description": "cla_backend.apps.core.tests.test_base",
        "peekOfCode": "class CLABaseApiTestMixin(object):\n    \"\"\"\n    Useful testing methods\n    NOTE: you probably don't want to subclass it directly.\n        Think if it's better to use SimpleResourceAPIMixin or NestedSimpleResourceAPIMixin\n        instead.\n    \"\"\"\n    API_URL_NAMESPACE = None\n    def get_http_authorization(self, token=None):\n        if not token:",
        "detail": "cla_backend.apps.core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "SimpleResourceAPIMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.core.tests.test_base",
        "description": "cla_backend.apps.core.tests.test_base",
        "peekOfCode": "class SimpleResourceAPIMixin(CLABaseApiTestMixin):\n    \"\"\"\n    You should (almost) always subclass this or the NestedSimpleResourceAPIMixin\n    in your TestCase.\n    Your actual TestCase should also sublass one of the legalaid.tests.views.test_base\n    classes.\n    Usage:\n    when using it, override the config properties below (in UPPERCASE).\n    your test will have:\n        * self.resource ==> instance of the resource you are about to test",
        "detail": "cla_backend.apps.core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "NestedSimpleResourceAPIMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.core.tests.test_base",
        "description": "cla_backend.apps.core.tests.test_base",
        "peekOfCode": "class NestedSimpleResourceAPIMixin(SimpleResourceAPIMixin):\n    \"\"\"\n    You should (almost) always subclass this or the SimpleResourceAPIMixin\n    in your TestCase.\n    Your actual TestCase should also sublass one of the\n    legalaid.tests.views.test_base classes.\n    Usage:\n    when using it, override the config properties below (in UPPERCASE).\n    your test will have:\n        * self.resource ==> instance of the resource you are about to test",
        "detail": "cla_backend.apps.core.tests.test_base",
        "documentation": {}
    },
    {
        "label": "CloneModelMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.core.cloning",
        "description": "cla_backend.apps.core.cloning",
        "peekOfCode": "class CloneModelMixin(object):\n    cloning_config = {\n        \"excludes\": [],  # these will be set to default vals\n        \"clone_fks\": [],  # fk to be cloned (new obj, new id), other fks will be referenced instead\n        \"override_values\": {},  # dict of val to override during the cloning op\n    }\n    @classmethod\n    def clone_from_obj(cls, pk, config=None):\n        config = config or cls.cloning_config\n        return clone_model(cls, pk, config)",
        "detail": "cla_backend.apps.core.cloning",
        "documentation": {}
    },
    {
        "label": "clone_model",
        "kind": 2,
        "importPath": "cla_backend.apps.core.cloning",
        "description": "cla_backend.apps.core.cloning",
        "peekOfCode": "def clone_model(cls, pk, config={}):\n    \"\"\"\n    NOTE: it does not support cloning many2many and one2many\n    fields by design. This is to keep the cloning logic simple\n    If you do need to, clone the related objects manually\n    \"\"\"\n    if not pk:\n        return None\n    cloned = cls.objects.get(pk=pk)\n    excludes = config.get(\"excludes\", [])",
        "detail": "cla_backend.apps.core.cloning",
        "documentation": {}
    },
    {
        "label": "NullBooleanField",
        "kind": 6,
        "importPath": "cla_backend.apps.core.fields",
        "description": "cla_backend.apps.core.fields",
        "peekOfCode": "class NullBooleanField(BooleanField):\n    # empty = True\n    def __init__(self, *args, **kwargs):\n        kwargs[\"required\"] = False\n        super(NullBooleanField, self).__init__(*args, **kwargs)\n    def from_native(self, value):\n        if value in (\"none\", \"None\", \"null\", None):\n            return None\n        return super(NullBooleanField, self).from_native(value)",
        "detail": "cla_backend.apps.core.fields",
        "documentation": {}
    },
    {
        "label": "CLALoginForm",
        "kind": 6,
        "importPath": "cla_backend.apps.core.forms",
        "description": "cla_backend.apps.core.forms",
        "peekOfCode": "class CLALoginForm(AuthenticationForm):\n    username = forms.CharField(max_length=254, widget=forms.TextInput(attrs=AUTOCOMPLETE_OFF_ATTRS))\n    password = forms.CharField(label=_(\"Password\"), widget=forms.PasswordInput(attrs=AUTOCOMPLETE_OFF_ATTRS))",
        "detail": "cla_backend.apps.core.forms",
        "documentation": {}
    },
    {
        "label": "AUTOCOMPLETE_OFF_ATTRS",
        "kind": 5,
        "importPath": "cla_backend.apps.core.forms",
        "description": "cla_backend.apps.core.forms",
        "peekOfCode": "AUTOCOMPLETE_OFF_ATTRS = {\"autocomplete\": \"off\", \"readonly\": True, \"onfocus\": 'this.removeAttribute(\"readonly\");'}\nclass CLALoginForm(AuthenticationForm):\n    username = forms.CharField(max_length=254, widget=forms.TextInput(attrs=AUTOCOMPLETE_OFF_ATTRS))\n    password = forms.CharField(label=_(\"Password\"), widget=forms.PasswordInput(attrs=AUTOCOMPLETE_OFF_ATTRS))",
        "detail": "cla_backend.apps.core.forms",
        "documentation": {}
    },
    {
        "label": "get_web_user",
        "kind": 2,
        "importPath": "cla_backend.apps.core.models",
        "description": "cla_backend.apps.core.models",
        "peekOfCode": "def get_web_user():\n    web_user, created = User.objects.get_or_create(username=\"web\")\n    if created:\n        web_user.set_unusable_password()\n        web_user.save()\n    return web_user\npost_save.connect(log_user_created, sender=User)\npre_save.connect(log_user_modified, sender=User)",
        "detail": "cla_backend.apps.core.models",
        "documentation": {}
    },
    {
        "label": "LoadExtension",
        "kind": 6,
        "importPath": "cla_backend.apps.core.operations",
        "description": "cla_backend.apps.core.operations",
        "peekOfCode": "class LoadExtension(Operation):\n    reversible = True\n    def __init__(self, name):\n        self.name = name\n    def state_forwards(self, app_label, state):\n        pass\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        schema_editor.execute(\"CREATE EXTENSION IF NOT EXISTS %s\" % self.name)\n    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n        schema_editor.execute(\"DROP EXTENSION %s\" % self.name)",
        "detail": "cla_backend.apps.core.operations",
        "documentation": {}
    },
    {
        "label": "IsProviderPermission",
        "kind": 6,
        "importPath": "cla_backend.apps.core.permissions",
        "description": "cla_backend.apps.core.permissions",
        "peekOfCode": "class IsProviderPermission(BasePermission):\n    \"\"\"\n    Check the request is being made by a provider user.\n    OPTIONS always allowed without authentication to support CORS requests\n    \"\"\"\n    def has_permission(self, request, view):\n        return request.method == \"OPTIONS\" or (hasattr(request.user, \"staff\") and bool(request.user.staff))\n    def has_object_permission(self, request, view, obj):\n        if not obj:\n            return True",
        "detail": "cla_backend.apps.core.permissions",
        "documentation": {}
    },
    {
        "label": "ClientIDPermission",
        "kind": 6,
        "importPath": "cla_backend.apps.core.permissions",
        "description": "cla_backend.apps.core.permissions",
        "peekOfCode": "class ClientIDPermission(BasePermission):\n    \"\"\"\n    The request is authenticated as a user and the token used has the right scope\n    \"\"\"\n    client_name = None\n    def get_client_name(self, token):\n        client = token.application\n        client_name = cache.get(\"cla.oauth_client_%s\" % client.client_id)\n        if not client_name:\n            client_name = client.name",
        "detail": "cla_backend.apps.core.permissions",
        "documentation": {}
    },
    {
        "label": "AllowNone",
        "kind": 6,
        "importPath": "cla_backend.apps.core.permissions",
        "description": "cla_backend.apps.core.permissions",
        "peekOfCode": "class AllowNone(BasePermission):\n    \"\"\"\n    Allow no access. Paranoid.\n    Used as the default authentication class so that if we forget to set\n    any permissions then we get permission denided instead of blowing the doors\n    open.\n    \"\"\"\n    def has_permission(self, request, view):\n        return False",
        "detail": "cla_backend.apps.core.permissions",
        "documentation": {}
    },
    {
        "label": "SingletonRouter",
        "kind": 6,
        "importPath": "cla_backend.apps.core.routers",
        "description": "cla_backend.apps.core.routers",
        "peekOfCode": "class SingletonRouter(DefaultRouter):\n    \"\"\"\n    Use this router instead of the DRF DefaultRouter if you have\n    only one resource accessible from an endpoint.\n    This gives you the following urls:\n     * prefix/\n        GET: returns 404 or the object\n        POST: creates the object if it doesn't exist\n        PUT: updates the object\n        PATCH: updates the object partially",
        "detail": "cla_backend.apps.core.routers",
        "documentation": {}
    },
    {
        "label": "MoneyIntervalModelSerializerMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.core.serializers",
        "description": "cla_backend.apps.core.serializers",
        "peekOfCode": "class MoneyIntervalModelSerializerMixin(object):\n    def __init__(self, *args, **kwargs):\n        # add a model serializer which is used throughout this project\n        self.serializer_field_mapping[MoneyIntervalField] = MoneyIntervalDRFField\n        super(MoneyIntervalModelSerializerMixin, self).__init__(*args, **kwargs)\nclass MoneyFieldModelSerializerMixin(object):\n    def __init__(self, *args, **kwargs):\n        # add a model serializer which is used throughout this project\n        self.serializer_field_mapping[MoneyField] = MoneyFieldDRF\n        super(MoneyFieldModelSerializerMixin, self).__init__(*args, **kwargs)",
        "detail": "cla_backend.apps.core.serializers",
        "documentation": {}
    },
    {
        "label": "MoneyFieldModelSerializerMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.core.serializers",
        "description": "cla_backend.apps.core.serializers",
        "peekOfCode": "class MoneyFieldModelSerializerMixin(object):\n    def __init__(self, *args, **kwargs):\n        # add a model serializer which is used throughout this project\n        self.serializer_field_mapping[MoneyField] = MoneyFieldDRF\n        super(MoneyFieldModelSerializerMixin, self).__init__(*args, **kwargs)\nclass UUIDSerializer(serializers.SlugRelatedField):\n    def to_representation(self, obj):\n        return unicode(getattr(obj, self.slug_field))\nclass NullBooleanModelSerializerMixin(object):\n    def __init__(self, *args, **kwargs):",
        "detail": "cla_backend.apps.core.serializers",
        "documentation": {}
    },
    {
        "label": "UUIDSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.core.serializers",
        "description": "cla_backend.apps.core.serializers",
        "peekOfCode": "class UUIDSerializer(serializers.SlugRelatedField):\n    def to_representation(self, obj):\n        return unicode(getattr(obj, self.slug_field))\nclass NullBooleanModelSerializerMixin(object):\n    def __init__(self, *args, **kwargs):\n        # add a model serializer which is used throughout this project\n        self.serializer_field_mapping[models.NullBooleanField] = fields.NullBooleanField\n        super(NullBooleanModelSerializerMixin, self).__init__(*args, **kwargs)\nclass JSONField(serializers.Field):\n    def to_representation(self, obj):",
        "detail": "cla_backend.apps.core.serializers",
        "documentation": {}
    },
    {
        "label": "NullBooleanModelSerializerMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.core.serializers",
        "description": "cla_backend.apps.core.serializers",
        "peekOfCode": "class NullBooleanModelSerializerMixin(object):\n    def __init__(self, *args, **kwargs):\n        # add a model serializer which is used throughout this project\n        self.serializer_field_mapping[models.NullBooleanField] = fields.NullBooleanField\n        super(NullBooleanModelSerializerMixin, self).__init__(*args, **kwargs)\nclass JSONField(serializers.Field):\n    def to_representation(self, obj):\n        return obj\n    def to_internal_value(self, data):\n        return data",
        "detail": "cla_backend.apps.core.serializers",
        "documentation": {}
    },
    {
        "label": "JSONField",
        "kind": 6,
        "importPath": "cla_backend.apps.core.serializers",
        "description": "cla_backend.apps.core.serializers",
        "peekOfCode": "class JSONField(serializers.Field):\n    def to_representation(self, obj):\n        return obj\n    def to_internal_value(self, data):\n        return data\nclass ClaModelSerializer(\n    MoneyIntervalModelSerializerMixin, NullBooleanModelSerializerMixin, MoneyFieldModelSerializerMixin, ModelSerializer\n):\n    def restore_instance_for_validation(self, serializer, attrs):\n        data = {}",
        "detail": "cla_backend.apps.core.serializers",
        "documentation": {}
    },
    {
        "label": "ClaModelSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.core.serializers",
        "description": "cla_backend.apps.core.serializers",
        "peekOfCode": "class ClaModelSerializer(\n    MoneyIntervalModelSerializerMixin, NullBooleanModelSerializerMixin, MoneyFieldModelSerializerMixin, ModelSerializer\n):\n    def restore_instance_for_validation(self, serializer, attrs):\n        data = {}\n        serializer_fields = serializer.fields\n        model = serializer.Meta.model\n        for field_name, field in serializer_fields.items():\n            if field_name not in attrs or not attrs[field_name]:\n                continue",
        "detail": "cla_backend.apps.core.serializers",
        "documentation": {}
    },
    {
        "label": "PartialUpdateExcludeReadonlySerializerMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.core.serializers",
        "description": "cla_backend.apps.core.serializers",
        "peekOfCode": "class PartialUpdateExcludeReadonlySerializerMixin(PartialUpdateSerializerMixin):\n    def update(self, instance, validated_attrs):\n        for attr, value in validated_attrs.items():\n            setattr(instance, attr, value)\n        if self.partial and isinstance(instance, self.Meta.model):\n            instance.save(\n                update_fields=getattr(self, \"_update_fields\") or self._get_fields_for_partial_update(validated_attrs)\n            )\n        else:\n            instance.save()",
        "detail": "cla_backend.apps.core.serializers",
        "documentation": {}
    },
    {
        "label": "log_user_created",
        "kind": 2,
        "importPath": "cla_backend.apps.core.signals",
        "description": "cla_backend.apps.core.signals",
        "peekOfCode": "def log_user_created(sender, instance, created, **kwargs):\n    if created:\n        logger.info(\n            \"User created\",\n            extra={\n                \"USERNAME\": instance.username,\n                \"IS_STAFF\": unicode(instance.is_staff),\n                \"IS_ACTIVE\": unicode(instance.is_active),\n                \"IS_SUPERUSER\": unicode(instance.is_superuser),\n            },",
        "detail": "cla_backend.apps.core.signals",
        "documentation": {}
    },
    {
        "label": "log_user_modified",
        "kind": 2,
        "importPath": "cla_backend.apps.core.signals",
        "description": "cla_backend.apps.core.signals",
        "peekOfCode": "def log_user_modified(sender, instance, **kwargs):\n    try:\n        sender.objects.get(pk=instance.pk)\n    except sender.DoesNotExist:\n        return\n    logger.info(\n        \"User modified\",\n        extra={\n            \"USERNAME\": instance.username,\n            \"IS_STAFF\": unicode(instance.is_staff),",
        "detail": "cla_backend.apps.core.signals",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "cla_backend.apps.core.signals",
        "description": "cla_backend.apps.core.signals",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef log_user_created(sender, instance, created, **kwargs):\n    if created:\n        logger.info(\n            \"User created\",\n            extra={\n                \"USERNAME\": instance.username,\n                \"IS_STAFF\": unicode(instance.is_staff),\n                \"IS_ACTIVE\": unicode(instance.is_active),\n                \"IS_SUPERUSER\": unicode(instance.is_superuser),",
        "detail": "cla_backend.apps.core.signals",
        "documentation": {}
    },
    {
        "label": "CLADiscoverRunner",
        "kind": 6,
        "importPath": "cla_backend.apps.core.testing",
        "description": "cla_backend.apps.core.testing",
        "peekOfCode": "class CLADiscoverRunner(get_runner(settings, base_runner)):\n    \"\"\"\n    Overrides the default Runner and loads the initial_groups fixture.\n    This is because migrations are switched off during testing but\n    we do need `initial_groups` in order for the tests to pass.\n    \"\"\"\n    def setup_databases(self, **kwargs):\n        ret = super(CLADiscoverRunner, self).setup_databases(**kwargs)\n        call_command(\"install_postgres_extensions\")\n        call_command(\"loaddata\", \"initial_groups\")",
        "detail": "cla_backend.apps.core.testing",
        "documentation": {}
    },
    {
        "label": "NoDefaultProvided",
        "kind": 6,
        "importPath": "cla_backend.apps.core.utils",
        "description": "cla_backend.apps.core.utils",
        "peekOfCode": "class NoDefaultProvided(object):\n    pass\ndef getattrd(obj, name, default=NoDefaultProvided):\n    \"\"\"\n    Same as getattr(), but allows double dash notation lookup\n    Discussed in:\n    http://stackoverflow.com/questions/11975781\n    \"\"\"\n    try:\n        return reduce(getattr, name.split(\"__\"), obj)",
        "detail": "cla_backend.apps.core.utils",
        "documentation": {}
    },
    {
        "label": "getattrd",
        "kind": 2,
        "importPath": "cla_backend.apps.core.utils",
        "description": "cla_backend.apps.core.utils",
        "peekOfCode": "def getattrd(obj, name, default=NoDefaultProvided):\n    \"\"\"\n    Same as getattr(), but allows double dash notation lookup\n    Discussed in:\n    http://stackoverflow.com/questions/11975781\n    \"\"\"\n    try:\n        return reduce(getattr, name.split(\"__\"), obj)\n    except AttributeError:\n        if default != NoDefaultProvided:",
        "detail": "cla_backend.apps.core.utils",
        "documentation": {}
    },
    {
        "label": "format_patch",
        "kind": 2,
        "importPath": "cla_backend.apps.core.utils",
        "description": "cla_backend.apps.core.utils",
        "peekOfCode": "def format_patch(patch):\n    lines = []\n    for change in patch:\n        change = _transform_patch_line(change)\n        lines.append(\"{action} {thing} to {value}\".format(**change))\n    return \"\\n\".join(lines)\n@contextlib.contextmanager\ndef remember_cwd():\n    curdir = os.getcwd()\n    try:",
        "detail": "cla_backend.apps.core.utils",
        "documentation": {}
    },
    {
        "label": "remember_cwd",
        "kind": 2,
        "importPath": "cla_backend.apps.core.utils",
        "description": "cla_backend.apps.core.utils",
        "peekOfCode": "def remember_cwd():\n    curdir = os.getcwd()\n    try:\n        yield\n    finally:\n        os.chdir(curdir)",
        "detail": "cla_backend.apps.core.utils",
        "documentation": {}
    },
    {
        "label": "validate_first_of_month",
        "kind": 2,
        "importPath": "cla_backend.apps.core.validators",
        "description": "cla_backend.apps.core.validators",
        "peekOfCode": "def validate_first_of_month(value):\n    if value.day != 1:\n        raise ValidationError(\"%s should only be first day of the month.\" % value)",
        "detail": "cla_backend.apps.core.validators",
        "documentation": {}
    },
    {
        "label": "page_not_found",
        "kind": 2,
        "importPath": "cla_backend.apps.core.views",
        "description": "cla_backend.apps.core.views",
        "peekOfCode": "def page_not_found(request, *args, **kwargs):\n    with push_scope() as scope:\n        scope.set_tag(\"path\", request.path)\n        for i, part in enumerate(request.path.strip(\"/\").split(\"/\")):\n            scope.set_tag(\"path_{}\".format(i), part)\n        capture_message(\"Page not found\", level=\"error\")\n    return defaults.page_not_found(request, *args, **kwargs)",
        "detail": "cla_backend.apps.core.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.diagnosis.management.commands.internationalise_graphs",
        "description": "cla_backend.apps.diagnosis.management.commands.internationalise_graphs",
        "peekOfCode": "class Command(LabelCommand):\n    \"\"\"\n    This command re-writes graphml files into Django templates internationalising\n    certain known attributes\n    \"\"\"\n    help = textwrap.dedent(__doc__).strip()\n    args = \"path_to_graphml\"\n    label = \"file_path\"\n    def handle_label(self, file_path, **options):\n        from diagnosis.graph import GraphImporter",
        "detail": "cla_backend.apps.diagnosis.management.commands.internationalise_graphs",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.diagnosis.management.commands.list_checker_graph_paths",
        "description": "cla_backend.apps.diagnosis.management.commands.list_checker_graph_paths",
        "peekOfCode": "class Command(NoArgsCommand):\n    \"\"\"\n    Prints a map of possible paths that can be taken through the scope checker graph,\n    useful for determining meaning of URL paths in Public e.g. from Google Analytics\n    \"\"\"\n    help = \"Prints a map of possible paths that can be taken through the scope checker graph\"\n    def handle_noargs(self, *args, **options):\n        graph = get_graph(settings.CHECKER_DIAGNOSIS_FILE_NAME)\n        paths = dict()\n        def find_paths(nodes):",
        "detail": "cla_backend.apps.diagnosis.management.commands.list_checker_graph_paths",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.diagnosis.migrations.0001_initial",
        "description": "cla_backend.apps.diagnosis.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = []\n    operations = [\n        migrations.CreateModel(\n            name=\"DiagnosisTraversal\",\n            fields=[\n                (\"id\", models.AutoField(verbose_name=\"ID\", serialize=False, auto_created=True, primary_key=True)),\n                (\n                    \"created\",\n                    model_utils.fields.AutoCreatedField(",
        "detail": "cla_backend.apps.diagnosis.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.diagnosis.migrations.0002_auto_20150127_1536",
        "description": "cla_backend.apps.diagnosis.migrations.0002_auto_20150127_1536",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"diagnosis\", \"0001_initial\"), (\"legalaid\", \"0001_initial\")]\n    operations = [\n        migrations.AddField(\n            model_name=\"diagnosistraversal\",\n            name=\"category\",\n            field=models.ForeignKey(blank=True, to=\"legalaid.Category\", null=True),\n            preserve_default=True,\n        ),\n        migrations.AddField(",
        "detail": "cla_backend.apps.diagnosis.migrations.0002_auto_20150127_1536",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.diagnosis.migrations.0003_auto_20151211_1600",
        "description": "cla_backend.apps.diagnosis.migrations.0003_auto_20151211_1600",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"diagnosis\", \"0002_auto_20150127_1536\")]\n    operations = [\n        migrations.AlterField(\n            model_name=\"diagnosistraversal\",\n            name=\"state\",\n            field=models.CharField(default=b\"UNKNOWN\", max_length=50, null=True, db_index=True, blank=True),\n            preserve_default=True,\n        )\n    ]",
        "detail": "cla_backend.apps.diagnosis.migrations.0003_auto_20151211_1600",
        "documentation": {}
    },
    {
        "label": "DiagnosisAPIMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.diagnosis.tests.diagnosis_api",
        "description": "cla_backend.apps.diagnosis.tests.diagnosis_api",
        "peekOfCode": "class DiagnosisAPIMixin(NestedSimpleResourceAPIMixin):\n    LOOKUP_KEY = \"case_reference\"\n    RESOURCE_RECIPE = \"diagnosis.diagnosis\"\n    API_URL_BASE_NAME = \"diagnosis\"\n    PARENT_LOOKUP_KEY = \"reference\"\n    PARENT_RESOURCE_RECIPE = \"legalaid.case\"\n    PK_FIELD = \"diagnosis\"\n    def make_resource(self, **kwargs):\n        kwargs[\"graph_version\"] = \"v1\"\n        return super(DiagnosisAPIMixin, self).make_resource(**kwargs)",
        "detail": "cla_backend.apps.diagnosis.tests.diagnosis_api",
        "documentation": {}
    },
    {
        "label": "diagnosis",
        "kind": 5,
        "importPath": "cla_backend.apps.diagnosis.tests.mommy_recipes",
        "description": "cla_backend.apps.diagnosis.tests.mommy_recipes",
        "peekOfCode": "diagnosis = Recipe(DiagnosisTraversal)\ndiagnosis_yes = Recipe(DiagnosisTraversal, state=DIAGNOSIS_SCOPE.INSCOPE)",
        "detail": "cla_backend.apps.diagnosis.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "diagnosis_yes",
        "kind": 5,
        "importPath": "cla_backend.apps.diagnosis.tests.mommy_recipes",
        "description": "cla_backend.apps.diagnosis.tests.mommy_recipes",
        "peekOfCode": "diagnosis_yes = Recipe(DiagnosisTraversal, state=DIAGNOSIS_SCOPE.INSCOPE)",
        "detail": "cla_backend.apps.diagnosis.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "DiagnosisEventTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.diagnosis.tests.test_events",
        "description": "cla_backend.apps.diagnosis.tests.test_events",
        "peekOfCode": "class DiagnosisEventTestCase(EventTestCaseMixin, TestCase):\n    EVENT_KEY = \"diagnosis\"\n    def test_diagnosis_created(self):\n        self._test_process_with_implicit_code(\n            \"DIAGNOSIS_CREATED\", process_kwargs={\"status\": \"created\"}, expected_type=LOG_TYPES.SYSTEM\n        )\n    def test_diagnosis_deleted(self):\n        self._test_process_with_implicit_code(\n            \"DIAGNOSIS_DELETED\", process_kwargs={\"status\": \"deleted\"}, expected_type=LOG_TYPES.SYSTEM\n        )",
        "detail": "cla_backend.apps.diagnosis.tests.test_events",
        "documentation": {}
    },
    {
        "label": "GraphTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.diagnosis.tests.test_graph",
        "description": "cla_backend.apps.diagnosis.tests.test_graph",
        "peekOfCode": "class GraphTestCase(TestCase):\n    def setUp(self):\n        self.graph = get_graph(file_name=settings.DIAGNOSIS_FILE_NAME)\n        self.checker_graph = get_graph(file_name=settings.CHECKER_DIAGNOSIS_FILE_NAME)\n        call_command(\"loaddata\", \"initial_category\")\n        call_command(\"loaddata\", \"initial_mattertype\")\n    def assertCategoryInContext(self, context, nodes):\n        # checking that the category is set and is valid\n        category_name = context.get(\"category\")\n        try:",
        "detail": "cla_backend.apps.diagnosis.tests.test_graph",
        "documentation": {}
    },
    {
        "label": "GraphStructureTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.diagnosis.tests.test_graph_structure",
        "description": "cla_backend.apps.diagnosis.tests.test_graph_structure",
        "peekOfCode": "class GraphStructureTestCase(TestCase):\n    def _test_graph_structure(self, graph_file):\n        graph_path = os.path.join(os.path.dirname(__file__), \"../data\", graph_file)\n        graph = etree.parse(graph_path)\n        ns = {\"namespaces\": {\"g\": graph.getroot().nsmap[None]}}\n        try:\n            permanent_id_key = graph.xpath('//g:key[@attr.name=\"permanent_id\"]', **ns)[0].attrib[\"id\"]\n            if not permanent_id_key:\n                raise ValueError\n            permanent_id_xpath = 'g:data[@key=\"%s\"]' % permanent_id_key",
        "detail": "cla_backend.apps.diagnosis.tests.test_graph_structure",
        "documentation": {}
    },
    {
        "label": "DiagnosisTraversalManagerTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.diagnosis.tests.test_models",
        "description": "cla_backend.apps.diagnosis.tests.test_models",
        "peekOfCode": "class DiagnosisTraversalManagerTestCase(TestCase):\n    def test_create_eligible(self):\n        self.assertEqual(DiagnosisTraversal.objects.count(), 0)\n        category = make_recipe(\"legalaid.category\")\n        diagnosis = DiagnosisTraversal.objects.create_eligible(category=category)\n        self.assertEqual(DiagnosisTraversal.objects.count(), 1)\n        self.assertEqual(diagnosis.category, category)\n        self.assertEqual(diagnosis.state, DIAGNOSIS_SCOPE.INSCOPE)",
        "detail": "cla_backend.apps.diagnosis.tests.test_models",
        "documentation": {}
    },
    {
        "label": "DiagnosisSerializerTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.diagnosis.tests.test_serializers",
        "description": "cla_backend.apps.diagnosis.tests.test_serializers",
        "peekOfCode": "class DiagnosisSerializerTestCase(TestCase):\n    @mock.patch(\"diagnosis.serializers.graph\", new_callable=MockedGraph)\n    def __call__(self, runner, mocked_graph, *args, **kwargs):\n        self.mocked_graph = mocked_graph\n        super(DiagnosisSerializerTestCase, self).__call__(runner, *args, **kwargs)\n    def setUp(self):\n        graph_inscope_context = self.mocked_graph.node[\"INSCOPE\"][\"context\"]\n        self.category = make_recipe(\"legalaid.Category\", code=graph_inscope_context[\"category\"])\n        self.matter_type1 = make_recipe(\n            \"legalaid.matter_type1\", code=graph_inscope_context[\"matter-type-1\"], category=self.category",
        "detail": "cla_backend.apps.diagnosis.tests.test_serializers",
        "documentation": {}
    },
    {
        "label": "MockedGraph",
        "kind": 6,
        "importPath": "cla_backend.apps.diagnosis.tests.utils",
        "description": "cla_backend.apps.diagnosis.tests.utils",
        "peekOfCode": "class MockedGraph(mock.MagicMock):\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n                  start\n                    |\n                  _______\n                |         |\n                2a        2b\n                |         |\n         ___________       _____",
        "detail": "cla_backend.apps.diagnosis.tests.utils",
        "documentation": {}
    },
    {
        "label": "DiagnosisEvent",
        "kind": 6,
        "importPath": "cla_backend.apps.diagnosis.events",
        "description": "cla_backend.apps.diagnosis.events",
        "peekOfCode": "class DiagnosisEvent(BaseEvent):\n    key = \"diagnosis\"\n    codes = {\n        \"DIAGNOSIS_CREATED\": {\n            \"type\": LOG_TYPES.SYSTEM,\n            \"level\": LOG_LEVELS.HIGH,\n            \"selectable_by\": [],\n            \"description\": \"Diagnosis created\",\n            \"stops_timer\": False,\n        },",
        "detail": "cla_backend.apps.diagnosis.events",
        "documentation": {}
    },
    {
        "label": "GraphImporter",
        "kind": 6,
        "importPath": "cla_backend.apps.diagnosis.graph",
        "description": "cla_backend.apps.diagnosis.graph",
        "peekOfCode": "class GraphImporter(object):\n    KEY_BODY = \"body\"\n    KEY_TITLE = \"title\"\n    KEY_DESCRIPTION = \"description\"\n    KEY_CONTEXT = \"context\"\n    KEY_ORDER = \"order\"\n    KEY_HELP = \"help\"\n    KEY_HEADING = \"heading\"\n    KEY_PERMANENT_ID = \"permanent_id\"\n    KEY_DATA_SAFETY = \"data_safety\"",
        "detail": "cla_backend.apps.diagnosis.graph",
        "documentation": {}
    },
    {
        "label": "get_graph",
        "kind": 2,
        "importPath": "cla_backend.apps.diagnosis.graph",
        "description": "cla_backend.apps.diagnosis.graph",
        "peekOfCode": "def get_graph(file_name=settings.DIAGNOSIS_FILE_NAME, is_templated=settings.DIAGNOSES_USE_TEMPLATES):\n    file_path = join(abspath(dirname(__file__)), \"data\", file_name)\n    if is_templated:\n        file_path += \".tpl\"\n    importer = GraphImporter(file_path)\n    return importer.process(is_templated=is_templated)\ndef get_graph_mock():\n    g = nx.DiGraph()\n    g.add_node(\"root\", label=\"what's your problem\")\n    g.add_node(\"c1\", label=\"You are my problem\")",
        "detail": "cla_backend.apps.diagnosis.graph",
        "documentation": {}
    },
    {
        "label": "get_graph_mock",
        "kind": 2,
        "importPath": "cla_backend.apps.diagnosis.graph",
        "description": "cla_backend.apps.diagnosis.graph",
        "peekOfCode": "def get_graph_mock():\n    g = nx.DiGraph()\n    g.add_node(\"root\", label=\"what's your problem\")\n    g.add_node(\"c1\", label=\"You are my problem\")\n    g.add_node(\"c2\", label=\"Don't have any problem\")\n    g.add_edge(\"root\", \"c1\")\n    g.add_edge(\"root\", \"c2\")\n    return g\ngraph = SimpleLazyObject(lambda: get_graph())",
        "detail": "cla_backend.apps.diagnosis.graph",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "cla_backend.apps.diagnosis.graph",
        "description": "cla_backend.apps.diagnosis.graph",
        "peekOfCode": "graph = SimpleLazyObject(lambda: get_graph())",
        "detail": "cla_backend.apps.diagnosis.graph",
        "documentation": {}
    },
    {
        "label": "DiagnosisTraversalManager",
        "kind": 6,
        "importPath": "cla_backend.apps.diagnosis.models",
        "description": "cla_backend.apps.diagnosis.models",
        "peekOfCode": "class DiagnosisTraversalManager(models.Manager):\n    def create_eligible(self, category):\n        return self.create(\n            state=DIAGNOSIS_SCOPE.INSCOPE,\n            category=category,\n            nodes=[{\"title\": category.name, \"label\": \"<p>Diagnosis created by Specialist.</p>\"}],\n        )\nclass DiagnosisTraversal(TimeStampedModel):\n    reference = UUIDField(auto=True, unique=True)\n    nodes = JSONField(null=True, blank=True)",
        "detail": "cla_backend.apps.diagnosis.models",
        "documentation": {}
    },
    {
        "label": "DiagnosisTraversal",
        "kind": 6,
        "importPath": "cla_backend.apps.diagnosis.models",
        "description": "cla_backend.apps.diagnosis.models",
        "peekOfCode": "class DiagnosisTraversal(TimeStampedModel):\n    reference = UUIDField(auto=True, unique=True)\n    nodes = JSONField(null=True, blank=True)\n    current_node_id = models.CharField(blank=True, max_length=50)\n    graph_version = models.CharField(blank=True, max_length=50)\n    state = models.CharField(db_index=True, blank=True, null=True, max_length=50, default=DIAGNOSIS_SCOPE.UNKNOWN)\n    category = models.ForeignKey(\"legalaid.Category\", null=True, blank=True)\n    matter_type1 = models.ForeignKey(\n        \"legalaid.MatterType\",\n        blank=True,",
        "detail": "cla_backend.apps.diagnosis.models",
        "documentation": {}
    },
    {
        "label": "DiagnosisSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.diagnosis.serializers",
        "description": "cla_backend.apps.diagnosis.serializers",
        "peekOfCode": "class DiagnosisSerializer(ClaModelSerializer):\n    choices = SerializerMethodField()\n    nodes = SerializerMethodField()\n    current_node_id = CharField()\n    category = SlugRelatedField(slug_field=\"code\", required=False, queryset=Category.objects.all(), allow_null=True)\n    matter_type1 = SlugRelatedField(\n        slug_field=\"code\", required=False, queryset=MatterType.objects.all(), allow_null=True\n    )\n    matter_type2 = SlugRelatedField(\n        slug_field=\"code\", required=False, queryset=MatterType.objects.all(), allow_null=True",
        "detail": "cla_backend.apps.diagnosis.serializers",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "cla_backend.apps.diagnosis.serializers",
        "description": "cla_backend.apps.diagnosis.serializers",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass DiagnosisSerializer(ClaModelSerializer):\n    choices = SerializerMethodField()\n    nodes = SerializerMethodField()\n    current_node_id = CharField()\n    category = SlugRelatedField(slug_field=\"code\", required=False, queryset=Category.objects.all(), allow_null=True)\n    matter_type1 = SlugRelatedField(\n        slug_field=\"code\", required=False, queryset=MatterType.objects.all(), allow_null=True\n    )\n    matter_type2 = SlugRelatedField(",
        "detail": "cla_backend.apps.diagnosis.serializers",
        "documentation": {}
    },
    {
        "label": "is_terminal",
        "kind": 2,
        "importPath": "cla_backend.apps.diagnosis.utils",
        "description": "cla_backend.apps.diagnosis.utils",
        "peekOfCode": "def is_terminal(digraph, g_node_id):\n    \"\"\"\n    :param digraph: a networkx DiGraph or subclass (MultiDigraph)\n    :param g_node_id: a node id\n    :return: if node is terminal\n    \"\"\"\n    if not g_node_id:\n        return False\n    return not bool(digraph.successors(g_node_id))\ndef is_pre_end_node(digraph, g_node_id):",
        "detail": "cla_backend.apps.diagnosis.utils",
        "documentation": {}
    },
    {
        "label": "is_pre_end_node",
        "kind": 2,
        "importPath": "cla_backend.apps.diagnosis.utils",
        "description": "cla_backend.apps.diagnosis.utils",
        "peekOfCode": "def is_pre_end_node(digraph, g_node_id):\n    children = digraph.successors(g_node_id)\n    if len(children) == 1 and is_terminal(digraph, children[0]):\n        return True\n    return False\ndef get_node_scope_value(digraph, g_node_id):\n    if not is_terminal(digraph, g_node_id):\n        return None\n    node = digraph.node[g_node_id]\n    label = striptags(eval_promise(node[\"label\"]) + \"    \").strip()",
        "detail": "cla_backend.apps.diagnosis.utils",
        "documentation": {}
    },
    {
        "label": "get_node_scope_value",
        "kind": 2,
        "importPath": "cla_backend.apps.diagnosis.utils",
        "description": "cla_backend.apps.diagnosis.utils",
        "peekOfCode": "def get_node_scope_value(digraph, g_node_id):\n    if not is_terminal(digraph, g_node_id):\n        return None\n    node = digraph.node[g_node_id]\n    label = striptags(eval_promise(node[\"label\"]) + \"    \").strip()\n    return DIAGNOSIS_SCOPE.CHOICES_CONST_DICT.get(label, DIAGNOSIS_SCOPE.UNKNOWN)\ndef eval_promise(value):\n    \"\"\"\n    Used to convert lazy translations to text\n    \"\"\"",
        "detail": "cla_backend.apps.diagnosis.utils",
        "documentation": {}
    },
    {
        "label": "eval_promise",
        "kind": 2,
        "importPath": "cla_backend.apps.diagnosis.utils",
        "description": "cla_backend.apps.diagnosis.utils",
        "peekOfCode": "def eval_promise(value):\n    \"\"\"\n    Used to convert lazy translations to text\n    \"\"\"\n    return isinstance(value, Promise) and force_text(value) or value",
        "detail": "cla_backend.apps.diagnosis.utils",
        "documentation": {}
    },
    {
        "label": "DiagnosisModelMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.diagnosis.views",
        "description": "cla_backend.apps.diagnosis.views",
        "peekOfCode": "class DiagnosisModelMixin(object):\n    serializer_class = DiagnosisSerializer\n    model = DiagnosisTraversal\n    queryset = DiagnosisTraversal.objects.all()\n    lookup_field = \"reference\"\n    @detail_route(methods=[\"post\"])\n    def move_down(self, request, **kwargs):\n        return self.partial_update(request, **kwargs)\n    @detail_route(methods=[\"post\"])\n    def move_up(self, request, **kwargs):",
        "detail": "cla_backend.apps.diagnosis.views",
        "documentation": {}
    },
    {
        "label": "BaseDiagnosisViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.diagnosis.views",
        "description": "cla_backend.apps.diagnosis.views",
        "peekOfCode": "class BaseDiagnosisViewSet(\n    DiagnosisModelMixin,\n    ClaCreateModelMixin,\n    mixins.RetrieveModelMixin,\n    ClaUpdateModelMixin,\n    mixins.DestroyModelMixin,\n    NestedGenericModelMixin,\n    CompatGenericViewSet,\n):\n    PARENT_FIELD = \"diagnosis\"",
        "detail": "cla_backend.apps.diagnosis.views",
        "documentation": {}
    },
    {
        "label": "TestNotifyFeatureFlagEnabled",
        "kind": 6,
        "importPath": "cla_backend.apps.govuk_notify.tests.test_notify_feature_flag",
        "description": "cla_backend.apps.govuk_notify.tests.test_notify_feature_flag",
        "peekOfCode": "class TestNotifyFeatureFlagEnabled(TestCase):\n    @override_settings(USE_EMAIL_ORCHESTRATOR_FLAG=True)\n    @override_settings(EMAIL_ORCHESTRATOR_URL=\"https://a-url.com\")\n    def test_feature_flag_enabled(self):\n        assert settings.USE_EMAIL_ORCHESTRATOR_FLAG is True\n        client = GovUkNotify()\n        assert isinstance(client, NotifyEmailOrchestrator)\n        assert not isinstance(client, GovUkNotify)\nclass TestNotifyFeatureFlagDisabled(TestCase):\n    @override_settings(USE_EMAIL_ORCHESTRATOR_FLAG=False)",
        "detail": "cla_backend.apps.govuk_notify.tests.test_notify_feature_flag",
        "documentation": {}
    },
    {
        "label": "TestNotifyFeatureFlagDisabled",
        "kind": 6,
        "importPath": "cla_backend.apps.govuk_notify.tests.test_notify_feature_flag",
        "description": "cla_backend.apps.govuk_notify.tests.test_notify_feature_flag",
        "peekOfCode": "class TestNotifyFeatureFlagDisabled(TestCase):\n    @override_settings(USE_EMAIL_ORCHESTRATOR_FLAG=False)\n    @override_settings(EMAIL_ORCHESTRATOR_URL=\"https://a-url.com\")\n    def test_feature_flag_disabled(self):\n        assert settings.USE_EMAIL_ORCHESTRATOR_FLAG is False\n        client = GovUkNotify()\n        assert isinstance(client, GovUkNotify)\n        assert not isinstance(client, NotifyEmailOrchestrator)",
        "detail": "cla_backend.apps.govuk_notify.tests.test_notify_feature_flag",
        "documentation": {}
    },
    {
        "label": "GovUkNotify",
        "kind": 6,
        "importPath": "cla_backend.apps.govuk_notify.api",
        "description": "cla_backend.apps.govuk_notify.api",
        "peekOfCode": "class GovUkNotify(object):\n    def __new__(cls):\n        \"\"\"\n        If this feature flag is set rather than creating a GovUkNotify object\n        a NotifyEmailOrchestrator object will be created instead, overloading the send_email method.\n        \"\"\"\n        if settings.USE_EMAIL_ORCHESTRATOR_FLAG:\n            return NotifyEmailOrchestrator()\n        return super(GovUkNotify, cls).__new__(cls)\n    def __init__(self):",
        "detail": "cla_backend.apps.govuk_notify.api",
        "documentation": {}
    },
    {
        "label": "NotifyEmailOrchestrator",
        "kind": 6,
        "importPath": "cla_backend.apps.govuk_notify.api",
        "description": "cla_backend.apps.govuk_notify.api",
        "peekOfCode": "class NotifyEmailOrchestrator(object):\n    def __init__(self):\n        if not settings.EMAIL_ORCHESTRATOR_URL:\n            if not settings.TEST_MODE and not settings.DEBUG:\n                raise EnvironmentError(\"EMAIL_ORCHESTRATOR_URL is not set.\")\n        self.base_url = settings.EMAIL_ORCHESTRATOR_URL\n        self.endpoint = \"email\"\n    def url(self):\n        base_url = self.base_url if self.base_url.endswith(\"/\") else self.base_url + \"/\"\n        return base_url + self.endpoint",
        "detail": "cla_backend.apps.govuk_notify.api",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "cla_backend.apps.govuk_notify.api",
        "description": "cla_backend.apps.govuk_notify.api",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass GovUkNotify(object):\n    def __new__(cls):\n        \"\"\"\n        If this feature flag is set rather than creating a GovUkNotify object\n        a NotifyEmailOrchestrator object will be created instead, overloading the send_email method.\n        \"\"\"\n        if settings.USE_EMAIL_ORCHESTRATOR_FLAG:\n            return NotifyEmailOrchestrator()\n        return super(GovUkNotify, cls).__new__(cls)",
        "detail": "cla_backend.apps.govuk_notify.api",
        "documentation": {}
    },
    {
        "label": "NoteModelForm",
        "kind": 6,
        "importPath": "cla_backend.apps.guidance.admin_support.forms",
        "description": "cla_backend.apps.guidance.admin_support.forms",
        "peekOfCode": "class NoteModelForm(forms.ModelForm):\n    \"\"\"\n    Saves the field body as html version of the raw_body field.\n    \"\"\"\n    raw_body = MarkdownAdminField(\n        label=u\"Body\", required=False, markdown_whitelist=markdown_whitelist, extensions=EXTENSIONS\n    )\n    class Meta(object):\n        model = Note\n        exclude = []",
        "detail": "cla_backend.apps.guidance.admin_support.forms",
        "documentation": {}
    },
    {
        "label": "markdown_whitelist",
        "kind": 5,
        "importPath": "cla_backend.apps.guidance.admin_support.forms",
        "description": "cla_backend.apps.guidance.admin_support.forms",
        "peekOfCode": "markdown_whitelist = DEFAULT_MARKDOWN_WHITELIST\nmarkdown_whitelist[\"tags\"].extend([\"h1\", \"h2\", \"h3\", \"a\", \"em\", \"table\", \"tr\", \"th\", \"td\", \"tbody\", \"thead\"])\nmarkdown_whitelist[\"attributes\"].extend([\"id\"])\nEXTENSIONS = [\"tables\"]\nclass NoteModelForm(forms.ModelForm):\n    \"\"\"\n    Saves the field body as html version of the raw_body field.\n    \"\"\"\n    raw_body = MarkdownAdminField(\n        label=u\"Body\", required=False, markdown_whitelist=markdown_whitelist, extensions=EXTENSIONS",
        "detail": "cla_backend.apps.guidance.admin_support.forms",
        "documentation": {}
    },
    {
        "label": "EXTENSIONS",
        "kind": 5,
        "importPath": "cla_backend.apps.guidance.admin_support.forms",
        "description": "cla_backend.apps.guidance.admin_support.forms",
        "peekOfCode": "EXTENSIONS = [\"tables\"]\nclass NoteModelForm(forms.ModelForm):\n    \"\"\"\n    Saves the field body as html version of the raw_body field.\n    \"\"\"\n    raw_body = MarkdownAdminField(\n        label=u\"Body\", required=False, markdown_whitelist=markdown_whitelist, extensions=EXTENSIONS\n    )\n    class Meta(object):\n        model = Note",
        "detail": "cla_backend.apps.guidance.admin_support.forms",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.guidance.migrations.0001_initial",
        "description": "cla_backend.apps.guidance.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = []\n    operations = [\n        migrations.CreateModel(\n            name=\"Note\",\n            fields=[\n                (\"id\", models.AutoField(verbose_name=\"ID\", serialize=False, auto_created=True, primary_key=True)),\n                (\n                    \"created\",\n                    model_utils.fields.AutoCreatedField(",
        "detail": "cla_backend.apps.guidance.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.guidance.migrations.0002_remove_note_name",
        "description": "cla_backend.apps.guidance.migrations.0002_remove_note_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"guidance\", \"0001_initial\")]\n    operations = [migrations.RemoveField(model_name=\"note\", name=\"name\")]",
        "detail": "cla_backend.apps.guidance.migrations.0002_remove_note_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.guidance.migrations.0003_note_name",
        "description": "cla_backend.apps.guidance.migrations.0003_note_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"guidance\", \"0002_remove_note_name\")]\n    operations = [\n        migrations.AddField(\n            model_name=\"note\", name=\"name\", field=models.CharField(default=\"_\", max_length=50), preserve_default=False\n        ),\n        migrations.RunPython(set_name),\n    ]",
        "detail": "cla_backend.apps.guidance.migrations.0003_note_name",
        "documentation": {}
    },
    {
        "label": "set_name",
        "kind": 2,
        "importPath": "cla_backend.apps.guidance.migrations.0003_note_name",
        "description": "cla_backend.apps.guidance.migrations.0003_note_name",
        "peekOfCode": "def set_name(apps, schema_editor):\n    Note = apps.get_model(\"guidance\", \"Note\")\n    for note in Note.objects.all():\n        note.name = note_names.get(note.pk, slugify(note.title))\n        note.save()\nclass Migration(migrations.Migration):\n    dependencies = [(\"guidance\", \"0002_remove_note_name\")]\n    operations = [\n        migrations.AddField(\n            model_name=\"note\", name=\"name\", field=models.CharField(default=\"_\", max_length=50), preserve_default=False",
        "detail": "cla_backend.apps.guidance.migrations.0003_note_name",
        "documentation": {}
    },
    {
        "label": "note_names",
        "kind": 5,
        "importPath": "cla_backend.apps.guidance.migrations.0003_note_name",
        "description": "cla_backend.apps.guidance.migrations.0003_note_name",
        "peekOfCode": "note_names = {\n    1: \"ASBOs and ASBIs\",\n    2: \"child_abuse\",\n    3: \"data_protection\",\n    4: \"debt_prompts\",\n    5: \"discrimination_prompts\",\n    6: \"discrimination_where_it_occurs\",\n    7: \"disregarded_benefits_list\",\n    8: \"domestic_abuse_signs\",\n    9: \"domestic_violence_definition\",",
        "detail": "cla_backend.apps.guidance.migrations.0003_note_name",
        "documentation": {}
    },
    {
        "label": "FullTextSearchTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.guidance.tests.test_full_text_search",
        "description": "cla_backend.apps.guidance.tests.test_full_text_search",
        "peekOfCode": "class FullTextSearchTestCase(CLAOperatorAuthBaseApiTestMixin, TestCase):\n    fixtures = [\"initial_guidance_notes\"]\n    def _get_with_auth(self, *args, **kwargs):\n        return self.client.get(*args, HTTP_AUTHORIZATION=\"Bearer %s\" % self.token, **kwargs)\n    def _get_search_results(self, q):\n        return Note.objects.word_tree_search(q)\n    def assertTitlesEqual(self, search_results, titles):\n        self.assertListEqual(titles, [s.title for s in search_results])\n    def test_search_results_are_same_as_lunr(self):\n        search_results = self._get_search_results(\"Debt Prompts\")",
        "detail": "cla_backend.apps.guidance.tests.test_full_text_search",
        "documentation": {}
    },
    {
        "label": "TagInline",
        "kind": 6,
        "importPath": "cla_backend.apps.guidance.admin",
        "description": "cla_backend.apps.guidance.admin",
        "peekOfCode": "class TagInline(admin.TabularInline):\n    model = Note.tags.through\nclass NoteAdmin(admin.ModelAdmin):\n    ordering = [\"title\"]\n    exclude = (\"created\", \"modified\", \"body\")\n    list_display = (\"name\", \"title\", \"modified\", \"created\")\n    search_fields = [\"title\"]\n    prepopulated_fields = {\"name\": (\"title\",)}\n    inlines = [TagInline]\n    form = NoteModelForm",
        "detail": "cla_backend.apps.guidance.admin",
        "documentation": {}
    },
    {
        "label": "NoteAdmin",
        "kind": 6,
        "importPath": "cla_backend.apps.guidance.admin",
        "description": "cla_backend.apps.guidance.admin",
        "peekOfCode": "class NoteAdmin(admin.ModelAdmin):\n    ordering = [\"title\"]\n    exclude = (\"created\", \"modified\", \"body\")\n    list_display = (\"name\", \"title\", \"modified\", \"created\")\n    search_fields = [\"title\"]\n    prepopulated_fields = {\"name\": (\"title\",)}\n    inlines = [TagInline]\n    form = NoteModelForm\nadmin.site.register(Tag)\nadmin.site.register(Note, NoteAdmin)",
        "detail": "cla_backend.apps.guidance.admin",
        "documentation": {}
    },
    {
        "label": "Tag",
        "kind": 6,
        "importPath": "cla_backend.apps.guidance.models",
        "description": "cla_backend.apps.guidance.models",
        "peekOfCode": "class Tag(models.Model):\n    title = models.CharField(max_length=100)\n    class Meta(object):\n        ordering = (\"title\",)\n    def __unicode__(self):\n        return self.title\nclass NoteTagRelation(models.Model):\n    tag = models.ForeignKey(\"Tag\")\n    note = models.ForeignKey(\"Note\")\n    class Meta(object):",
        "detail": "cla_backend.apps.guidance.models",
        "documentation": {}
    },
    {
        "label": "NoteTagRelation",
        "kind": 6,
        "importPath": "cla_backend.apps.guidance.models",
        "description": "cla_backend.apps.guidance.models",
        "peekOfCode": "class NoteTagRelation(models.Model):\n    tag = models.ForeignKey(\"Tag\")\n    note = models.ForeignKey(\"Note\")\n    class Meta(object):\n        unique_together = ((\"tag\", \"note\"),)\n        verbose_name = \"Tag\"\n    def __unicode__(self):\n        return u\"%s (%s)\" % (self.tag.title, self.note.title)\nclass Note(TimeStampedModel):\n    title = models.CharField(max_length=100)",
        "detail": "cla_backend.apps.guidance.models",
        "documentation": {}
    },
    {
        "label": "Note",
        "kind": 6,
        "importPath": "cla_backend.apps.guidance.models",
        "description": "cla_backend.apps.guidance.models",
        "peekOfCode": "class Note(TimeStampedModel):\n    title = models.CharField(max_length=100)\n    body = models.TextField()\n    raw_body = models.TextField()\n    name = models.CharField(max_length=50)\n    tags = models.ManyToManyField(\"Tag\", related_name=\"notes\", through=\"NoteTagRelation\")\n    search_index = VectorField()\n    objects = SearchManager(\n        fields=((\"title\", \"A\"), (\"tags__title\", \"B\"), (\"raw_body\", \"D\")), auto_update_search_field=True\n    )",
        "detail": "cla_backend.apps.guidance.models",
        "documentation": {}
    },
    {
        "label": "NoteSearchSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.guidance.serializers",
        "description": "cla_backend.apps.guidance.serializers",
        "peekOfCode": "class NoteSearchSerializer(serializers.ModelSerializer):\n    class Meta(object):\n        model = Note\n        fields = (\"id\", \"name\", \"title\")\nclass NoteSerializer(serializers.ModelSerializer):\n    class Meta(object):\n        model = Note\n        fields = (\"body\", \"name\", \"title\")",
        "detail": "cla_backend.apps.guidance.serializers",
        "documentation": {}
    },
    {
        "label": "NoteSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.guidance.serializers",
        "description": "cla_backend.apps.guidance.serializers",
        "peekOfCode": "class NoteSerializer(serializers.ModelSerializer):\n    class Meta(object):\n        model = Note\n        fields = (\"body\", \"name\", \"title\")",
        "detail": "cla_backend.apps.guidance.serializers",
        "documentation": {}
    },
    {
        "label": "PostgresFullTextSearchFilter",
        "kind": 6,
        "importPath": "cla_backend.apps.guidance.views",
        "description": "cla_backend.apps.guidance.views",
        "peekOfCode": "class PostgresFullTextSearchFilter(filters.BaseFilterBackend):\n    search_param = filters.api_settings.SEARCH_PARAM\n    def filter_queryset(self, request, queryset, view):\n        q = request.query_params.get(self.search_param, \"\")\n        if q:\n            queryset = queryset.word_tree_search(q)\n        return queryset\nclass BaseGuidanceNoteViewSet(viewsets.ReadOnlyModelViewSet):\n    queryset = Note.objects.all()\n    model = Note",
        "detail": "cla_backend.apps.guidance.views",
        "documentation": {}
    },
    {
        "label": "BaseGuidanceNoteViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.guidance.views",
        "description": "cla_backend.apps.guidance.views",
        "peekOfCode": "class BaseGuidanceNoteViewSet(viewsets.ReadOnlyModelViewSet):\n    queryset = Note.objects.all()\n    model = Note\n    lookup_field = \"name\"\n    filter_backends = (PostgresFullTextSearchFilter,)\n    def serializer_class(self, *args, **kwargs):\n        if kwargs.get(\"many\", None):\n            return NoteSearchSerializer(*args, **kwargs)\n        else:\n            return NoteSerializer(*args, **kwargs)",
        "detail": "cla_backend.apps.guidance.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.historic.management.commands.load_historic_cases",
        "description": "cla_backend.apps.historic.management.commands.load_historic_cases",
        "peekOfCode": "class Command(BaseCommand):\n    option_list = BaseCommand.option_list + (\n        make_option(\"-c\", \"--case_file\", dest=\"case_file\", help=\"path to historic cases .csv file\"),\n        make_option(\"-k\", \"--kb_file\", dest=\"kb_file\", help=\"path to accompanying knowledge-base .csv file\"),\n    )\n    help = \"Create CaseArchived object from a case and knowledge-base CSV\"\n    required_args = (\"case_file\", \"kb_file\")\n    def handle(self, *args, **options):\n        if options[\"case_file\"] is None or options[\"kb_file\"] is None:\n            raise ValueError(\"Missing parameter. Try --help\")",
        "detail": "cla_backend.apps.historic.management.commands.load_historic_cases",
        "documentation": {}
    },
    {
        "label": "yesno",
        "kind": 2,
        "importPath": "cla_backend.apps.historic.management.commands.load_historic_cases",
        "description": "cla_backend.apps.historic.management.commands.load_historic_cases",
        "peekOfCode": "def yesno(str):\n    return True if str.upper() == \"YES\" else False\ndef parse_dt(str):\n    str = str.strip()\n    if str and is_iterable(str):\n        try:\n            return make_aware(parse(str, dayfirst=True), UTC())\n        except Exception:\n            import pdb\n            pdb.set_trace()",
        "detail": "cla_backend.apps.historic.management.commands.load_historic_cases",
        "documentation": {}
    },
    {
        "label": "parse_dt",
        "kind": 2,
        "importPath": "cla_backend.apps.historic.management.commands.load_historic_cases",
        "description": "cla_backend.apps.historic.management.commands.load_historic_cases",
        "peekOfCode": "def parse_dt(str):\n    str = str.strip()\n    if str and is_iterable(str):\n        try:\n            return make_aware(parse(str, dayfirst=True), UTC())\n        except Exception:\n            import pdb\n            pdb.set_trace()\nclass Command(BaseCommand):\n    option_list = BaseCommand.option_list + (",
        "detail": "cla_backend.apps.historic.management.commands.load_historic_cases",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.historic.migrations.0001_initial",
        "description": "cla_backend.apps.historic.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = []\n    operations = [\n        migrations.CreateModel(\n            name=\"CaseArchived\",\n            fields=[\n                (\"id\", models.AutoField(verbose_name=\"ID\", serialize=False, auto_created=True, primary_key=True)),\n                (\n                    \"created\",\n                    model_utils.fields.AutoCreatedField(",
        "detail": "cla_backend.apps.historic.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "CaseArchived",
        "kind": 6,
        "importPath": "cla_backend.apps.historic.models",
        "description": "cla_backend.apps.historic.models",
        "peekOfCode": "class CaseArchived(TimeStampedModel):\n    full_name = models.TextField(null=True, blank=True)\n    date_of_birth = models.DateField(null=True, blank=True)\n    postcode = models.CharField(max_length=12, blank=True, null=True)\n    laa_reference = models.BigIntegerField(null=True, blank=True, unique=True, editable=False)\n    specialist_referred_to = models.TextField(null=True, blank=True)\n    date_specialist_referred = models.DateTimeField(null=True, blank=True)\n    date_specialist_closed = models.DateTimeField(null=True, blank=True)\n    knowledgebase_items_used = models.TextField(null=True, blank=True)\n    area_of_law = models.TextField(null=True, blank=True)",
        "detail": "cla_backend.apps.historic.models",
        "documentation": {}
    },
    {
        "label": "KnowledgebaseCsvParse",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.management.commands._csv_2_fixture",
        "description": "cla_backend.apps.knowledgebase.management.commands._csv_2_fixture",
        "peekOfCode": "class KnowledgebaseCsvParse(object):\n    def __init__(self, csv_file_handle):\n        self.datetime_now = datetime.now().replace(tzinfo=timezone.get_current_timezone()).isoformat()\n        #                        csv_field -> django_field_name\n        #                        only include fields which are used\n        self.field_mapping = {\n            \"Organisation/Umbrella\": \"organisation\",\n            \"Service (name resource will be given on KB)\": \"service_name\",\n            \"When to use (N.B. for in scope categories, signpost using directory in first instance).\": \"when_to_use\",\n            \"Entry type\": \"resource_type\",",
        "detail": "cla_backend.apps.knowledgebase.management.commands._csv_2_fixture",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.management.commands.builddata",
        "description": "cla_backend.apps.knowledgebase.management.commands.builddata",
        "peekOfCode": "class Command(BaseCommand):\n    args = \"load_knowledgebase_csv CSV_FILE.csv\"\n    help = (\n        \"Create a derived dataset. At present, just load_knowledgebase_csv \"\n        \"is implemented. It loads a CSV spreadsheet into a fixture ready \"\n        \"to be loaddata'ed into DB\"\n    )\n    KNOWLEDGEBASE_FIXTURE = \"cla_backend/apps/knowledgebase/fixtures/kb_from_spreadsheet.json\"\n    def handle(self, *args, **options):\n        if args[0] == \"load_knowledgebase_csv\":",
        "detail": "cla_backend.apps.knowledgebase.management.commands.builddata",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.management.commands.csv_to_article",
        "description": "cla_backend.apps.knowledgebase.management.commands.csv_to_article",
        "peekOfCode": "class Command(BaseCommand):\n    option_list = BaseCommand.option_list + (make_option(\"-f\", \"--file\", dest=\"file\", help=\"path to .csv file\"),)\n    help = \"Create model objects from csv file (-f file_path)\"\n    required_args = (\"csv\", \"model\")\n    def handle(self, *args, **options):\n        if options[\"file\"] is None:\n            raise ValueError(\"Missing parameter. Try --help\")\n        self.stderr.write(\"Loading Articless from %s\" % options[\"file\"])\n        with open(options[\"file\"], \"rU\") as f:\n            reader = csv.DictReader(f)",
        "detail": "cla_backend.apps.knowledgebase.management.commands.csv_to_article",
        "documentation": {}
    },
    {
        "label": "regex",
        "kind": 5,
        "importPath": "cla_backend.apps.knowledgebase.management.commands.csv_to_article",
        "description": "cla_backend.apps.knowledgebase.management.commands.csv_to_article",
        "peekOfCode": "regex = re.compile(r\"\\(([^,]*)\\)\")\nclass Command(BaseCommand):\n    option_list = BaseCommand.option_list + (make_option(\"-f\", \"--file\", dest=\"file\", help=\"path to .csv file\"),)\n    help = \"Create model objects from csv file (-f file_path)\"\n    required_args = (\"csv\", \"model\")\n    def handle(self, *args, **options):\n        if options[\"file\"] is None:\n            raise ValueError(\"Missing parameter. Try --help\")\n        self.stderr.write(\"Loading Articless from %s\" % options[\"file\"])\n        with open(options[\"file\"], \"rU\") as f:",
        "detail": "cla_backend.apps.knowledgebase.management.commands.csv_to_article",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.management.commands.general_and_government_addition",
        "description": "cla_backend.apps.knowledgebase.management.commands.general_and_government_addition",
        "peekOfCode": "class Command(BaseCommand):\n    def handle(self, *args, **options):\n        self.stdout.write(\"Getting or creating General Article Category\")\n        ArticleCategory.objects.get_or_create(name=\"General\")\n        self.stdout.write(\"Getting or creating Government Article Category\")\n        ArticleCategory.objects.get_or_create(name=\"Government\")",
        "detail": "cla_backend.apps.knowledgebase.management.commands.general_and_government_addition",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.management.commands.grant_cla_superusers_article_categories_permissions",
        "description": "cla_backend.apps.knowledgebase.management.commands.grant_cla_superusers_article_categories_permissions",
        "peekOfCode": "class Command(BaseCommand):\n    def handle(self, *args, **options):\n        content_type = ContentType.objects.get(app_label=\"knowledgebase\", model=\"articlecategory\")\n        perms = Permission.objects.filter(content_type=content_type)\n        group = Group.objects.get(name=\"CLA Superusers\")\n        for perm in perms:\n            group.permissions.add(perm)",
        "detail": "cla_backend.apps.knowledgebase.management.commands.grant_cla_superusers_article_categories_permissions",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.migrations.0001_initial",
        "description": "cla_backend.apps.knowledgebase.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = []\n    operations = [\n        migrations.CreateModel(\n            name=\"Article\",\n            fields=[\n                (\"id\", models.AutoField(verbose_name=\"ID\", serialize=False, auto_created=True, primary_key=True)),\n                (\n                    \"created\",\n                    model_utils.fields.AutoCreatedField(",
        "detail": "cla_backend.apps.knowledgebase.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "ArticleCategoryClaSuperUsersPermissionCommandTest",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.tests.admin.test_command",
        "description": "cla_backend.apps.knowledgebase.tests.admin.test_command",
        "peekOfCode": "class ArticleCategoryClaSuperUsersPermissionCommandTest(TestCase):\n    def test_command(self):\n        group = Group.objects.get(name=\"CLA Superusers\")\n        cla_superuser = make_user()\n        group.user_set.add(cla_superuser)\n        content_type = ContentType.objects.get(app_label=\"knowledgebase\", model=\"articlecategory\")\n        perms = [\n            \"knowledgebase.{}\".format(perm.codename) for perm in Permission.objects.filter(content_type=content_type)\n        ]\n        self.assertFalse(cla_superuser.has_perms(perms))",
        "detail": "cla_backend.apps.knowledgebase.tests.admin.test_command",
        "documentation": {}
    },
    {
        "label": "KnowledgebaseArticleAdminViewTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.tests.admin.test_views",
        "description": "cla_backend.apps.knowledgebase.tests.admin.test_views",
        "peekOfCode": "class KnowledgebaseArticleAdminViewTestCase(TestCase):\n    def test_csv_import_access__unathenticated_user(self):\n        url = reverse(\"admin:knowledgebase_import_csv\")\n        response = self.client.get(url)\n        expected_redirect_url = \"http://testserver/admin/login/?next=%s\" % url\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(expected_redirect_url, response.get(\"Location\"))\n    def test_csv_import_access_authenticated_user(self):\n        admin = make_user(is_staff=True, is_superuser=True, password=\"admin\")\n        admin.set_password(\"admin\")",
        "detail": "cla_backend.apps.knowledgebase.tests.admin.test_views",
        "documentation": {}
    },
    {
        "label": "article",
        "kind": 5,
        "importPath": "cla_backend.apps.knowledgebase.tests.mommy_recipes",
        "description": "cla_backend.apps.knowledgebase.tests.mommy_recipes",
        "peekOfCode": "article = Recipe(models.Article)\ntelephone_number = Recipe(models.TelephoneNumber)\narticle_category = Recipe(models.ArticleCategory)\narticle_category_matrix = Recipe(models.ArticleCategoryMatrix)",
        "detail": "cla_backend.apps.knowledgebase.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "telephone_number",
        "kind": 5,
        "importPath": "cla_backend.apps.knowledgebase.tests.mommy_recipes",
        "description": "cla_backend.apps.knowledgebase.tests.mommy_recipes",
        "peekOfCode": "telephone_number = Recipe(models.TelephoneNumber)\narticle_category = Recipe(models.ArticleCategory)\narticle_category_matrix = Recipe(models.ArticleCategoryMatrix)",
        "detail": "cla_backend.apps.knowledgebase.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "article_category",
        "kind": 5,
        "importPath": "cla_backend.apps.knowledgebase.tests.mommy_recipes",
        "description": "cla_backend.apps.knowledgebase.tests.mommy_recipes",
        "peekOfCode": "article_category = Recipe(models.ArticleCategory)\narticle_category_matrix = Recipe(models.ArticleCategoryMatrix)",
        "detail": "cla_backend.apps.knowledgebase.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "article_category_matrix",
        "kind": 5,
        "importPath": "cla_backend.apps.knowledgebase.tests.mommy_recipes",
        "description": "cla_backend.apps.knowledgebase.tests.mommy_recipes",
        "peekOfCode": "article_category_matrix = Recipe(models.ArticleCategoryMatrix)",
        "detail": "cla_backend.apps.knowledgebase.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "TestCSV2Fixture",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.tests.test_csv_2_fixture",
        "description": "cla_backend.apps.knowledgebase.tests.test_csv_2_fixture",
        "peekOfCode": "class TestCSV2Fixture(TestCase):\n    def load_JSON_fixture_into_DB(self, csv_file_path):\n        management.call_command(\"builddata\", \"load_knowledgebase_csv\", csv_file_path)\n        management.call_command(\n            \"loaddata\", os.path.abspath(\"cla_backend/apps/knowledgebase/fixtures/kb_from_spreadsheet.json\")\n        )\n    def calculate_pk_range(self, article_category_matrices):\n        min_range = min(article_category_matrices, key=lambda x: x[\"pk\"])\n        max_range = max(article_category_matrices, key=lambda x: x[\"pk\"])\n        return min_range[\"pk\"], max_range[\"pk\"]",
        "detail": "cla_backend.apps.knowledgebase.tests.test_csv_2_fixture",
        "documentation": {}
    },
    {
        "label": "KnowledgebaseCSVImporterTester",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.tests.test_csv_user_import",
        "description": "cla_backend.apps.knowledgebase.tests.test_csv_user_import",
        "peekOfCode": "class KnowledgebaseCSVImporterTester(TestCase):\n    _CSV_ROW = [\n        \"NEW\",\n        \"2014-06-27 14:52:55.547000+00:00\",\n        \"2015-01-28 15:06:18.718000+00:00\",\n        \"LEGAL\",\n        \"LAA\",\n        \"[PREF DISCRIMINATION]\",\n        \"LAA (Legal Aid Agency)\",\n        \"https,//www.gov.uk/government/organisations/legal-aid-agency\",",
        "detail": "cla_backend.apps.knowledgebase.tests.test_csv_user_import",
        "documentation": {}
    },
    {
        "label": "AlternativeHelpEventTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.tests.test_events",
        "description": "cla_backend.apps.knowledgebase.tests.test_events",
        "peekOfCode": "class AlternativeHelpEventTestCase(EventTestCaseMixin, TestCase):\n    EVENT_KEY = \"alternative_help\"\n    def test_assign_alternative_help(self):\n        self._test_process_with_expicit_code([\"COSPF\", \"IRKB\", \"SPFN\", \"SPFM\"])",
        "detail": "cla_backend.apps.knowledgebase.tests.test_events",
        "documentation": {}
    },
    {
        "label": "KnowledgebaseCSVImporter",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.utils.csv_user_import",
        "description": "cla_backend.apps.knowledgebase.utils.csv_user_import",
        "peekOfCode": "class KnowledgebaseCSVImporter:\n    def parse(self, csv_file_handler):\n        rows = []\n        errors = []\n        reader = csv.reader(csv_file_handler, delimiter=\",\")\n        # Skip header\n        next(reader)\n        for index, row in enumerate(reader):\n            try:\n                rows.append(self.process_row(row))",
        "detail": "cla_backend.apps.knowledgebase.utils.csv_user_import",
        "documentation": {}
    },
    {
        "label": "transform_category",
        "kind": 2,
        "importPath": "cla_backend.apps.knowledgebase.utils.csv_user_import_mappings",
        "description": "cla_backend.apps.knowledgebase.utils.csv_user_import_mappings",
        "peekOfCode": "def transform_category(value):\n    try:\n        return ArticleCategory.objects.get(name=value)\n    except ArticleCategory.DoesNotExist:\n        raise ValueError(\"Could not find category with name: %s\" % value)\ndef transform_preferred_signpost(value):\n    value_normalised = value.lower()\n    if value_normalised not in [\"true\", \"false\"]:\n        raise ValueError(\"%s is an invalid value for Preferred signpost\" % value)\n    return value_normalised == \"true\"",
        "detail": "cla_backend.apps.knowledgebase.utils.csv_user_import_mappings",
        "documentation": {}
    },
    {
        "label": "transform_preferred_signpost",
        "kind": 2,
        "importPath": "cla_backend.apps.knowledgebase.utils.csv_user_import_mappings",
        "description": "cla_backend.apps.knowledgebase.utils.csv_user_import_mappings",
        "peekOfCode": "def transform_preferred_signpost(value):\n    value_normalised = value.lower()\n    if value_normalised not in [\"true\", \"false\"]:\n        raise ValueError(\"%s is an invalid value for Preferred signpost\" % value)\n    return value_normalised == \"true\"\nTELEPHONE_COLUMN_FIELD_MAPPING = [\n    [(19, \"name\"), (20, \"number\")],\n    [(21, \"name\"), (22, \"number\")],\n    [(23, \"name\"), (24, \"number\")],\n    [(25, \"name\"), (26, \"number\")],",
        "detail": "cla_backend.apps.knowledgebase.utils.csv_user_import_mappings",
        "documentation": {}
    },
    {
        "label": "TELEPHONE_COLUMN_FIELD_MAPPING",
        "kind": 5,
        "importPath": "cla_backend.apps.knowledgebase.utils.csv_user_import_mappings",
        "description": "cla_backend.apps.knowledgebase.utils.csv_user_import_mappings",
        "peekOfCode": "TELEPHONE_COLUMN_FIELD_MAPPING = [\n    [(19, \"name\"), (20, \"number\")],\n    [(21, \"name\"), (22, \"number\")],\n    [(23, \"name\"), (24, \"number\")],\n    [(25, \"name\"), (26, \"number\")],\n]\nARTICLE_COLUMN_FIELD_MAPPING = [\n    (0, \"pk\"),\n    (1, \"created\"),\n    (2, \"modified\"),",
        "detail": "cla_backend.apps.knowledgebase.utils.csv_user_import_mappings",
        "documentation": {}
    },
    {
        "label": "ARTICLE_COLUMN_FIELD_MAPPING",
        "kind": 5,
        "importPath": "cla_backend.apps.knowledgebase.utils.csv_user_import_mappings",
        "description": "cla_backend.apps.knowledgebase.utils.csv_user_import_mappings",
        "peekOfCode": "ARTICLE_COLUMN_FIELD_MAPPING = [\n    (0, \"pk\"),\n    (1, \"created\"),\n    (2, \"modified\"),\n    (3, \"resource_type\"),\n    (4, \"service_name\"),\n    (5, \"service_tag\"),\n    (6, \"organisation\"),\n    (7, \"website\"),\n    (8, \"email\"),",
        "detail": "cla_backend.apps.knowledgebase.utils.csv_user_import_mappings",
        "documentation": {}
    },
    {
        "label": "ARTICLE_CATEGORY_MATRIX_COLUMN_FIELD_MAPPING",
        "kind": 5,
        "importPath": "cla_backend.apps.knowledgebase.utils.csv_user_import_mappings",
        "description": "cla_backend.apps.knowledgebase.utils.csv_user_import_mappings",
        "peekOfCode": "ARTICLE_CATEGORY_MATRIX_COLUMN_FIELD_MAPPING = [\n    [(27, \"article_category\", transform_category), (28, \"preferred_signpost\", transform_preferred_signpost)],\n    [(29, \"article_category\", transform_category), (30, \"preferred_signpost\", transform_preferred_signpost)],\n    [(31, \"article_category\", transform_category), (32, \"preferred_signpost\", transform_preferred_signpost)],\n    [(33, \"article_category\", transform_category), (34, \"preferred_signpost\", transform_preferred_signpost)],\n    [(35, \"article_category\", transform_category), (36, \"preferred_signpost\", transform_preferred_signpost)],\n    [(37, \"article_category\", transform_category), (38, \"preferred_signpost\", transform_preferred_signpost)],\n]",
        "detail": "cla_backend.apps.knowledgebase.utils.csv_user_import_mappings",
        "documentation": {}
    },
    {
        "label": "TelephoneNumberInline",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.admin",
        "description": "cla_backend.apps.knowledgebase.admin",
        "peekOfCode": "class TelephoneNumberInline(admin.TabularInline):\n    model = TelephoneNumber\nclass ArticleCategoryMatrixInline(admin.TabularInline):\n    model = ArticleCategoryMatrix\nclass ArticleAdmin(admin.ModelAdmin):\n    change_list_template = \"admin/knowledgebase/custom_change_list.html\"\n    actions = None\n    inlines = [TelephoneNumberInline, ArticleCategoryMatrixInline]\n    ordering = [\"service_name\"]\n    fields = (",
        "detail": "cla_backend.apps.knowledgebase.admin",
        "documentation": {}
    },
    {
        "label": "ArticleCategoryMatrixInline",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.admin",
        "description": "cla_backend.apps.knowledgebase.admin",
        "peekOfCode": "class ArticleCategoryMatrixInline(admin.TabularInline):\n    model = ArticleCategoryMatrix\nclass ArticleAdmin(admin.ModelAdmin):\n    change_list_template = \"admin/knowledgebase/custom_change_list.html\"\n    actions = None\n    inlines = [TelephoneNumberInline, ArticleCategoryMatrixInline]\n    ordering = [\"service_name\"]\n    fields = (\n        \"resource_type\",\n        \"service_name\",",
        "detail": "cla_backend.apps.knowledgebase.admin",
        "documentation": {}
    },
    {
        "label": "ArticleAdmin",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.admin",
        "description": "cla_backend.apps.knowledgebase.admin",
        "peekOfCode": "class ArticleAdmin(admin.ModelAdmin):\n    change_list_template = \"admin/knowledgebase/custom_change_list.html\"\n    actions = None\n    inlines = [TelephoneNumberInline, ArticleCategoryMatrixInline]\n    ordering = [\"service_name\"]\n    fields = (\n        \"resource_type\",\n        \"service_name\",\n        \"service_tag\",\n        \"organisation\",",
        "detail": "cla_backend.apps.knowledgebase.admin",
        "documentation": {}
    },
    {
        "label": "ArticleCategoryMatrixAdmin",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.admin",
        "description": "cla_backend.apps.knowledgebase.admin",
        "peekOfCode": "class ArticleCategoryMatrixAdmin(admin.ModelAdmin):\n    list_display = (\"service_name\", \"category_name\", \"preferred_signpost\")\n    actions = None\n    list_editable = (\"preferred_signpost\",)\n    list_display_links = (\"service_name\",)\n    search_fields = [\"article_category__name\", \"article__service_name\"]\n    ordering = (\"article_category__name\", \"-preferred_signpost\", \"article__service_name\")\n    def service_name(self, obj):\n        return obj.article.service_name\n    def category_name(self, obj):",
        "detail": "cla_backend.apps.knowledgebase.admin",
        "documentation": {}
    },
    {
        "label": "AlternativeHelpEvent",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.events",
        "description": "cla_backend.apps.knowledgebase.events",
        "peekOfCode": "class AlternativeHelpEvent(BaseEvent):\n    key = \"alternative_help\"\n    codes = {\n        \"IRKB\": {\n            \"type\": LOG_TYPES.OUTCOME,\n            \"level\": LOG_LEVELS.HIGH,\n            \"selectable_by\": [LOG_ROLES.OPERATOR, LOG_ROLES.SPECIALIST],\n            \"description\": \"Assigned to alternative help from Knowledgebase\",\n            \"stops_timer\": True,\n            \"set_requires_action_by\": None_if_owned_by_op_or_op_manager,",
        "detail": "cla_backend.apps.knowledgebase.events",
        "documentation": {}
    },
    {
        "label": "KnowledgebaseCSVUploadForm",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.forms",
        "description": "cla_backend.apps.knowledgebase.forms",
        "peekOfCode": "class KnowledgebaseCSVUploadForm(forms.Form):\n    csv_file = forms.FileField(required=True)\n    def __init__(self, *args, **kwargs):\n        super(KnowledgebaseCSVUploadForm, self).__init__(*args, **kwargs)\n        self.importer = KnowledgebaseCSVImporter()\n        self.rows = []\n    @staticmethod\n    def _raise_validation_errors(errors):\n        validation_errors = []\n        for error in errors:",
        "detail": "cla_backend.apps.knowledgebase.forms",
        "documentation": {}
    },
    {
        "label": "Article",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.models",
        "description": "cla_backend.apps.knowledgebase.models",
        "peekOfCode": "class Article(TimeStampedModel):\n    organisation = models.CharField(max_length=255, null=True, blank=True)\n    service_name = models.CharField(max_length=255, null=True, blank=True)\n    service_tag = models.CharField(max_length=50, null=True, blank=True)\n    description = models.TextField(blank=True, null=True)\n    public_description = models.TextField(blank=True, null=True)\n    website = models.CharField(max_length=255, null=True, blank=True)\n    keywords = models.TextField(blank=True, null=True)\n    when_to_use = models.TextField(blank=True, null=True)\n    email = models.EmailField(blank=True, null=True)",
        "detail": "cla_backend.apps.knowledgebase.models",
        "documentation": {}
    },
    {
        "label": "ArticleCategory",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.models",
        "description": "cla_backend.apps.knowledgebase.models",
        "peekOfCode": "class ArticleCategory(TimeStampedModel):\n    name = models.CharField(max_length=25)\n    def __unicode__(self):\n        return self.name\n    class Meta(object):\n        verbose_name_plural = \"Article categories\"\nclass ArticleCategoryMatrix(TimeStampedModel):\n    article = models.ForeignKey(Article)\n    article_category = models.ForeignKey(ArticleCategory)\n    preferred_signpost = models.BooleanField(default=False)",
        "detail": "cla_backend.apps.knowledgebase.models",
        "documentation": {}
    },
    {
        "label": "ArticleCategoryMatrix",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.models",
        "description": "cla_backend.apps.knowledgebase.models",
        "peekOfCode": "class ArticleCategoryMatrix(TimeStampedModel):\n    article = models.ForeignKey(Article)\n    article_category = models.ForeignKey(ArticleCategory)\n    preferred_signpost = models.BooleanField(default=False)\n    def __unicode__(self):\n        return u\"%s - %s\" % (self.article.__unicode__(), self.article_category.__unicode__())\n    class Meta(object):\n        verbose_name_plural = \"Article category matrices\"\nclass TelephoneNumber(TimeStampedModel):\n    article = models.ForeignKey(\"Article\")",
        "detail": "cla_backend.apps.knowledgebase.models",
        "documentation": {}
    },
    {
        "label": "TelephoneNumber",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.models",
        "description": "cla_backend.apps.knowledgebase.models",
        "peekOfCode": "class TelephoneNumber(TimeStampedModel):\n    article = models.ForeignKey(\"Article\")\n    name = models.CharField(max_length=100, blank=True, null=True)\n    number = models.CharField(max_length=25)",
        "detail": "cla_backend.apps.knowledgebase.models",
        "documentation": {}
    },
    {
        "label": "ArticleCategoryMatrixSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.serializers",
        "description": "cla_backend.apps.knowledgebase.serializers",
        "peekOfCode": "class ArticleCategoryMatrixSerializer(serializers.ModelSerializer):\n    id = serializers.IntegerField(source=\"article_category.pk\")\n    name = serializers.CharField(source=\"article_category.name\")\n    preferred_signpost = serializers.CharField()\n    class Meta(object):\n        model = ArticleCategoryMatrix\n        fields = (\"id\", \"name\", \"preferred_signpost\")\nclass TelephoneNumberSerializer(serializers.ModelSerializer):\n    class Meta(object):\n        model = TelephoneNumber",
        "detail": "cla_backend.apps.knowledgebase.serializers",
        "documentation": {}
    },
    {
        "label": "TelephoneNumberSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.serializers",
        "description": "cla_backend.apps.knowledgebase.serializers",
        "peekOfCode": "class TelephoneNumberSerializer(serializers.ModelSerializer):\n    class Meta(object):\n        model = TelephoneNumber\n        exclude = (\"id\", \"article\", \"created\", \"modified\")\nclass ArticleSerializer(serializers.ModelSerializer):\n    categories = ArticleCategoryMatrixSerializer(source=\"articlecategorymatrix_set\", many=True)\n    telephone_numbers = TelephoneNumberSerializer(source=\"telephonenumber_set\", many=True)\n    class Meta(object):\n        model = Article\n        exclude = (\"article_category\",)",
        "detail": "cla_backend.apps.knowledgebase.serializers",
        "documentation": {}
    },
    {
        "label": "ArticleSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.serializers",
        "description": "cla_backend.apps.knowledgebase.serializers",
        "peekOfCode": "class ArticleSerializer(serializers.ModelSerializer):\n    categories = ArticleCategoryMatrixSerializer(source=\"articlecategorymatrix_set\", many=True)\n    telephone_numbers = TelephoneNumberSerializer(source=\"telephonenumber_set\", many=True)\n    class Meta(object):\n        model = Article\n        exclude = (\"article_category\",)\nclass ArticleCategorySerializer(serializers.ModelSerializer):\n    class Meta(object):\n        model = ArticleCategory\n        exclude = (\"created\", \"modified\")",
        "detail": "cla_backend.apps.knowledgebase.serializers",
        "documentation": {}
    },
    {
        "label": "ArticleCategorySerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.serializers",
        "description": "cla_backend.apps.knowledgebase.serializers",
        "peekOfCode": "class ArticleCategorySerializer(serializers.ModelSerializer):\n    class Meta(object):\n        model = ArticleCategory\n        exclude = (\"created\", \"modified\")",
        "detail": "cla_backend.apps.knowledgebase.serializers",
        "documentation": {}
    },
    {
        "label": "ArticleCategoryFilter",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.views",
        "description": "cla_backend.apps.knowledgebase.views",
        "peekOfCode": "class ArticleCategoryFilter(django_filters.FilterSet):\n    article_category = django_filters.ModelMultipleChoiceFilter\n    class Meta(object):\n        model = Article\n        fields = (\"article_category\",)\nclass BaseArticleViewSet(viewsets.ReadOnlyModelViewSet):\n    queryset = Article.objects.all()\n    model = Article\n    serializer_class = ArticleSerializer\n    pagination_class = StandardResultsSetPagination",
        "detail": "cla_backend.apps.knowledgebase.views",
        "documentation": {}
    },
    {
        "label": "BaseArticleViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.views",
        "description": "cla_backend.apps.knowledgebase.views",
        "peekOfCode": "class BaseArticleViewSet(viewsets.ReadOnlyModelViewSet):\n    queryset = Article.objects.all()\n    model = Article\n    serializer_class = ArticleSerializer\n    pagination_class = StandardResultsSetPagination\n    filter_backends = (filters.SearchFilter, filters.DjangoFilterBackend, filters.OrderingFilter)\n    filter_class = ArticleCategoryFilter\n    ordering = (\"-articlecategorymatrix__preferred_signpost\",)\n    search_fields = (\n        \"organisation\",",
        "detail": "cla_backend.apps.knowledgebase.views",
        "documentation": {}
    },
    {
        "label": "BaseArticleCategoryViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.knowledgebase.views",
        "description": "cla_backend.apps.knowledgebase.views",
        "peekOfCode": "class BaseArticleCategoryViewSet(viewsets.ReadOnlyModelViewSet):\n    queryset = ArticleCategory.objects.all()\n    model = ArticleCategory\n    serializer_class = ArticleCategorySerializer",
        "detail": "cla_backend.apps.knowledgebase.views",
        "documentation": {}
    },
    {
        "label": "CategoryModelForm",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.admin_support.forms",
        "description": "cla_backend.apps.legalaid.admin_support.forms",
        "peekOfCode": "class CategoryModelForm(forms.ModelForm):\n    \"\"\"\n    Saves the field description as html version of the raw_description field.\n    \"\"\"\n    raw_description = MarkdownAdminField(label=u\"Description\", required=False)\n    class Meta(object):\n        model = Category\n        exclude = []\n    def save(self, *args, **kwargs):\n        self.instance.description = markdown.markdown(self.instance.raw_description)",
        "detail": "cla_backend.apps.legalaid.admin_support.forms",
        "documentation": {}
    },
    {
        "label": "MediaCodeList",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.management.commands._media_codes",
        "description": "cla_backend.apps.legalaid.management.commands._media_codes",
        "peekOfCode": "class MediaCodeList(object):\n    def __init__(self, csv_data):\n        self.csv_data = list(csv_data)\n    def as_json(self):\n        fixtures = convert_to_fixtures(self.csv_data)\n        return json.dumps(fixtures, indent=2)",
        "detail": "cla_backend.apps.legalaid.management.commands._media_codes",
        "documentation": {}
    },
    {
        "label": "convert_to_fixtures",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.management.commands._media_codes",
        "description": "cla_backend.apps.legalaid.management.commands._media_codes",
        "peekOfCode": "def convert_to_fixtures(rows):\n    rows = prepare_data(iter(rows))\n    return list(fixture(rows))\ndef prepare_data(rows):\n    rows = discard_preamble(rows)\n    rows = strip_trailing_columns(rows)\n    rows = strip_whitespace(rows)\n    rows = skip_empty(rows)\n    return rows\ndef strip_trailing_columns(rows):",
        "detail": "cla_backend.apps.legalaid.management.commands._media_codes",
        "documentation": {}
    },
    {
        "label": "prepare_data",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.management.commands._media_codes",
        "description": "cla_backend.apps.legalaid.management.commands._media_codes",
        "peekOfCode": "def prepare_data(rows):\n    rows = discard_preamble(rows)\n    rows = strip_trailing_columns(rows)\n    rows = strip_whitespace(rows)\n    rows = skip_empty(rows)\n    return rows\ndef strip_trailing_columns(rows):\n    for row in rows:\n        yield row[:3]\ndef strip_whitespace(rows):",
        "detail": "cla_backend.apps.legalaid.management.commands._media_codes",
        "documentation": {}
    },
    {
        "label": "strip_trailing_columns",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.management.commands._media_codes",
        "description": "cla_backend.apps.legalaid.management.commands._media_codes",
        "peekOfCode": "def strip_trailing_columns(rows):\n    for row in rows:\n        yield row[:3]\ndef strip_whitespace(rows):\n    for row in rows:\n        group, name, code = row\n        yield (group.strip(), name.strip(), code.strip())\ndef discard_preamble(rows):\n    \"\"\"\n    Discard the first few rows of the CSV data, which provide some explanatory",
        "detail": "cla_backend.apps.legalaid.management.commands._media_codes",
        "documentation": {}
    },
    {
        "label": "strip_whitespace",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.management.commands._media_codes",
        "description": "cla_backend.apps.legalaid.management.commands._media_codes",
        "peekOfCode": "def strip_whitespace(rows):\n    for row in rows:\n        group, name, code = row\n        yield (group.strip(), name.strip(), code.strip())\ndef discard_preamble(rows):\n    \"\"\"\n    Discard the first few rows of the CSV data, which provide some explanatory\n    text and the column headers.\n    \"\"\"\n    for i in range(6):",
        "detail": "cla_backend.apps.legalaid.management.commands._media_codes",
        "documentation": {}
    },
    {
        "label": "discard_preamble",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.management.commands._media_codes",
        "description": "cla_backend.apps.legalaid.management.commands._media_codes",
        "peekOfCode": "def discard_preamble(rows):\n    \"\"\"\n    Discard the first few rows of the CSV data, which provide some explanatory\n    text and the column headers.\n    \"\"\"\n    for i in range(6):\n        next(rows)\n    return rows\ndef skip_empty(rows):\n    for row in rows:",
        "detail": "cla_backend.apps.legalaid.management.commands._media_codes",
        "documentation": {}
    },
    {
        "label": "skip_empty",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.management.commands._media_codes",
        "description": "cla_backend.apps.legalaid.management.commands._media_codes",
        "peekOfCode": "def skip_empty(rows):\n    for row in rows:\n        _, name, code = row\n        if name and code:\n            yield row\ndef fixture(rows):\n    \"\"\"\n    Generate the fixture data structure for each row, extracting group\n    fixtures as we go\n    \"\"\"",
        "detail": "cla_backend.apps.legalaid.management.commands._media_codes",
        "documentation": {}
    },
    {
        "label": "fixture",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.management.commands._media_codes",
        "description": "cla_backend.apps.legalaid.management.commands._media_codes",
        "peekOfCode": "def fixture(rows):\n    \"\"\"\n    Generate the fixture data structure for each row, extracting group\n    fixtures as we go\n    \"\"\"\n    group_index = 0\n    for index, row in enumerate(rows, start=1):\n        group, name, code = row\n        if group:\n            group_index += 1",
        "detail": "cla_backend.apps.legalaid.management.commands._media_codes",
        "documentation": {}
    },
    {
        "label": "group_fixture",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.management.commands._media_codes",
        "description": "cla_backend.apps.legalaid.management.commands._media_codes",
        "peekOfCode": "def group_fixture(index, name):\n    return {\"model\": \"legalaid.MediaCodeGroup\", \"pk\": index, \"fields\": {\"name\": name}}\ndef code_fixture(index, row):\n    group, name, code = row\n    return {\"model\": \"legalaid.MediaCode\", \"pk\": index, \"fields\": {\"group\": group, \"name\": name, \"code\": code}}\nclass MediaCodeList(object):\n    def __init__(self, csv_data):\n        self.csv_data = list(csv_data)\n    def as_json(self):\n        fixtures = convert_to_fixtures(self.csv_data)",
        "detail": "cla_backend.apps.legalaid.management.commands._media_codes",
        "documentation": {}
    },
    {
        "label": "code_fixture",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.management.commands._media_codes",
        "description": "cla_backend.apps.legalaid.management.commands._media_codes",
        "peekOfCode": "def code_fixture(index, row):\n    group, name, code = row\n    return {\"model\": \"legalaid.MediaCode\", \"pk\": index, \"fields\": {\"group\": group, \"name\": name, \"code\": code}}\nclass MediaCodeList(object):\n    def __init__(self, csv_data):\n        self.csv_data = list(csv_data)\n    def as_json(self):\n        fixtures = convert_to_fixtures(self.csv_data)\n        return json.dumps(fixtures, indent=2)",
        "detail": "cla_backend.apps.legalaid.management.commands._media_codes",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.management.commands.assign_existing_cases_to_organisation",
        "description": "cla_backend.apps.legalaid.management.commands.assign_existing_cases_to_organisation",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Assign existing cases to organisation based on the organisation of the user that created the case\"\n    def handle(self, *args, **options):\n        default_organisation = Organisation.objects.get(name=\"Agilisys\")\n        organisations = Organisation.objects.values_list(\"id\", flat=True)\n        cases_qs = Case.objects.filter(organisation__isnull=True).select_related(\n            \"created_by\", \"created_by__operator__organisation\"\n        )\n        count = cases_qs.count()\n        self.stdout.write(\"{count} cases found.\".format(count=count))",
        "detail": "cla_backend.apps.legalaid.management.commands.assign_existing_cases_to_organisation",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.management.commands.load_contactforresearchmethods",
        "description": "cla_backend.apps.legalaid.management.commands.load_contactforresearchmethods",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Creates the contact for research methods default entities AND migrates data from contact_for_research_via field\"\n    def handle(self, *args, **options):\n        for (value, label) in RESEARCH_CONTACT_VIA:\n            (method, created) = ContactResearchMethod.objects.get_or_create(\n                method=value, defaults={\"reference\": uuid.uuid4()}\n            )\n            details_qs = PersonalDetails.objects.filter(\n                contact_for_research_via=value, contact_for_research_methods__isnull=True\n            )",
        "detail": "cla_backend.apps.legalaid.management.commands.load_contactforresearchmethods",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.management.commands.load_media_codes",
        "description": "cla_backend.apps.legalaid.management.commands.load_media_codes",
        "peekOfCode": "class Command(BaseCommand):\n    args = \"CSV_FILE.csv\"\n    help = \"Converts a CSV spreadsheet of media codes into a fixture ready \" \"to be loaddata'd into the database\"\n    def handle(self, *args, **kwargs):\n        path = args[0] if args else None\n        if not path:\n            self.die(\"Path to the media codes CSV file is required\", 1)\n        if not readable(path):\n            self.die(\"File {0} could not be read\".format(path), 2)\n        with csv_data(path) as rows:",
        "detail": "cla_backend.apps.legalaid.management.commands.load_media_codes",
        "documentation": {}
    },
    {
        "label": "csv_data",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.management.commands.load_media_codes",
        "description": "cla_backend.apps.legalaid.management.commands.load_media_codes",
        "peekOfCode": "def csv_data(path):\n    with contextlib.closing(open(path, \"rU\")) as csv_file:\n        yield csv.reader(csv_file)\ndef fixture_filehandle():\n    return contextlib.closing(open(FIXTURE_PATH, \"w\"))\ndef readable(path):\n    return os.access(path, os.R_OK)\nclass Command(BaseCommand):\n    args = \"CSV_FILE.csv\"\n    help = \"Converts a CSV spreadsheet of media codes into a fixture ready \" \"to be loaddata'd into the database\"",
        "detail": "cla_backend.apps.legalaid.management.commands.load_media_codes",
        "documentation": {}
    },
    {
        "label": "fixture_filehandle",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.management.commands.load_media_codes",
        "description": "cla_backend.apps.legalaid.management.commands.load_media_codes",
        "peekOfCode": "def fixture_filehandle():\n    return contextlib.closing(open(FIXTURE_PATH, \"w\"))\ndef readable(path):\n    return os.access(path, os.R_OK)\nclass Command(BaseCommand):\n    args = \"CSV_FILE.csv\"\n    help = \"Converts a CSV spreadsheet of media codes into a fixture ready \" \"to be loaddata'd into the database\"\n    def handle(self, *args, **kwargs):\n        path = args[0] if args else None\n        if not path:",
        "detail": "cla_backend.apps.legalaid.management.commands.load_media_codes",
        "documentation": {}
    },
    {
        "label": "readable",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.management.commands.load_media_codes",
        "description": "cla_backend.apps.legalaid.management.commands.load_media_codes",
        "peekOfCode": "def readable(path):\n    return os.access(path, os.R_OK)\nclass Command(BaseCommand):\n    args = \"CSV_FILE.csv\"\n    help = \"Converts a CSV spreadsheet of media codes into a fixture ready \" \"to be loaddata'd into the database\"\n    def handle(self, *args, **kwargs):\n        path = args[0] if args else None\n        if not path:\n            self.die(\"Path to the media codes CSV file is required\", 1)\n        if not readable(path):",
        "detail": "cla_backend.apps.legalaid.management.commands.load_media_codes",
        "documentation": {}
    },
    {
        "label": "FIXTURE_PATH",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.management.commands.load_media_codes",
        "description": "cla_backend.apps.legalaid.management.commands.load_media_codes",
        "peekOfCode": "FIXTURE_PATH = \"cla_backend/apps/legalaid/fixtures/media_codes.json\"\n@contextlib.contextmanager\ndef csv_data(path):\n    with contextlib.closing(open(path, \"rU\")) as csv_file:\n        yield csv.reader(csv_file)\ndef fixture_filehandle():\n    return contextlib.closing(open(FIXTURE_PATH, \"w\"))\ndef readable(path):\n    return os.access(path, os.R_OK)\nclass Command(BaseCommand):",
        "detail": "cla_backend.apps.legalaid.management.commands.load_media_codes",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.management.commands.obfuscate",
        "description": "cla_backend.apps.legalaid.management.commands.obfuscate",
        "peekOfCode": "class Command(NoArgsCommand):\n    help = \"Obfuscate all sensitive data in the database\"\n    def handle_noargs(self, *args, **kwargs):\n        if settings.CLA_ENV != \"prod\":\n            with connection.cursor() as cursor:\n                for model, field_names in OBFUSCATED_FIELDS.items():\n                    for field_name, value in field_names.items():\n                        self._obfuscate_field(cursor, model, field_name, value)\n    def _obfuscate_field(self, cursor, model, field_name, value):\n        if field_name == \"diversity\":",
        "detail": "cla_backend.apps.legalaid.management.commands.obfuscate",
        "documentation": {}
    },
    {
        "label": "OBFUSCATED_FIELDS",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.management.commands.obfuscate",
        "description": "cla_backend.apps.legalaid.management.commands.obfuscate",
        "peekOfCode": "OBFUSCATED_FIELDS = {\n    PersonalDetails: {\n        \"full_name\": \"Fullname Obfuscated\",\n        \"postcode\": \"SW1H 9AJ\",\n        \"street\": \"102 Petty France\",\n        \"mobile_phone\": \"55555555555\",\n        \"home_phone\": \"55555555555\",\n        \"email\": \"cla-test@digital.justice.gov.uk\",\n        \"date_of_birth\": \"1963-03-16\",\n        \"ni_number\": \"SD-156-266\",",
        "detail": "cla_backend.apps.legalaid.management.commands.obfuscate",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.management.commands.recalculate_assigned_out_of_hours",
        "description": "cla_backend.apps.legalaid.management.commands.recalculate_assigned_out_of_hours",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Recalculate case.assigned_out_of_hours since a given date\"\n    def __init__(self, *args, **kwargs):\n        self.unchanged = []\n        self.change_to_true = []\n        self.change_to_false = []\n        super(Command, self).__init__(*args, **kwargs)\n    def add_arguments(self, parser):\n        parser.add_argument(\"date_string\", nargs=\"?\", default=SUPPRESS)\n        parser.add_argument(\"commit\", nargs=\"?\", default=SUPPRESS)",
        "detail": "cla_backend.apps.legalaid.management.commands.recalculate_assigned_out_of_hours",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0001_initial",
        "description": "cla_backend.apps.legalaid.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"knowledgebase\", \"0001_initial\"),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        (\"diagnosis\", \"0001_initial\"),\n        (\"cla_provider\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"AdaptationDetails\",",
        "detail": "cla_backend.apps.legalaid.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0002_auto_20150417_1122",
        "description": "cla_backend.apps.legalaid.migrations.0002_auto_20150417_1122",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0001_initial\")]\n    operations = [\n        migrations.AlterModelOptions(\n            name=\"case\",\n            options={\n                \"ordering\": (\"-created\",),\n                \"permissions\": ((\"run_reports\", \"Can run reports\"), (\"run_obiee_reports\", \"Can run obiee reports\")),\n            },\n        )",
        "detail": "cla_backend.apps.legalaid.migrations.0002_auto_20150417_1122",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0003_eod_details",
        "description": "cla_backend.apps.legalaid.migrations.0003_eod_details",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0002_auto_20150417_1122\")]\n    operations = [\n        migrations.CreateModel(\n            name=\"EODDetails\",\n            fields=[\n                (\"id\", models.AutoField(verbose_name=\"ID\", serialize=False, auto_created=True, primary_key=True)),\n                (\n                    \"created\",\n                    model_utils.fields.AutoCreatedField(",
        "detail": "cla_backend.apps.legalaid.migrations.0003_eod_details",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0004_auto_20150803_1443",
        "description": "cla_backend.apps.legalaid.migrations.0004_auto_20150803_1443",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0003_eod_details\")]\n    operations = [\n        migrations.AlterField(\n            model_name=\"property\",\n            name=\"eligibility_check\",\n            field=models.ForeignKey(related_query_name=b\"property_set\", to=\"legalaid.EligibilityCheck\"),\n            preserve_default=True,\n        )\n    ]",
        "detail": "cla_backend.apps.legalaid.migrations.0004_auto_20150803_1443",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0005_auto_20150814_1136",
        "description": "cla_backend.apps.legalaid.migrations.0005_auto_20150814_1136",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0004_auto_20150803_1443\")]\n    operations = [\n        migrations.AlterField(\n            model_name=\"case\",\n            name=\"eod_details\",\n            field=models.OneToOneField(null=True, blank=True, to=\"legalaid.EODDetails\"),\n            preserve_default=True,\n        )\n    ]",
        "detail": "cla_backend.apps.legalaid.migrations.0005_auto_20150814_1136",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0006_case_old_eod_details",
        "description": "cla_backend.apps.legalaid.migrations.0006_case_old_eod_details",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0005_auto_20150814_1136\")]\n    operations = [\n        migrations.AddField(\n            model_name=\"case\",\n            name=\"old_eod_details\",\n            field=models.OneToOneField(\n                related_query_name=b\"old_case\",\n                related_name=\"old_case\",\n                null=True,",
        "detail": "cla_backend.apps.legalaid.migrations.0006_case_old_eod_details",
        "documentation": {}
    },
    {
        "label": "duplicate_relation",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.migrations.0006_case_old_eod_details",
        "description": "cla_backend.apps.legalaid.migrations.0006_case_old_eod_details",
        "peekOfCode": "def duplicate_relation(apps, schema_editor):\n    Case = apps.get_model(\"legalaid\", \"Case\")\n    for case in Case.objects.all():\n        if case.eod_details:\n            case.old_eod_details = case.eod_details\n            case.save()\nclass Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0005_auto_20150814_1136\")]\n    operations = [\n        migrations.AddField(",
        "detail": "cla_backend.apps.legalaid.migrations.0006_case_old_eod_details",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0007_auto_20150818_1509",
        "description": "cla_backend.apps.legalaid.migrations.0007_auto_20150818_1509",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0006_case_old_eod_details\")]\n    operations = [\n        migrations.RemoveField(model_name=\"case\", name=\"eod_details\"),\n        migrations.AddField(\n            model_name=\"eoddetails\",\n            name=\"case\",\n            field=models.OneToOneField(\n                related_query_name=b\"eod_details\", related_name=\"eod_details\", null=True, to=\"legalaid.Case\"\n            ),",
        "detail": "cla_backend.apps.legalaid.migrations.0007_auto_20150818_1509",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0008_eod_data_migration",
        "description": "cla_backend.apps.legalaid.migrations.0008_eod_data_migration",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0007_auto_20150818_1509\")]\n    operations = [migrations.RunPython(copy_relation)]",
        "detail": "cla_backend.apps.legalaid.migrations.0008_eod_data_migration",
        "documentation": {}
    },
    {
        "label": "copy_relation",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.migrations.0008_eod_data_migration",
        "description": "cla_backend.apps.legalaid.migrations.0008_eod_data_migration",
        "peekOfCode": "def copy_relation(apps, schema_editor):\n    Case = apps.get_model(\"legalaid\", \"Case\")\n    EODDetails = apps.get_model(\"legalaid\", \"EODDetails\")\n    for eod in EODDetails.objects.all():\n        try:\n            eod.case = eod.old_case\n            eod.save()\n        except Case.DoesNotExist:\n            print(\"EOD details %s are abandoned, deleting\" % eod.reference)\n            eod.delete()",
        "detail": "cla_backend.apps.legalaid.migrations.0008_eod_data_migration",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0009_remove_case_old_eod_details",
        "description": "cla_backend.apps.legalaid.migrations.0009_remove_case_old_eod_details",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0008_eod_data_migration\")]\n    operations = [\n        migrations.RemoveField(model_name=\"case\", name=\"old_eod_details\"),\n        migrations.AlterField(\n            model_name=\"eoddetails\",\n            name=\"case\",\n            field=models.OneToOneField(related_name=\"eod_details\", to=\"legalaid.Case\"),\n            preserve_default=True,\n        ),",
        "detail": "cla_backend.apps.legalaid.migrations.0009_remove_case_old_eod_details",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0010_complaints_mi_permissions",
        "description": "cla_backend.apps.legalaid.migrations.0010_complaints_mi_permissions",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0009_remove_case_old_eod_details\")]\n    operations = [\n        migrations.AlterModelOptions(\n            name=\"case\",\n            options={\n                \"ordering\": (\"-created\",),\n                \"permissions\": (\n                    (\"run_reports\", \"Can run reports\"),\n                    (\"run_obiee_reports\", \"Can run OBIEE reports\"),",
        "detail": "cla_backend.apps.legalaid.migrations.0010_complaints_mi_permissions",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0011_case_assigned_out_of_hours",
        "description": "cla_backend.apps.legalaid.migrations.0011_case_assigned_out_of_hours",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0010_complaints_mi_permissions\")]\n    operations = [\n        migrations.AddField(\n            model_name=\"case\", name=\"assigned_out_of_hours\", field=models.NullBooleanField(), preserve_default=True\n        ),\n        migrations.RunPython(add_assigned_at, reverse_assigned),\n        migrations.RunPython(reset_provider_allocation_modified, reverse_reset),\n    ]",
        "detail": "cla_backend.apps.legalaid.migrations.0011_case_assigned_out_of_hours",
        "documentation": {}
    },
    {
        "label": "add_assigned_at",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.migrations.0011_case_assigned_out_of_hours",
        "description": "cla_backend.apps.legalaid.migrations.0011_case_assigned_out_of_hours",
        "peekOfCode": "def add_assigned_at(apps, schema_editor):\n    Case = apps.get_model(\"legalaid\", \"Case\")\n    for case in Case.objects.all():\n        if case.provider_assigned_at:\n            case.assigned_out_of_hours = case.provider_assigned_at not in settings.NON_ROTA_OPENING_HOURS\n            case.save()\ndef reverse_assigned(*args, **kwargs):\n    pass\ndef reset_provider_allocation_modified(apps, schema_editor):\n    ProviderAllocation = apps.get_model(\"cla_provider\", \"ProviderAllocation\")",
        "detail": "cla_backend.apps.legalaid.migrations.0011_case_assigned_out_of_hours",
        "documentation": {}
    },
    {
        "label": "reverse_assigned",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.migrations.0011_case_assigned_out_of_hours",
        "description": "cla_backend.apps.legalaid.migrations.0011_case_assigned_out_of_hours",
        "peekOfCode": "def reverse_assigned(*args, **kwargs):\n    pass\ndef reset_provider_allocation_modified(apps, schema_editor):\n    ProviderAllocation = apps.get_model(\"cla_provider\", \"ProviderAllocation\")\n    for pa in ProviderAllocation.objects.all():\n        pa.modified = datetime.datetime.now()\n        pa.save()\ndef reverse_reset(*args, **kwargs):\n    pass\nclass Migration(migrations.Migration):",
        "detail": "cla_backend.apps.legalaid.migrations.0011_case_assigned_out_of_hours",
        "documentation": {}
    },
    {
        "label": "reset_provider_allocation_modified",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.migrations.0011_case_assigned_out_of_hours",
        "description": "cla_backend.apps.legalaid.migrations.0011_case_assigned_out_of_hours",
        "peekOfCode": "def reset_provider_allocation_modified(apps, schema_editor):\n    ProviderAllocation = apps.get_model(\"cla_provider\", \"ProviderAllocation\")\n    for pa in ProviderAllocation.objects.all():\n        pa.modified = datetime.datetime.now()\n        pa.save()\ndef reverse_reset(*args, **kwargs):\n    pass\nclass Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0010_complaints_mi_permissions\")]\n    operations = [",
        "detail": "cla_backend.apps.legalaid.migrations.0011_case_assigned_out_of_hours",
        "documentation": {}
    },
    {
        "label": "reverse_reset",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.migrations.0011_case_assigned_out_of_hours",
        "description": "cla_backend.apps.legalaid.migrations.0011_case_assigned_out_of_hours",
        "peekOfCode": "def reverse_reset(*args, **kwargs):\n    pass\nclass Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0010_complaints_mi_permissions\")]\n    operations = [\n        migrations.AddField(\n            model_name=\"case\", name=\"assigned_out_of_hours\", field=models.NullBooleanField(), preserve_default=True\n        ),\n        migrations.RunPython(add_assigned_at, reverse_assigned),\n        migrations.RunPython(reset_provider_allocation_modified, reverse_reset),",
        "detail": "cla_backend.apps.legalaid.migrations.0011_case_assigned_out_of_hours",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0012_auto_20151209_1500",
        "description": "cla_backend.apps.legalaid.migrations.0012_auto_20151209_1500",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0011_case_assigned_out_of_hours\")]\n    operations = [\n        migrations.AlterField(\n            model_name=\"case\",\n            name=\"assigned_out_of_hours\",\n            field=models.NullBooleanField(default=False),\n            preserve_default=True,\n        )\n    ]",
        "detail": "cla_backend.apps.legalaid.migrations.0012_auto_20151209_1500",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0013_auto_20160414_1429",
        "description": "cla_backend.apps.legalaid.migrations.0013_auto_20160414_1429",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0012_auto_20151209_1500\")]\n    operations = [\n        migrations.AlterField(\n            model_name=\"eoddetailscategory\",\n            name=\"category\",\n            field=models.CharField(\n                blank=True,\n                max_length=30,\n                null=True,",
        "detail": "cla_backend.apps.legalaid.migrations.0013_auto_20160414_1429",
        "documentation": {}
    },
    {
        "label": "update_eod_categories",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.migrations.0013_auto_20160414_1429",
        "description": "cla_backend.apps.legalaid.migrations.0013_auto_20160414_1429",
        "peekOfCode": "def update_eod_categories(apps, schema_editor):\n    EODDetailsCategory = apps.get_model(\"legalaid\", \"EODDetailsCategory\")\n    for eod in EODDetailsCategory.objects.filter(category=\"scope_or_means\"):\n        eod.category = \"scope\"\n        eod.save()\n        means_eod = EODDetailsCategory()\n        means_eod.category = \"means\"\n        means_eod.eod_details = eod.eod_details\n        means_eod.is_major = eod.is_major\n        means_eod.save()",
        "detail": "cla_backend.apps.legalaid.migrations.0013_auto_20160414_1429",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0014_personaldetails_contact_for_research_via",
        "description": "cla_backend.apps.legalaid.migrations.0014_personaldetails_contact_for_research_via",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0013_auto_20160414_1429\")]\n    operations = [\n        migrations.AddField(\n            model_name=\"personaldetails\",\n            name=\"contact_for_research_via\",\n            field=models.CharField(\n                default=b\"PHONE\",\n                max_length=10,\n                null=True,",
        "detail": "cla_backend.apps.legalaid.migrations.0014_personaldetails_contact_for_research_via",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0015_adaptationdetails_no_adaptations_required",
        "description": "cla_backend.apps.legalaid.migrations.0015_adaptationdetails_no_adaptations_required",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0014_personaldetails_contact_for_research_via\")]\n    operations = [\n        migrations.AddField(\n            model_name=\"adaptationdetails\",\n            name=\"no_adaptations_required\",\n            field=models.NullBooleanField(),\n            preserve_default=True,\n        )\n    ]",
        "detail": "cla_backend.apps.legalaid.migrations.0015_adaptationdetails_no_adaptations_required",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0016_auto_20170223_1150",
        "description": "cla_backend.apps.legalaid.migrations.0016_auto_20170223_1150",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0015_adaptationdetails_no_adaptations_required\")]\n    operations = [migrations.RunPython(update_pd_search_field)]",
        "detail": "cla_backend.apps.legalaid.migrations.0016_auto_20170223_1150",
        "documentation": {}
    },
    {
        "label": "update_pd_search_field",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.migrations.0016_auto_20170223_1150",
        "description": "cla_backend.apps.legalaid.migrations.0016_auto_20170223_1150",
        "peekOfCode": "def update_pd_search_field(apps, schema_editor):\n    PersonalDetails = apps.get_model(\"legalaid\", \"PersonalDetails\")\n    for pd in PersonalDetails.objects.all().iterator():\n        pd.save()\nclass Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0015_adaptationdetails_no_adaptations_required\")]\n    operations = [migrations.RunPython(update_pd_search_field)]",
        "detail": "cla_backend.apps.legalaid.migrations.0016_auto_20170223_1150",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0017_case_is_urgent",
        "description": "cla_backend.apps.legalaid.migrations.0017_case_is_urgent",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0016_auto_20170223_1150\")]\n    operations = [\n        migrations.AddField(\n            model_name=\"case\", name=\"is_urgent\", field=models.BooleanField(default=False), preserve_default=True\n        )\n    ]",
        "detail": "cla_backend.apps.legalaid.migrations.0017_case_is_urgent",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0018_auto_20180425_1558",
        "description": "cla_backend.apps.legalaid.migrations.0018_auto_20180425_1558",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0017_case_is_urgent\")]\n    operations = [migrations.RunPython(add_trigram_indexes, remove_trigram_indexes)]",
        "detail": "cla_backend.apps.legalaid.migrations.0018_auto_20180425_1558",
        "documentation": {}
    },
    {
        "label": "add_trigram_indexes",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.migrations.0018_auto_20180425_1558",
        "description": "cla_backend.apps.legalaid.migrations.0018_auto_20180425_1558",
        "peekOfCode": "def add_trigram_indexes(apps, schema_editor):\n    with connection.cursor() as cursor:\n        cursor.execute(\"CREATE EXTENSION pg_trgm;\")\n        cursor.execute(\n            \"CREATE INDEX case_reference_trgm_idx ON \" \"legalaid_case USING gist (UPPER(reference) gist_trgm_ops);\"\n        )\n        cursor.execute(\n            \"CREATE INDEX case_search_field_trgm_idx ON \"\n            \"legalaid_case USING gist (UPPER(search_field) gist_trgm_ops);\"\n        )",
        "detail": "cla_backend.apps.legalaid.migrations.0018_auto_20180425_1558",
        "documentation": {}
    },
    {
        "label": "remove_trigram_indexes",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.migrations.0018_auto_20180425_1558",
        "description": "cla_backend.apps.legalaid.migrations.0018_auto_20180425_1558",
        "peekOfCode": "def remove_trigram_indexes(apps, schema_editor):\n    with connection.cursor() as cursor:\n        cursor.execute(\"DROP INDEX case_reference_trgm_idx;\")\n        cursor.execute(\"DROP INDEX case_search_field_trgm_idx;\")\n        cursor.execute(\"DROP INDEX case_laa_reference_trgm_idx;\")\n        cursor.execute(\"DROP INDEX personaldetails_full_name_trgm_idx;\")\n        cursor.execute(\"DROP INDEX personaldetails_street_trgm_idx;\")\n        cursor.execute(\"DROP INDEX personaldetails_postcode_trgm_idx;\")\n        cursor.execute(\"DROP INDEX personaldetails_search_field_trgm_idx;\")\n        cursor.execute(\"DROP EXTENSION pg_trgm;\")",
        "detail": "cla_backend.apps.legalaid.migrations.0018_auto_20180425_1558",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0019_null_to_empty_string",
        "description": "cla_backend.apps.legalaid.migrations.0019_null_to_empty_string",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0018_auto_20180425_1558\")]\n    operations = [\n        migrations.RunPython(convert_null_outcome_code_to_empty_string, noop),\n        migrations.AlterField(\n            model_name=\"case\",\n            name=\"outcome_code\",\n            field=models.CharField(max_length=50, blank=True),\n            preserve_default=True,\n        ),",
        "detail": "cla_backend.apps.legalaid.migrations.0019_null_to_empty_string",
        "documentation": {}
    },
    {
        "label": "convert_null_outcome_code_to_empty_string",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.migrations.0019_null_to_empty_string",
        "description": "cla_backend.apps.legalaid.migrations.0019_null_to_empty_string",
        "peekOfCode": "def convert_null_outcome_code_to_empty_string(apps, schema_editor):\n    Case = apps.get_model(\"legalaid\", \"Case\")\n    Case.objects.filter(outcome_code__isnull=True).update(outcome_code=\"\")\ndef noop(apps, schema_editor):\n    pass\nclass Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0018_auto_20180425_1558\")]\n    operations = [\n        migrations.RunPython(convert_null_outcome_code_to_empty_string, noop),\n        migrations.AlterField(",
        "detail": "cla_backend.apps.legalaid.migrations.0019_null_to_empty_string",
        "documentation": {}
    },
    {
        "label": "noop",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.migrations.0019_null_to_empty_string",
        "description": "cla_backend.apps.legalaid.migrations.0019_null_to_empty_string",
        "peekOfCode": "def noop(apps, schema_editor):\n    pass\nclass Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0018_auto_20180425_1558\")]\n    operations = [\n        migrations.RunPython(convert_null_outcome_code_to_empty_string, noop),\n        migrations.AlterField(\n            model_name=\"case\",\n            name=\"outcome_code\",\n            field=models.CharField(max_length=50, blank=True),",
        "detail": "cla_backend.apps.legalaid.migrations.0019_null_to_empty_string",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0020_fill_missing_outcome_codes",
        "description": "cla_backend.apps.legalaid.migrations.0020_fill_missing_outcome_codes",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0019_null_to_empty_string\"), (\"cla_eventlog\", \"0004_auto_20151210_1231\")]\n    operations = [migrations.RunPython(re_denormalize_outcome_codes_to_cases, noop)]",
        "detail": "cla_backend.apps.legalaid.migrations.0020_fill_missing_outcome_codes",
        "documentation": {}
    },
    {
        "label": "re_denormalize_outcome_codes_to_cases",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.migrations.0020_fill_missing_outcome_codes",
        "description": "cla_backend.apps.legalaid.migrations.0020_fill_missing_outcome_codes",
        "peekOfCode": "def re_denormalize_outcome_codes_to_cases(apps, schema_editor):\n    from cla_eventlog.constants import LOG_LEVELS, LOG_TYPES\n    Log = apps.get_model(\"cla_eventlog\", \"Log\")\n    outcome_kwargs = {\"level\": LOG_LEVELS.HIGH, \"type\": LOG_TYPES.OUTCOME}\n    outcomes_that_should_be_denormed = Log.objects.filter(**outcome_kwargs).order_by(\"created\")  # Oldest to newest\n    outcomes_missing_denormed_code = outcomes_that_should_be_denormed.filter(case__outcome_code=\"\")\n    logger.info(\n        \"\\nLGA-275 data migration: {} outcomes_missing_denormed_code\".format(outcomes_missing_denormed_code.count())\n    )\n    for outcome in outcomes_missing_denormed_code:",
        "detail": "cla_backend.apps.legalaid.migrations.0020_fill_missing_outcome_codes",
        "documentation": {}
    },
    {
        "label": "noop",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.migrations.0020_fill_missing_outcome_codes",
        "description": "cla_backend.apps.legalaid.migrations.0020_fill_missing_outcome_codes",
        "peekOfCode": "def noop(apps, schema_editor):\n    pass\nclass Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0019_null_to_empty_string\"), (\"cla_eventlog\", \"0004_auto_20151210_1231\")]\n    operations = [migrations.RunPython(re_denormalize_outcome_codes_to_cases, noop)]",
        "detail": "cla_backend.apps.legalaid.migrations.0020_fill_missing_outcome_codes",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.migrations.0020_fill_missing_outcome_codes",
        "description": "cla_backend.apps.legalaid.migrations.0020_fill_missing_outcome_codes",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef re_denormalize_outcome_codes_to_cases(apps, schema_editor):\n    from cla_eventlog.constants import LOG_LEVELS, LOG_TYPES\n    Log = apps.get_model(\"cla_eventlog\", \"Log\")\n    outcome_kwargs = {\"level\": LOG_LEVELS.HIGH, \"type\": LOG_TYPES.OUTCOME}\n    outcomes_that_should_be_denormed = Log.objects.filter(**outcome_kwargs).order_by(\"created\")  # Oldest to newest\n    outcomes_missing_denormed_code = outcomes_that_should_be_denormed.filter(case__outcome_code=\"\")\n    logger.info(\n        \"\\nLGA-275 data migration: {} outcomes_missing_denormed_code\".format(outcomes_missing_denormed_code.count())\n    )",
        "detail": "cla_backend.apps.legalaid.migrations.0020_fill_missing_outcome_codes",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0021_auto_20190515_1042",
        "description": "cla_backend.apps.legalaid.migrations.0021_auto_20190515_1042",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0020_fill_missing_outcome_codes\")]\n    operations = [\n        migrations.CreateModel(\n            name=\"ContactResearchMethod\",\n            fields=[\n                (\"id\", models.AutoField(verbose_name=\"ID\", serialize=False, auto_created=True, primary_key=True)),\n                (\n                    \"created\",\n                    model_utils.fields.AutoCreatedField(",
        "detail": "cla_backend.apps.legalaid.migrations.0021_auto_20190515_1042",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0022_case_organisation",
        "description": "cla_backend.apps.legalaid.migrations.0022_case_organisation",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"call_centre\", \"0003_auto_20190729_1416\"), (\"legalaid\", \"0021_auto_20190515_1042\")]\n    operations = [\n        migrations.AddField(\n            model_name=\"case\",\n            name=\"organisation\",\n            field=models.ForeignKey(blank=True, to=\"call_centre.Organisation\", null=True),\n            preserve_default=True,\n        )\n    ]",
        "detail": "cla_backend.apps.legalaid.migrations.0022_case_organisation",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0023_case_callback_window_type",
        "description": "cla_backend.apps.legalaid.migrations.0023_case_callback_window_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0022_case_organisation\")]\n    operations = [\n        migrations.AddField(\n            model_name=\"case\",\n            name=\"callback_window_type\",\n            field=models.CharField(\n                default=b\"HALF_HOUR_EITHER_SIDE\",\n                max_length=50,\n                editable=False,",
        "detail": "cla_backend.apps.legalaid.migrations.0023_case_callback_window_type",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0024_default_to_half_hour_window",
        "description": "cla_backend.apps.legalaid.migrations.0024_default_to_half_hour_window",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0023_case_callback_window_type\")]\n    operations = [\n        migrations.AlterField(\n            model_name=\"case\",\n            name=\"callback_window_type\",\n            field=models.CharField(\n                default=b\"HALF_HOUR_WINDOW\",\n                max_length=50,\n                editable=False,",
        "detail": "cla_backend.apps.legalaid.migrations.0024_default_to_half_hour_window",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0025_case_audit_log",
        "description": "cla_backend.apps.legalaid.migrations.0025_case_audit_log",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"cla_auditlog\", \"0001_initial\"), (\"legalaid\", \"0024_default_to_half_hour_window\")]\n    operations = [\n        migrations.AddField(\n            model_name=\"case\",\n            name=\"audit_log\",\n            field=models.ManyToManyField(to=\"cla_auditlog.AuditLog\", blank=True),\n            preserve_default=True,\n        )\n    ]",
        "detail": "cla_backend.apps.legalaid.migrations.0025_case_audit_log",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0026_safe_to_contact_remove_no_message",
        "description": "cla_backend.apps.legalaid.migrations.0026_safe_to_contact_remove_no_message",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0025_case_audit_log\")]\n    operations = [\n        migrations.RunPython(migrate_no_message_to_safe_to_contact, noop),\n        migrations.AlterField(\n            model_name=\"personaldetails\",\n            name=\"safe_to_contact\",\n            field=models.CharField(\n                default=b\"SAFE\",\n                max_length=30,",
        "detail": "cla_backend.apps.legalaid.migrations.0026_safe_to_contact_remove_no_message",
        "documentation": {}
    },
    {
        "label": "migrate_no_message_to_safe_to_contact",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.migrations.0026_safe_to_contact_remove_no_message",
        "description": "cla_backend.apps.legalaid.migrations.0026_safe_to_contact_remove_no_message",
        "peekOfCode": "def migrate_no_message_to_safe_to_contact(apps, schema_editor):\n    PersonalDetails = apps.get_model(\"legalaid\", \"PersonalDetails\")\n    PersonalDetails.objects.filter(safe_to_contact=\"NO_MESSAGE\").update(safe_to_contact=CONTACT_SAFETY.SAFE)\ndef noop(apps, schema_editor):\n    pass\nclass Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0025_case_audit_log\")]\n    operations = [\n        migrations.RunPython(migrate_no_message_to_safe_to_contact, noop),\n        migrations.AlterField(",
        "detail": "cla_backend.apps.legalaid.migrations.0026_safe_to_contact_remove_no_message",
        "documentation": {}
    },
    {
        "label": "noop",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.migrations.0026_safe_to_contact_remove_no_message",
        "description": "cla_backend.apps.legalaid.migrations.0026_safe_to_contact_remove_no_message",
        "peekOfCode": "def noop(apps, schema_editor):\n    pass\nclass Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0025_case_audit_log\")]\n    operations = [\n        migrations.RunPython(migrate_no_message_to_safe_to_contact, noop),\n        migrations.AlterField(\n            model_name=\"personaldetails\",\n            name=\"safe_to_contact\",\n            field=models.CharField(",
        "detail": "cla_backend.apps.legalaid.migrations.0026_safe_to_contact_remove_no_message",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0027_update_education_matter_type1_descriptions",
        "description": "cla_backend.apps.legalaid.migrations.0027_update_education_matter_type1_descriptions",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0026_safe_to_contact_remove_no_message\")]\n    operations = [migrations.RunPython(matter_type1_updates, noop)]",
        "detail": "cla_backend.apps.legalaid.migrations.0027_update_education_matter_type1_descriptions",
        "documentation": {}
    },
    {
        "label": "matter_type1_updates",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.migrations.0027_update_education_matter_type1_descriptions",
        "description": "cla_backend.apps.legalaid.migrations.0027_update_education_matter_type1_descriptions",
        "peekOfCode": "def matter_type1_updates(apps, schema_editor):\n    matter_types_to_update = {\n        \"ESEN\": \"Special educational needs\",\n        \"EDOT\": \"Other (ECF Only)\",\n        \"EDDA\": \"Disability discrimination at school\",\n        \"EEQU\": \"Contravention of Equality 2010 (non-Disability Discrimination at school)\",\n    }\n    MatterType = apps.get_model(\"legalaid\", \"MatterType\")\n    for code, description in matter_types_to_update.items():\n        MatterType.objects.filter(level=1, code=code).update(description=description)",
        "detail": "cla_backend.apps.legalaid.migrations.0027_update_education_matter_type1_descriptions",
        "documentation": {}
    },
    {
        "label": "noop",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.migrations.0027_update_education_matter_type1_descriptions",
        "description": "cla_backend.apps.legalaid.migrations.0027_update_education_matter_type1_descriptions",
        "peekOfCode": "def noop(apps, schema_editor):\n    pass\nclass Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0026_safe_to_contact_remove_no_message\")]\n    operations = [migrations.RunPython(matter_type1_updates, noop)]",
        "detail": "cla_backend.apps.legalaid.migrations.0027_update_education_matter_type1_descriptions",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0028_eligibilitycheck_has_passported_proceedings_letter",
        "description": "cla_backend.apps.legalaid.migrations.0028_eligibilitycheck_has_passported_proceedings_letter",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0027_update_education_matter_type1_descriptions\")]\n    operations = [\n        migrations.AddField(\n            model_name=\"eligibilitycheck\",\n            name=\"has_passported_proceedings_letter\",\n            field=models.NullBooleanField(default=None),\n            preserve_default=True,\n        )\n    ]",
        "detail": "cla_backend.apps.legalaid.migrations.0028_eligibilitycheck_has_passported_proceedings_letter",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0029_auto_20211213_1144",
        "description": "cla_backend.apps.legalaid.migrations.0029_auto_20211213_1144",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0028_eligibilitycheck_has_passported_proceedings_letter\")]\n    operations = [\n        migrations.AlterField(\n            model_name=\"case\",\n            name=\"ecf_statement\",\n            field=models.CharField(\n                blank=True,\n                max_length=35,\n                null=True,",
        "detail": "cla_backend.apps.legalaid.migrations.0029_auto_20211213_1144",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0030_eligibilitycheck_disregards",
        "description": "cla_backend.apps.legalaid.migrations.0030_eligibilitycheck_disregards",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0029_auto_20211213_1144\")]\n    operations = [\n        migrations.AddField(\n            model_name=\"eligibilitycheck\",\n            name=\"disregards\",\n            field=jsonfield.fields.JSONField(null=True, blank=True),\n            preserve_default=True,\n        )\n    ]",
        "detail": "cla_backend.apps.legalaid.migrations.0030_eligibilitycheck_disregards",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0031_personal_details_contact_for_research_method",
        "description": "cla_backend.apps.legalaid.migrations.0031_personal_details_contact_for_research_method",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0030_eligibilitycheck_disregards\")]\n    operations = [\n        migrations.AlterField(\n            model_name=\"personaldetails\",\n            name=\"contact_for_research_methods\",\n            field=models.ManyToManyField(to=\"legalaid.ContactResearchMethod\", null=True, blank=True),\n            preserve_default=True,\n        )\n    ]",
        "detail": "cla_backend.apps.legalaid.migrations.0031_personal_details_contact_for_research_method",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.migrations.0032_auto_20230719_1449",
        "description": "cla_backend.apps.legalaid.migrations.0032_auto_20230719_1449",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0031_personal_details_contact_for_research_method\")]\n    operations = [\n        migrations.AddField(\n            model_name=\"eligibilitycheck\", name=\"is_you_under_18\", field=models.NullBooleanField(default=None)\n        ),\n        migrations.AddField(\n            model_name=\"eligibilitycheck\", name=\"under_18_has_valuables\", field=models.NullBooleanField(default=None)\n        ),\n        migrations.AddField(",
        "detail": "cla_backend.apps.legalaid.migrations.0032_auto_20230719_1449",
        "documentation": {}
    },
    {
        "label": "AdaptationsMetadataAPIMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.views.mixins.adaptations_api",
        "description": "cla_backend.apps.legalaid.tests.views.mixins.adaptations_api",
        "peekOfCode": "class AdaptationsMetadataAPIMixin(object):\n    def test_methods_not_allowed(self):\n        \"\"\"\n        Ensure that only OPTIONS is allowed\n        \"\"\"\n        url = reverse(\"%s:adaptations-metadata-list\" % self.API_URL_NAMESPACE)\n        self._test_delete_not_allowed(url)\n        self._test_post_not_allowed(url)\n        self._test_put_not_allowed(url)\n        self._test_patch_not_allowed(url)",
        "detail": "cla_backend.apps.legalaid.tests.views.mixins.adaptations_api",
        "documentation": {}
    },
    {
        "label": "AdaptationsDetailsAPIMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.views.mixins.adaptations_api",
        "description": "cla_backend.apps.legalaid.tests.views.mixins.adaptations_api",
        "peekOfCode": "class AdaptationsDetailsAPIMixin(NestedSimpleResourceAPIMixin):\n    LOOKUP_KEY = \"case_reference\"\n    PARENT_LOOKUP_KEY = \"reference\"\n    RESOURCE_RECIPE = \"legalaid.adaptation_details\"\n    API_URL_BASE_NAME = \"adaptationdetails\"\n    PARENT_RESOURCE_RECIPE = \"legalaid.case\"\n    PK_FIELD = \"adaptation_details\"\n    @property\n    def response_keys(self):\n        return [",
        "detail": "cla_backend.apps.legalaid.tests.views.mixins.adaptations_api",
        "documentation": {}
    },
    {
        "label": "BaseFullCaseAPIMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.views.mixins.case_api",
        "description": "cla_backend.apps.legalaid.tests.views.mixins.case_api",
        "peekOfCode": "class BaseFullCaseAPIMixin(SimpleResourceAPIMixin):\n    LOOKUP_KEY = \"reference\"\n    RESOURCE_RECIPE = \"legalaid.case\"\n    API_URL_BASE_NAME = \"case\"\n    def setUp(self):\n        super(BaseFullCaseAPIMixin, self).setUp()\n        self.list_dashboard_url = u\"%s?dashboard=1\" % reverse(\"%s:case-list\" % self.API_URL_NAMESPACE)\n        self.list_person_ref_url = u\"%s?person_ref=1\" % reverse(\"%s:case-list\" % self.API_URL_NAMESPACE)\n    def get_list_person_ref_url(self, person_ref):\n        return u\"%s?person_ref=%s\" % (reverse(\"%s:case-list\" % self.API_URL_NAMESPACE), person_ref)",
        "detail": "cla_backend.apps.legalaid.tests.views.mixins.case_api",
        "documentation": {}
    },
    {
        "label": "FullCaseAPIMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.views.mixins.case_api",
        "description": "cla_backend.apps.legalaid.tests.views.mixins.case_api",
        "peekOfCode": "class FullCaseAPIMixin(BaseFullCaseAPIMixin):\n    def test_case_serializer_with_eligibility_check_reference(self):\n        eligibility_check = make_recipe(\"legalaid.eligibility_check\")\n        data = {u\"eligibility_check\": eligibility_check.reference}\n        serializer = self.get_case_serializer_clazz()(data=data)\n        self.assertTrue(serializer.is_valid())\n        self.assertDictEqual(serializer.errors, {})\n    def test_case_serializer_with_personal_details_reference(self):\n        personal_details = make_recipe(\n            \"legalaid.personal_details\",",
        "detail": "cla_backend.apps.legalaid.tests.views.mixins.case_api",
        "documentation": {}
    },
    {
        "label": "BaseSearchCaseAPIMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.views.mixins.case_api",
        "description": "cla_backend.apps.legalaid.tests.views.mixins.case_api",
        "peekOfCode": "class BaseSearchCaseAPIMixin(BaseFullCaseAPIMixin):\n    def test_search_find_one_result_by_name(self):\n        \"\"\"\n        GET search by name should work\n        \"\"\"\n        make_recipe(\n            \"legalaid.case\",\n            reference=\"ref1\",\n            personal_details__full_name=\"xyz\",\n            personal_details__postcode=\"123\",",
        "detail": "cla_backend.apps.legalaid.tests.views.mixins.case_api",
        "documentation": {}
    },
    {
        "label": "BaseUpdateCaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.views.mixins.case_api",
        "description": "cla_backend.apps.legalaid.tests.views.mixins.case_api",
        "peekOfCode": "class BaseUpdateCaseTestCase(BaseFullCaseAPIMixin):\n    @override_settings(DEBUG=True)\n    def test_update_doesnt_set_readonly_values(self):\n        pd = make_recipe(\"legalaid.personal_details\")\n        eligibility_check = make_recipe(\"legalaid.eligibility_check\")\n        thirdparty_details = make_recipe(\"legalaid.thirdparty_details\")\n        adaptation_details = make_recipe(\"legalaid.adaptation_details\")\n        diagnosis = make_recipe(\"diagnosis.diagnosis\")\n        provider = make_recipe(\"cla_provider.provider\")\n        case = make_recipe(",
        "detail": "cla_backend.apps.legalaid.tests.views.mixins.case_api",
        "documentation": {}
    },
    {
        "label": "CaseNotesHistoryAPIMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.views.mixins.case_notes_history_api",
        "description": "cla_backend.apps.legalaid.tests.views.mixins.case_notes_history_api",
        "peekOfCode": "class CaseNotesHistoryAPIMixin(NestedSimpleResourceAPIMixin):\n    LOOKUP_KEY = \"reference\"\n    API_URL_BASE_NAME = \"casenoteshistory\"\n    RESOURCE_RECIPE = \"legalaid.notes_history\"\n    LOOKUP_KEY = \"case_reference\"\n    PARENT_LOOKUP_KEY = \"reference\"\n    PARENT_RESOURCE_RECIPE = \"legalaid.case\"\n    PK_FIELD = \"case\"\n    ONE_TO_ONE_RESOURCE = False\n    def setup_resources(self):",
        "detail": "cla_backend.apps.legalaid.tests.views.mixins.case_notes_history_api",
        "documentation": {}
    },
    {
        "label": "CategoryAPIMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.views.mixins.category_api",
        "description": "cla_backend.apps.legalaid.tests.views.mixins.category_api",
        "peekOfCode": "class CategoryAPIMixin(SimpleResourceAPIMixin):\n    LOOKUP_KEY = \"code\"\n    API_URL_BASE_NAME = \"category\"\n    RESOURCE_RECIPE = \"legalaid.category\"\n    def setUp(self):\n        super(CategoryAPIMixin, self).setUp()\n        self.categories = make_recipe(\"legalaid.category\", _quantity=2)\n    def test_get_allowed(self):\n        \"\"\"\n        Ensure we can GET the list and it is ordered",
        "detail": "cla_backend.apps.legalaid.tests.views.mixins.category_api",
        "documentation": {}
    },
    {
        "label": "EligibilityCheckAPIMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.views.mixins.eligibility_check_api",
        "description": "cla_backend.apps.legalaid.tests.views.mixins.eligibility_check_api",
        "peekOfCode": "class EligibilityCheckAPIMixin(SimpleResourceAPIMixin):\n    LOOKUP_KEY = \"reference\"\n    API_URL_BASE_NAME = \"eligibility_check\"\n    RESOURCE_RECIPE = \"legalaid.eligibility_check\"\n    @property\n    def response_keys(self):\n        return [\n            \"reference\",\n            \"category\",\n            \"notes\",",
        "detail": "cla_backend.apps.legalaid.tests.views.mixins.eligibility_check_api",
        "documentation": {}
    },
    {
        "label": "NestedEligibilityCheckAPIMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.views.mixins.eligibility_check_api",
        "description": "cla_backend.apps.legalaid.tests.views.mixins.eligibility_check_api",
        "peekOfCode": "class NestedEligibilityCheckAPIMixin(NestedSimpleResourceAPIMixin, EligibilityCheckAPIMixin):\n    LOOKUP_KEY = \"case_reference\"\n    PARENT_LOOKUP_KEY = \"reference\"\n    PARENT_RESOURCE_RECIPE = \"legalaid.case\"\n    PK_FIELD = \"eligibility_check\"\n    def get_reference_from_response(self, data):\n        return self.parent_resource.reference\n    def test_methods_not_allowed(self):\n        \"\"\"\n        Ensure that we can't POST, PUT or DELETE",
        "detail": "cla_backend.apps.legalaid.tests.views.mixins.eligibility_check_api",
        "documentation": {}
    },
    {
        "label": "mi_dict_generator",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.tests.views.mixins.eligibility_check_api",
        "description": "cla_backend.apps.legalaid.tests.views.mixins.eligibility_check_api",
        "peekOfCode": "def mi_dict_generator(x):\n    return {\"interval_period\": \"per_month\", \"per_interval_value\": x}\nclass EligibilityCheckAPIMixin(SimpleResourceAPIMixin):\n    LOOKUP_KEY = \"reference\"\n    API_URL_BASE_NAME = \"eligibility_check\"\n    RESOURCE_RECIPE = \"legalaid.eligibility_check\"\n    @property\n    def response_keys(self):\n        return [\n            \"reference\",",
        "detail": "cla_backend.apps.legalaid.tests.views.mixins.eligibility_check_api",
        "documentation": {}
    },
    {
        "label": "PersonalDetailsAPIMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.views.mixins.personal_details_api",
        "description": "cla_backend.apps.legalaid.tests.views.mixins.personal_details_api",
        "peekOfCode": "class PersonalDetailsAPIMixin(NestedSimpleResourceAPIMixin):\n    LOOKUP_KEY = \"case_reference\"\n    PARENT_LOOKUP_KEY = \"reference\"\n    API_URL_BASE_NAME = \"personaldetails\"\n    RESOURCE_RECIPE = \"legalaid.personal_details\"\n    PARENT_RESOURCE_RECIPE = \"legalaid.case\"\n    PK_FIELD = \"personal_details\"\n    @property\n    def response_keys(self):\n        return [",
        "detail": "cla_backend.apps.legalaid.tests.views.mixins.personal_details_api",
        "documentation": {}
    },
    {
        "label": "ProviderExtractAPIMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.views.mixins.provider_extract_api",
        "description": "cla_backend.apps.legalaid.tests.views.mixins.provider_extract_api",
        "peekOfCode": "class ProviderExtractAPIMixin(object):\n    def setUp(self):\n        super(ProviderExtractAPIMixin, self).setUp()\n        self.creds = {\"chs_org\": \"org123\", \"chs_user\": \"test_user\", \"chs_pass\": \"test_pass\"}\n        self.user.staff.chs_organisation = self.creds[\"chs_org\"]\n        self.user.staff.set_chs_password(self.creds[\"chs_pass\"])\n        self.user.staff.chs_user = self.creds[\"chs_user\"]\n        self.user.staff.save()\n        self.case = make_recipe(\n            \"legalaid.case\", provider=self.provider, requires_action_by=REQUIRES_ACTION_BY.PROVIDER",
        "detail": "cla_backend.apps.legalaid.tests.views.mixins.provider_extract_api",
        "documentation": {}
    },
    {
        "label": "ThirdPartyDetailsApiMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.views.mixins.third_party_api",
        "description": "cla_backend.apps.legalaid.tests.views.mixins.third_party_api",
        "peekOfCode": "class ThirdPartyDetailsApiMixin(NestedSimpleResourceAPIMixin):\n    LOOKUP_KEY = \"case_reference\"\n    RESOURCE_RECIPE = \"legalaid.thirdparty_details\"\n    API_URL_BASE_NAME = \"thirdpartydetails\"\n    PARENT_LOOKUP_KEY = \"reference\"\n    PARENT_RESOURCE_RECIPE = \"legalaid.case\"\n    PK_FIELD = \"thirdparty_details\"\n    @property\n    def response_keys(self):\n        return [",
        "detail": "cla_backend.apps.legalaid.tests.views.mixins.third_party_api",
        "documentation": {}
    },
    {
        "label": "UserAPIMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.views.mixins.user_api",
        "description": "cla_backend.apps.legalaid.tests.views.mixins.user_api",
        "peekOfCode": "class UserAPIMixin(object):\n    def setUp(self):\n        super(UserAPIMixin, self).setUp()\n        self.other_users = self.get_other_users()\n        self.detail_url = self.get_user_detail_url(\"me\")\n        self.list_url = reverse(\"%s:user-list\" % self.API_URL_NAMESPACE)\n    def get_user_password_reset_url(self, username):\n        return reverse(\"%s:user-password-reset\" % self.API_URL_NAMESPACE, args=(), kwargs={\"user__username\": username})\n    def get_user_reset_lockout_url(self, username):\n        return reverse(\"%s:user-reset-lockout\" % self.API_URL_NAMESPACE, args=(), kwargs={\"user__username\": username})",
        "detail": "cla_backend.apps.legalaid.tests.views.mixins.user_api",
        "documentation": {}
    },
    {
        "label": "CLAAuthBaseApiTestMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.views.test_base",
        "description": "cla_backend.apps.legalaid.tests.views.test_base",
        "peekOfCode": "class CLAAuthBaseApiTestMixin(CLABaseApiTestMixin):\n    \"\"\"\n    Useful testing methods\n    NOTE: never subclass this directly, use one of the sublasses:\n        CLAProviderAuthBaseApiTestMixin\n        CLAOperatorAuthBaseApiTestMixin\n        CLACheckerAuthBaseApiTestMixin\n        instead.\n    \"\"\"\n    DEFAULT_TOKEN = None",
        "detail": "cla_backend.apps.legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAProviderAuthBaseApiTestMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.views.test_base",
        "description": "cla_backend.apps.legalaid.tests.views.test_base",
        "peekOfCode": "class CLAProviderAuthBaseApiTestMixin(CLAAuthBaseApiTestMixin):\n    DEFAULT_TOKEN = \"staff_token\"\n    DEFAULT_MANAGER_TOKEN = \"staff_manager_token\"\n    INVALID_TOKEN = \"operator_token\"\n    API_URL_NAMESPACE = \"cla_provider\"\n    OTHER_USER_ACCESS_STATUS_CODE = status.HTTP_404_NOT_FOUND\nclass CLAOperatorAuthBaseApiTestMixin(CLAAuthBaseApiTestMixin):\n    DEFAULT_TOKEN = \"operator_token\"\n    DEFAULT_MANAGER_TOKEN = \"operator_manager_token\"\n    INVALID_TOKEN = \"staff_token\"",
        "detail": "cla_backend.apps.legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLAOperatorAuthBaseApiTestMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.views.test_base",
        "description": "cla_backend.apps.legalaid.tests.views.test_base",
        "peekOfCode": "class CLAOperatorAuthBaseApiTestMixin(CLAAuthBaseApiTestMixin):\n    DEFAULT_TOKEN = \"operator_token\"\n    DEFAULT_MANAGER_TOKEN = \"operator_manager_token\"\n    INVALID_TOKEN = \"staff_token\"\n    API_URL_NAMESPACE = \"call_centre\"\n    OTHER_USER_ACCESS_STATUS_CODE = status.HTTP_403_FORBIDDEN\nclass CLACheckerAuthBaseApiTestMixin(CLABaseApiTestMixin):\n    API_URL_NAMESPACE = \"checker\"",
        "detail": "cla_backend.apps.legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "CLACheckerAuthBaseApiTestMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.views.test_base",
        "description": "cla_backend.apps.legalaid.tests.views.test_base",
        "peekOfCode": "class CLACheckerAuthBaseApiTestMixin(CLABaseApiTestMixin):\n    API_URL_NAMESPACE = \"checker\"",
        "detail": "cla_backend.apps.legalaid.tests.views.test_base",
        "documentation": {}
    },
    {
        "label": "category",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "category = Recipe(Category, name=seq(\"Name\"), code=seq(\"Code\"), order=seq(0))\nincome = Recipe(\n    Income,\n    earnings=MoneyInterval(\"per_month\", pennies=2200),\n    self_employment_drawings=MoneyInterval(\"per_month\", pennies=0),\n    benefits=MoneyInterval(\"per_month\", pennies=0),\n    tax_credits=MoneyInterval(\"per_month\", pennies=0),\n    child_benefits=MoneyInterval(\"per_month\", pennies=0),\n    maintenance_received=MoneyInterval(\"per_month\", pennies=0),\n    pension=MoneyInterval(\"per_month\", pennies=0),",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "income",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "income = Recipe(\n    Income,\n    earnings=MoneyInterval(\"per_month\", pennies=2200),\n    self_employment_drawings=MoneyInterval(\"per_month\", pennies=0),\n    benefits=MoneyInterval(\"per_month\", pennies=0),\n    tax_credits=MoneyInterval(\"per_month\", pennies=0),\n    child_benefits=MoneyInterval(\"per_month\", pennies=0),\n    maintenance_received=MoneyInterval(\"per_month\", pennies=0),\n    pension=MoneyInterval(\"per_month\", pennies=0),\n    other_income=MoneyInterval(\"per_week\", pennies=2200),",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "savings",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "savings = Recipe(Savings)\ndeductions = Recipe(\n    Deductions,\n    income_tax=MoneyInterval(\"per_week\", pennies=2200),\n    national_insurance=MoneyInterval(\"per_4week\", pennies=2200),\n    maintenance=MoneyInterval(\"per_year\", pennies=2200),\n    childcare=MoneyInterval(\"per_week\", pennies=2200),\n    mortgage=MoneyInterval(\"per_week\", pennies=2200),\n    rent=MoneyInterval(\"per_week\", pennies=2200),\n)",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "deductions",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "deductions = Recipe(\n    Deductions,\n    income_tax=MoneyInterval(\"per_week\", pennies=2200),\n    national_insurance=MoneyInterval(\"per_4week\", pennies=2200),\n    maintenance=MoneyInterval(\"per_year\", pennies=2200),\n    childcare=MoneyInterval(\"per_week\", pennies=2200),\n    mortgage=MoneyInterval(\"per_week\", pennies=2200),\n    rent=MoneyInterval(\"per_week\", pennies=2200),\n)\nperson = Recipe(Person)",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "person",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "person = Recipe(Person)\nfull_person = Recipe(\n    Person, income=foreign_key(income), savings=foreign_key(savings), deductions=foreign_key(deductions)\n)\neligibility_check = Recipe(\n    EligibilityCheck,\n    category=foreign_key(category),\n    dependants_young=5,\n    dependants_old=6,\n    you=foreign_key(person),",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "full_person",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "full_person = Recipe(\n    Person, income=foreign_key(income), savings=foreign_key(savings), deductions=foreign_key(deductions)\n)\neligibility_check = Recipe(\n    EligibilityCheck,\n    category=foreign_key(category),\n    dependants_young=5,\n    dependants_old=6,\n    you=foreign_key(person),\n    partner=foreign_key(person),",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "eligibility_check",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "eligibility_check = Recipe(\n    EligibilityCheck,\n    category=foreign_key(category),\n    dependants_young=5,\n    dependants_old=6,\n    you=foreign_key(person),\n    partner=foreign_key(person),\n)\neligibility_check_yes = Recipe(\n    EligibilityCheck,",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "eligibility_check_yes",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "eligibility_check_yes = Recipe(\n    EligibilityCheck,\n    category=foreign_key(category),\n    dependants_young=5,\n    dependants_old=6,\n    you=foreign_key(person),\n    partner=foreign_key(person),\n    state=\"yes\",\n)\nproperty = Recipe(Property, eligibility_check=foreign_key(eligibility_check))",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "property",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "property = Recipe(Property, eligibility_check=foreign_key(eligibility_check))\ncontact_research_method = Recipe(ContactResearchMethod, method=\"PHONE\")\npersonal_details = Recipe(\n    PersonalDetails,\n    mobile_phone=seq(555),\n    home_phone=seq(7777),\n    title=\"Dr\",\n    street=seq(\"Street\"),\n    postcode=seq(\"postcode\"),\n    full_name=seq(\"fullname\"),",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "contact_research_method",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "contact_research_method = Recipe(ContactResearchMethod, method=\"PHONE\")\npersonal_details = Recipe(\n    PersonalDetails,\n    mobile_phone=seq(555),\n    home_phone=seq(7777),\n    title=\"Dr\",\n    street=seq(\"Street\"),\n    postcode=seq(\"postcode\"),\n    full_name=seq(\"fullname\"),\n)",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "personal_details",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "personal_details = Recipe(\n    PersonalDetails,\n    mobile_phone=seq(555),\n    home_phone=seq(7777),\n    title=\"Dr\",\n    street=seq(\"Street\"),\n    postcode=seq(\"postcode\"),\n    full_name=seq(\"fullname\"),\n)\nresearch_method = Recipe(ContactResearchMethod, personal_details_id=foreign_key(personal_details))",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "research_method",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "research_method = Recipe(ContactResearchMethod, personal_details_id=foreign_key(personal_details))\nthirdparty_details = Recipe(ThirdPartyDetails, personal_details=foreign_key(personal_details))\nadaptation_details = Recipe(AdaptationDetails)\nmatter_type1 = Recipe(MatterType, level=1)\nmatter_type2 = Recipe(MatterType, level=2)\nmedia_code_group = Recipe(MediaCodeGroup)\nmedia_code = Recipe(MediaCode, group=foreign_key(media_code_group))\nempty_case = Recipe(Case)\ncase = Recipe(\n    Case,",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "thirdparty_details",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "thirdparty_details = Recipe(ThirdPartyDetails, personal_details=foreign_key(personal_details))\nadaptation_details = Recipe(AdaptationDetails)\nmatter_type1 = Recipe(MatterType, level=1)\nmatter_type2 = Recipe(MatterType, level=2)\nmedia_code_group = Recipe(MediaCodeGroup)\nmedia_code = Recipe(MediaCode, group=foreign_key(media_code_group))\nempty_case = Recipe(Case)\ncase = Recipe(\n    Case,\n    eligibility_check=foreign_key(eligibility_check),",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "adaptation_details",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "adaptation_details = Recipe(AdaptationDetails)\nmatter_type1 = Recipe(MatterType, level=1)\nmatter_type2 = Recipe(MatterType, level=2)\nmedia_code_group = Recipe(MediaCodeGroup)\nmedia_code = Recipe(MediaCode, group=foreign_key(media_code_group))\nempty_case = Recipe(Case)\ncase = Recipe(\n    Case,\n    eligibility_check=foreign_key(eligibility_check),\n    personal_details=foreign_key(personal_details),",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "matter_type1",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "matter_type1 = Recipe(MatterType, level=1)\nmatter_type2 = Recipe(MatterType, level=2)\nmedia_code_group = Recipe(MediaCodeGroup)\nmedia_code = Recipe(MediaCode, group=foreign_key(media_code_group))\nempty_case = Recipe(Case)\ncase = Recipe(\n    Case,\n    eligibility_check=foreign_key(eligibility_check),\n    personal_details=foreign_key(personal_details),\n    media_code=foreign_key(media_code),",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "matter_type2",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "matter_type2 = Recipe(MatterType, level=2)\nmedia_code_group = Recipe(MediaCodeGroup)\nmedia_code = Recipe(MediaCode, group=foreign_key(media_code_group))\nempty_case = Recipe(Case)\ncase = Recipe(\n    Case,\n    eligibility_check=foreign_key(eligibility_check),\n    personal_details=foreign_key(personal_details),\n    media_code=foreign_key(media_code),\n)",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "media_code_group",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "media_code_group = Recipe(MediaCodeGroup)\nmedia_code = Recipe(MediaCode, group=foreign_key(media_code_group))\nempty_case = Recipe(Case)\ncase = Recipe(\n    Case,\n    eligibility_check=foreign_key(eligibility_check),\n    personal_details=foreign_key(personal_details),\n    media_code=foreign_key(media_code),\n)\neligible_case = Recipe(",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "media_code",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "media_code = Recipe(MediaCode, group=foreign_key(media_code_group))\nempty_case = Recipe(Case)\ncase = Recipe(\n    Case,\n    eligibility_check=foreign_key(eligibility_check),\n    personal_details=foreign_key(personal_details),\n    media_code=foreign_key(media_code),\n)\neligible_case = Recipe(\n    Case,",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "empty_case",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "empty_case = Recipe(Case)\ncase = Recipe(\n    Case,\n    eligibility_check=foreign_key(eligibility_check),\n    personal_details=foreign_key(personal_details),\n    media_code=foreign_key(media_code),\n)\neligible_case = Recipe(\n    Case,\n    eligibility_check=foreign_key(eligibility_check_yes),",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "case",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "case = Recipe(\n    Case,\n    eligibility_check=foreign_key(eligibility_check),\n    personal_details=foreign_key(personal_details),\n    media_code=foreign_key(media_code),\n)\neligible_case = Recipe(\n    Case,\n    eligibility_check=foreign_key(eligibility_check_yes),\n    diagnosis=foreign_key(diagnosis_yes),",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "eligible_case",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "eligible_case = Recipe(\n    Case,\n    eligibility_check=foreign_key(eligibility_check_yes),\n    diagnosis=foreign_key(diagnosis_yes),\n    personal_details=foreign_key(personal_details),\n    media_code=foreign_key(media_code),\n)\nnotes_history = Recipe(CaseNotesHistory)\neod_details = Recipe(EODDetails, case=foreign_key(case))\neod_details_category = Recipe(EODDetailsCategory, eod_details=foreign_key(eod_details))",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "notes_history",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "notes_history = Recipe(CaseNotesHistory)\neod_details = Recipe(EODDetails, case=foreign_key(case))\neod_details_category = Recipe(EODDetailsCategory, eod_details=foreign_key(eod_details))",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "eod_details",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "eod_details = Recipe(EODDetails, case=foreign_key(case))\neod_details_category = Recipe(EODDetailsCategory, eod_details=foreign_key(eod_details))",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "eod_details_category",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "description": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "peekOfCode": "eod_details_category = Recipe(EODDetailsCategory, eod_details=foreign_key(eod_details))",
        "detail": "cla_backend.apps.legalaid.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "CategoryModelFormTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_admin_forms",
        "description": "cla_backend.apps.legalaid.tests.test_admin_forms",
        "peekOfCode": "class CategoryModelFormTestCase(TestCase):\n    def test_save(self):\n        category = category_recipe.make()\n        data = {\"name\": \"Name\", \"order\": 0, \"code\": \"code\", \"raw_description\": \"**strong**\"}\n        form = CategoryModelForm(instance=category, data=data)\n        self.assertTrue(form.is_valid())\n        form.save()\n        self.assertEqual(category.raw_description, data[\"raw_description\"])\n        self.assertEqual(category.description, u\"<p><strong>strong</strong></p>\")\n    def test_save_empty(self):",
        "detail": "cla_backend.apps.legalaid.tests.test_admin_forms",
        "documentation": {}
    },
    {
        "label": "category_recipe",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.tests.test_admin_forms",
        "description": "cla_backend.apps.legalaid.tests.test_admin_forms",
        "peekOfCode": "category_recipe = Recipe(Category)\nclass CategoryModelFormTestCase(TestCase):\n    def test_save(self):\n        category = category_recipe.make()\n        data = {\"name\": \"Name\", \"order\": 0, \"code\": \"code\", \"raw_description\": \"**strong**\"}\n        form = CategoryModelForm(instance=category, data=data)\n        self.assertTrue(form.is_valid())\n        form.save()\n        self.assertEqual(category.raw_description, data[\"raw_description\"])\n        self.assertEqual(category.description, u\"<p><strong>strong</strong></p>\")",
        "detail": "cla_backend.apps.legalaid.tests.test_admin_forms",
        "documentation": {}
    },
    {
        "label": "CaseOrganisationAssignmentTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_commands",
        "description": "cla_backend.apps.legalaid.tests.test_commands",
        "peekOfCode": "class CaseOrganisationAssignmentTestCase(TestCase):\n    def test_assign_existing_cases_to_organisation(self):\n        agilisys_org = make_recipe(\"call_centre.organisation\", name=\"Agilisys\")\n        foo_org = make_recipe(\"call_centre.organisation\", name=\"Foo org\")\n        agilisys_operator = make_recipe(\"call_centre.operator\", user=make_user(email=\"user1@agilisys.co.uk\"))\n        agilisys_case = make_recipe(\"legalaid.case\", created_by=agilisys_operator.user)\n        foo_org_case = make_recipe(\"legalaid.case\", organisation=foo_org)\n        no_org_case = make_recipe(\"legalaid.case\")\n        out = StringIO()\n        call_command(\"assign_existing_cases_to_organisation\", stdout=out)",
        "detail": "cla_backend.apps.legalaid.tests.test_commands",
        "documentation": {}
    },
    {
        "label": "CaseEventTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_events",
        "description": "cla_backend.apps.legalaid.tests.test_events",
        "peekOfCode": "class CaseEventTestCase(EventTestCaseMixin, TestCase):\n    EVENT_KEY = \"case\"\n    def test_case_created(self):\n        self._test_process_with_implicit_code(\n            \"CASE_CREATED\", process_kwargs={\"status\": \"created\"}, expected_type=LOG_TYPES.SYSTEM\n        )\n    def test_case_viewed(self):\n        self._test_process_with_implicit_code(\n            \"CASE_VIEWED\",\n            process_kwargs={\"status\": \"viewed\"},",
        "detail": "cla_backend.apps.legalaid.tests.test_events",
        "documentation": {}
    },
    {
        "label": "CaseEventAvoidDuplicatesTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_events",
        "description": "cla_backend.apps.legalaid.tests.test_events",
        "peekOfCode": "class CaseEventAvoidDuplicatesTestCase(EventTestCaseMixin, TestCase):\n    EVENT_KEY = \"case\"\n    def test_CASE_VIEWED_log_not_created_after_CASE_CREATED_during_timer(self):\n        \"\"\"\n        During the lifetime of a timer, if a user creates a case\n        and then views it, only 'CASE_CREATED' log is created.\n        In other words, we don't log 'CASE_VIEWED' to avoid noise.\n        \"\"\"\n        event = event_registry.get_event(self.EVENT_KEY)()\n        self.assertEqual(Log.objects.count(), 0)  # no logs",
        "detail": "cla_backend.apps.legalaid.tests.test_events",
        "documentation": {}
    },
    {
        "label": "SuspendCaseEventTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_events",
        "description": "cla_backend.apps.legalaid.tests.test_events",
        "peekOfCode": "class SuspendCaseEventTestCase(EventTestCaseMixin, TestCase):\n    EVENT_KEY = \"suspend_case\"\n    CODES = [\n        \"INSUF\",\n        \"ABND\",\n        \"TERM\",\n        \"IRCB\",\n        \"COPE\",\n        \"DUPL\",\n        \"RDSP\",",
        "detail": "cla_backend.apps.legalaid.tests.test_events",
        "documentation": {}
    },
    {
        "label": "SLATimeHelperTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_helpers",
        "description": "cla_backend.apps.legalaid.tests.test_helpers",
        "peekOfCode": "class SLATimeHelperTestCase(TestCase):\n    sunday = 0\n    monday = 1\n    saturday = 6\n    tz = timezone.get_default_timezone()\n    # 'get_sla_time()' uses the 'cla_common.call_centre_availability.available_days()' function,\n    # which in turn uses 'current_datetime()' and 'datetime.datetime.now()'.\n    #\n    # 'get_sla_time()' calculates elapsed time within operator business hours, which requires to roll over\n    # and the end of day (19:59 + 2 minutes is next day 9:01).",
        "detail": "cla_backend.apps.legalaid.tests.test_helpers",
        "documentation": {}
    },
    {
        "label": "ProviderAllocationHelperTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_helpers",
        "description": "cla_backend.apps.legalaid.tests.test_helpers",
        "peekOfCode": "class ProviderAllocationHelperTestCase(TestCase):\n    def setUp(self):\n        self.category = make_recipe(\"legalaid.category\")\n        self.helper = ProviderAllocationHelper()\n        self.date = timezone.now().replace(hour=0, minute=0, second=0)\n        self.provider_allocations = make_recipe(\n            \"cla_provider.provider_allocation\",\n            category=self.category,\n            weighted_distribution=1.0,\n            provider__active=True,",
        "detail": "cla_backend.apps.legalaid.tests.test_helpers",
        "documentation": {}
    },
    {
        "label": "ProviderDistributionHelperTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_helpers",
        "description": "cla_backend.apps.legalaid.tests.test_helpers",
        "peekOfCode": "class ProviderDistributionHelperTestCase(TestCase):\n    def setUp(self):\n        self.category = make_recipe(\"legalaid.category\")\n        self.category2 = make_recipe(\"legalaid.category\")\n        self.provider_allocations = make_recipe(\n            \"cla_provider.provider_allocation\", category=self.category, weighted_distribution=1.0, _quantity=10\n        )\n        self.uneven_provider_allocations = make_recipe(\n            \"cla_provider.provider_allocation\", category=self.category, weighted_distribution=1.0, _quantity=5\n        )",
        "detail": "cla_backend.apps.legalaid.tests.test_helpers",
        "documentation": {}
    },
    {
        "label": "NoMessageSafeToContactMigrationSetTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_migrations",
        "description": "cla_backend.apps.legalaid.tests.test_migrations",
        "peekOfCode": "class NoMessageSafeToContactMigrationSetTestCase(TestCase):\n    def test_migrate_no_message_to_safe_to_contact(self):\n        personal_details_safe = make_recipe(\n            \"legalaid.personal_details\", safe_to_contact=CONTACT_SAFETY.SAFE, _quantity=2\n        )\n        personal_details_no_call = make_recipe(\n            \"legalaid.personal_details\", safe_to_contact=CONTACT_SAFETY.DONT_CALL, _quantity=2\n        )\n        personal_details_no_message = make_recipe(\n            \"legalaid.personal_details\", safe_to_contact=\"NO_MESSAGE\", _quantity=3",
        "detail": "cla_backend.apps.legalaid.tests.test_migrations",
        "documentation": {}
    },
    {
        "label": "EligibilityCheckTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_models",
        "description": "cla_backend.apps.legalaid.tests.test_models",
        "peekOfCode": "class EligibilityCheckTestCase(TestCase):\n    # def test_to_case_data_fail_without_your_finances(self):\n    #     \"\"\"\n    #     Should fail as your_finances object is always needed\n    #     \"\"\"\n    #     check = EligibilityCheck()\n    #\n    #     self.assertRaises(ValueError, check.to_case_data)\n    def assertModelMixinEqual(self, obj1, obj2):\n        for prop in obj1.__class__.PROPERTY_META.keys():",
        "detail": "cla_backend.apps.legalaid.tests.test_models",
        "documentation": {}
    },
    {
        "label": "CaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_models",
        "description": "cla_backend.apps.legalaid.tests.test_models",
        "peekOfCode": "class CaseTestCase(TestCase):\n    def test_create_has_laa_reference(self):\n        case = make_recipe(\"legalaid.case\")\n        # there is an LAA Reference\n        self.assertIsNotNone(case.laa_reference)\n        # it is valid as per algorithm\n        self.assertEqual(case.id + settings.LAA_REFERENCE_SEED, case.laa_reference)\n        # it is 7 digits long\n        self.assertEqual(len(unicode(case.laa_reference)), 7)\n    def test_case_doesnt_get_duplicate_reference(self):",
        "detail": "cla_backend.apps.legalaid.tests.test_models",
        "documentation": {}
    },
    {
        "label": "CaseDatabaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_models",
        "description": "cla_backend.apps.legalaid.tests.test_models",
        "peekOfCode": "class CaseDatabaseTestCase(SimpleTestCase):\n    \"\"\"\n    Explicitly save to database to test reload behavior. Manually clean up.\n    \"\"\"\n    @classmethod\n    def setUpClass(cls):\n        cls.allow_database_queries = True\n    @mock.patch(\"legalaid.models.logger\")\n    def test_log_denormalized_outcome_fields(self, mock_logger):\n        case = make_recipe(\"legalaid.case\")",
        "detail": "cla_backend.apps.legalaid.tests.test_models",
        "documentation": {}
    },
    {
        "label": "MoneyIntervalFieldTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_models",
        "description": "cla_backend.apps.legalaid.tests.test_models",
        "peekOfCode": "class MoneyIntervalFieldTestCase(TestCase):\n    def test_create_save_moneyinterval(self):\n        ei = MoneyInterval(\"per_week\", pennies=5000)\n        per_month = int((5000.0 * 52.0) / 12.0)\n        i = Income(earnings=ei, other_income=ei, self_employed=True)\n        self.assertEqual(i.earnings.interval_period, \"per_week\")\n        i.save()\n        ix = Income.objects.get(id=i.id)\n        eix = ix.earnings\n        self.assertEqual(eix.interval_period, \"per_week\")",
        "detail": "cla_backend.apps.legalaid.tests.test_models",
        "documentation": {}
    },
    {
        "label": "CloneModelsTestCaseMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_models",
        "description": "cla_backend.apps.legalaid.tests.test_models",
        "peekOfCode": "class CloneModelsTestCaseMixin(object):\n    def _check_model_fields(self, Model, obj, new_obj, non_equal_fields, equal_fields, check_not_None=False):\n        all_fields = non_equal_fields + equal_fields\n        self._check_model_fields_keys(Model, all_fields)\n        for field in non_equal_fields:\n            if check_not_None:\n                self.assertNotEqual(getattr(new_obj, field), None)\n            self.assertNotEqual(getattr(obj, field), getattr(new_obj, field))\n        for field in equal_fields:\n            if check_not_None:",
        "detail": "cla_backend.apps.legalaid.tests.test_models",
        "documentation": {}
    },
    {
        "label": "CloneModelsTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_models",
        "description": "cla_backend.apps.legalaid.tests.test_models",
        "peekOfCode": "class CloneModelsTestCase(CloneModelsTestCaseMixin, TestCase):\n    def _test_clone(self, Model, instance_creator, non_equal_fields, equal_fields):\n        self.assertEqual(Model.objects.count(), 0)\n        self.obj = instance_creator()\n        self.cloned_obj = Model.clone_from_obj(self.obj.pk)\n        self.assertEqual(Model.objects.count(), 2)\n        self._check_model_fields(Model, self.obj, self.cloned_obj, non_equal_fields, equal_fields)\n    def test_clone_savings(self):\n        self._test_clone(\n            Model=Savings,",
        "detail": "cla_backend.apps.legalaid.tests.test_models",
        "documentation": {}
    },
    {
        "label": "SplitCaseTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_models",
        "description": "cla_backend.apps.legalaid.tests.test_models",
        "peekOfCode": "class SplitCaseTestCase(CloneModelsTestCaseMixin, TestCase):\n    def build_category_data(self):\n        class CatData:\n            def __init__(self):\n                self.category = make_recipe(\"legalaid.category\")\n                self.matter_type1 = make_recipe(\"legalaid.matter_type1\", category=self.category)\n                self.matter_type2 = make_recipe(\"legalaid.matter_type2\", category=self.category)\n        return CatData()\n    def setUp(self):\n        super(SplitCaseTestCase, self).setUp()",
        "detail": "cla_backend.apps.legalaid.tests.test_models",
        "documentation": {}
    },
    {
        "label": "walk",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.tests.test_models",
        "description": "cla_backend.apps.legalaid.tests.test_models",
        "peekOfCode": "def walk(coll):\n    \"\"\"Return a generator for all atomic values in coll and its subcollections.\n    An atomic value is one that's not iterable as determined by iter.\"\"\"\n    try:\n        k = iter(coll)\n        for x in k:\n            for y in walk(x):\n                yield y\n    except TypeError:\n        yield coll",
        "detail": "cla_backend.apps.legalaid.tests.test_models",
        "documentation": {}
    },
    {
        "label": "get_full_case",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.tests.test_models",
        "description": "cla_backend.apps.legalaid.tests.test_models",
        "peekOfCode": "def get_full_case(matter_type1, matter_type2, provider=None):\n    provider = provider or make_recipe(\"cla_provider.provider\")\n    organisation = make_recipe(\"call_centre.organisation\")\n    ec = make_recipe(\n        \"legalaid.eligibility_check_yes\",\n        disputed_savings=make_recipe(\"legalaid.savings\"),\n        on_passported_benefits=True,\n        specific_benefits={\"income_support\": True},\n        disregards={\"criminal_injuries\": True},\n        on_nass_benefits=True,",
        "detail": "cla_backend.apps.legalaid.tests.test_models",
        "documentation": {}
    },
    {
        "label": "BaseAssignedOutOfHours",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_timezones",
        "description": "cla_backend.apps.legalaid.tests.test_timezones",
        "peekOfCode": "class BaseAssignedOutOfHours(object):\n    def tearDown(self):\n        self.freezer.stop()\n        super(BaseAssignedOutOfHours, self).tearDown()\n    def create_and_assign(self, dt):\n        timezone_aware_dt = timezone.make_aware(dt, timezone.get_current_timezone())\n        utc_dt = timezone_aware_dt.astimezone(pytz.utc)\n        self.freezer = freeze_time(utc_dt)\n        self.freezer.start()\n        provider = make_recipe(\"cla_provider.provider\")",
        "detail": "cla_backend.apps.legalaid.tests.test_timezones",
        "documentation": {}
    },
    {
        "label": "TestGMTAssignedOutOfHoursTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_timezones",
        "description": "cla_backend.apps.legalaid.tests.test_timezones",
        "peekOfCode": "class TestGMTAssignedOutOfHoursTestCase(BaseAssignedOutOfHours, TestCase):\n    dt = timezone.datetime(2021, 2, 2)\nclass TestBSTAssignedOutOfHoursTestCase(BaseAssignedOutOfHours, TestCase):\n    dt = timezone.datetime(2021, 5, 5)\nclass TestCommandDateArgument(TestCase):\n    def test_requires_date(self):\n        with self.assertRaisesMessage(CommandError, \"A start date is required\"):\n            call_command(\"recalculate_assigned_out_of_hours\")\n    def test_date_must_be_a_date_string(self):\n        with self.assertRaisesMessage(CommandError, \"The start date should be a valid datetime in yyyy-mm-dd format\"):",
        "detail": "cla_backend.apps.legalaid.tests.test_timezones",
        "documentation": {}
    },
    {
        "label": "TestBSTAssignedOutOfHoursTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_timezones",
        "description": "cla_backend.apps.legalaid.tests.test_timezones",
        "peekOfCode": "class TestBSTAssignedOutOfHoursTestCase(BaseAssignedOutOfHours, TestCase):\n    dt = timezone.datetime(2021, 5, 5)\nclass TestCommandDateArgument(TestCase):\n    def test_requires_date(self):\n        with self.assertRaisesMessage(CommandError, \"A start date is required\"):\n            call_command(\"recalculate_assigned_out_of_hours\")\n    def test_date_must_be_a_date_string(self):\n        with self.assertRaisesMessage(CommandError, \"The start date should be a valid datetime in yyyy-mm-dd format\"):\n            call_command(\"recalculate_assigned_out_of_hours\", \"last year\")\n    def test_date_must_be_correctly_formatted(self):",
        "detail": "cla_backend.apps.legalaid.tests.test_timezones",
        "documentation": {}
    },
    {
        "label": "TestCommandDateArgument",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_timezones",
        "description": "cla_backend.apps.legalaid.tests.test_timezones",
        "peekOfCode": "class TestCommandDateArgument(TestCase):\n    def test_requires_date(self):\n        with self.assertRaisesMessage(CommandError, \"A start date is required\"):\n            call_command(\"recalculate_assigned_out_of_hours\")\n    def test_date_must_be_a_date_string(self):\n        with self.assertRaisesMessage(CommandError, \"The start date should be a valid datetime in yyyy-mm-dd format\"):\n            call_command(\"recalculate_assigned_out_of_hours\", \"last year\")\n    def test_date_must_be_correctly_formatted(self):\n        with self.assertRaisesMessage(CommandError, \"The start date should be a valid datetime in yyyy-mm-dd format\"):\n            call_command(\"recalculate_assigned_out_of_hours\", \"2021-30-06\")",
        "detail": "cla_backend.apps.legalaid.tests.test_timezones",
        "documentation": {}
    },
    {
        "label": "TestRecalculateAssignedOutOfHours",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_timezones",
        "description": "cla_backend.apps.legalaid.tests.test_timezones",
        "peekOfCode": "class TestRecalculateAssignedOutOfHours(TestCase):\n    dt = \"2020-04-01\"\n    def setUp(self, *args, **kwargs):\n        self.provider = make_recipe(\"cla_provider.provider\")\n        self.category = make_recipe(\"legalaid.category\", code=\"education\")\n        super(TestRecalculateAssignedOutOfHours, self).setUp()\n    def create(self, year, month, day, hour, minute, out_of_hours):\n        assigned_at = timezone.datetime(year, month, day, hour, minute)\n        case = make_recipe(\n            \"legalaid.case\",",
        "detail": "cla_backend.apps.legalaid.tests.test_timezones",
        "documentation": {}
    },
    {
        "label": "SlaCustomBusinessHoursTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_utils",
        "description": "cla_backend.apps.legalaid.tests.test_utils",
        "peekOfCode": "class SlaCustomBusinessHoursTestCase(TestCase):\n    year = 2020\n    xmas_eve = date(year=year, month=12, day=24)\n    xmas_eve_before_hours = datetime.combine(xmas_eve, time(hour=8, minute=59))\n    xmas_eve_noon = datetime.combine(xmas_eve, time(hour=12))\n    xmas_eve_last_minute = datetime.combine(xmas_eve, time(hour=16, minute=29))\n    xmas_eve_after_hours = datetime.combine(xmas_eve, time(hour=18))\n    new_years_eve = date(year=year, month=12, day=31)\n    new_years_eve_before_hours = datetime.combine(new_years_eve, time(hour=8, minute=59))\n    new_years_eve_noon = datetime.combine(new_years_eve, time(hour=12))",
        "detail": "cla_backend.apps.legalaid.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "FullCaseViewSetTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.tests.test_views",
        "description": "cla_backend.apps.legalaid.tests.test_views",
        "peekOfCode": "class FullCaseViewSetTestCase(CLAOperatorAuthBaseApiTestMixin, TestCase):\n    def setUp(self):\n        super(FullCaseViewSetTestCase, self).setUp()\n        self.url = reverse(\"call_centre:case-list\")\n    def test_search_unicode(self):\n        response = self.client.get(\n            self.url + \"?search=Mark%20O%E2%80%99Brien\", HTTP_AUTHORIZATION=\"Bearer %s\" % self.operator_manager_token\n        )\n        self.assertEqual(response.status_code, 200)\n    def test_search_ascii(self):",
        "detail": "cla_backend.apps.legalaid.tests.test_views",
        "documentation": {}
    },
    {
        "label": "SERVICE_ADAPTATIONS",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "description": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "peekOfCode": "SERVICE_ADAPTATIONS = {\n    u\"CBI\",\n    u\"LLI\",\n    u\"BSL\",\n    u\"MIN\",\n    u\"TYP\",\n    u\"SWC\",\n    u\"OAD\",\n    u\"TPC\",\n    u\"TAF\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "documentation": {}
    },
    {
        "label": "EXEMPTION_CODES",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "description": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "peekOfCode": "EXEMPTION_CODES = {u\"ECHI\", u\"EDET\", u\"EPRE\"}\nDISABILITY_INDICATOR = {\n    u\"NCD\",\n    u\"MHC\",\n    u\"LDD\",\n    u\"ILL\",\n    u\"OTH\",\n    u\"UKN\",\n    u\"MOB\",\n    u\"DEA\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "documentation": {}
    },
    {
        "label": "DISABILITY_INDICATOR",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "description": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "peekOfCode": "DISABILITY_INDICATOR = {\n    u\"NCD\",\n    u\"MHC\",\n    u\"LDD\",\n    u\"ILL\",\n    u\"OTH\",\n    u\"UKN\",\n    u\"MOB\",\n    u\"DEA\",\n    u\"HEA\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "documentation": {}
    },
    {
        "label": "ADVICE_TYPES",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "description": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "peekOfCode": "ADVICE_TYPES = {u\"TA\", u\"OA\", u\"FF\"}\nAGE_RANGE = {u\"A\", u\"B\", u\"C\", u\"D\", u\"E\", u\"F\", u\"G\", u\"U\"}\nELIGIBILITY_CODES = {u\"S\", u\"T\", u\"V\", u\"W\", u\"X\", u\"Z\"}\nPREFIX_CATEGORY_LOOKUP = {\n    u\"D\": u\"debt\",\n    u\"W\": u\"welfare\",\n    u\"H\": u\"housing\",\n    u\"F\": u\"family\",\n    u\"E\": u\"education\",\n    u\"Q\": u\"discrimination\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "documentation": {}
    },
    {
        "label": "AGE_RANGE",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "description": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "peekOfCode": "AGE_RANGE = {u\"A\", u\"B\", u\"C\", u\"D\", u\"E\", u\"F\", u\"G\", u\"U\"}\nELIGIBILITY_CODES = {u\"S\", u\"T\", u\"V\", u\"W\", u\"X\", u\"Z\"}\nPREFIX_CATEGORY_LOOKUP = {\n    u\"D\": u\"debt\",\n    u\"W\": u\"welfare\",\n    u\"H\": u\"housing\",\n    u\"F\": u\"family\",\n    u\"E\": u\"education\",\n    u\"Q\": u\"discrimination\",\n}",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "documentation": {}
    },
    {
        "label": "ELIGIBILITY_CODES",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "description": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "peekOfCode": "ELIGIBILITY_CODES = {u\"S\", u\"T\", u\"V\", u\"W\", u\"X\", u\"Z\"}\nPREFIX_CATEGORY_LOOKUP = {\n    u\"D\": u\"debt\",\n    u\"W\": u\"welfare\",\n    u\"H\": u\"housing\",\n    u\"F\": u\"family\",\n    u\"E\": u\"education\",\n    u\"Q\": u\"discrimination\",\n}\nSTAGE_REACHED_REQUIRED_MT1S = {",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "documentation": {}
    },
    {
        "label": "PREFIX_CATEGORY_LOOKUP",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "description": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "peekOfCode": "PREFIX_CATEGORY_LOOKUP = {\n    u\"D\": u\"debt\",\n    u\"W\": u\"welfare\",\n    u\"H\": u\"housing\",\n    u\"F\": u\"family\",\n    u\"E\": u\"education\",\n    u\"Q\": u\"discrimination\",\n}\nSTAGE_REACHED_REQUIRED_MT1S = {\n    u\"DMCA\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "documentation": {}
    },
    {
        "label": "STAGE_REACHED_REQUIRED_MT1S",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "description": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "peekOfCode": "STAGE_REACHED_REQUIRED_MT1S = {\n    u\"DMCA\",\n    u\"DMAP\",\n    u\"DIVB\",\n    u\"DORH\",\n    u\"DTOT\",\n    u\"QPRO\",\n    u\"QEMP\",\n    u\"QEQP\",\n    u\"QPRE\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "documentation": {}
    },
    {
        "label": "STAGE_REACHED_NOT_ALLOWED_MT1S",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "description": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "peekOfCode": "STAGE_REACHED_NOT_ALLOWED_MT1S = {\n    u\"WDLA\",\n    u\"WBAA\",\n    u\"WICB\",\n    u\"WSFP\",\n    u\"WHBT\",\n    u\"WIST\",\n    u\"WJSA\",\n    u\"WIIB\",\n    u\"WBBT\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "documentation": {}
    },
    {
        "label": "POSTCODE_RE",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "description": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "peekOfCode": "POSTCODE_RE = r\"\"\"(?: # UK POSTCODE\n    ( G[I1]R \\s* [0O]AA | NFA | INT \\s INT )           # special postcode\n  |\n    ( [A-PR-UWYZ01][A-Z01]? )       # area\n    ( [0-9IO][0-9A-HJKMNPR-YIO]? )  # district\n    (?: \\s*\n      ( [0-9IO] )                   # sector\n      ( [ABD-HJLNPQ-Z10]{2} )       # unit\n    )\n)$\"\"\"",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.constants",
        "documentation": {}
    },
    {
        "label": "get_all_values_across_categories",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "def get_all_values_across_categories(key, applicable_contract):\n    category_spec = contract_2013_category_spec\n    if applicable_contract == CONTRACT_EIGHTEEN:\n        category_spec = contract_2018_category_spec\n    return list(itertools.chain.from_iterable([spec[key] for _, spec in category_spec.items()]))\ndef get_valid_outcomes(applicable_contract):\n    return get_all_values_across_categories(\"OUTCOME_CODES\", applicable_contract)\ndef get_valid_stage_reached(applicable_contract):\n    return get_all_values_across_categories(\"STAGE_REACHED\", applicable_contract)\ndef get_valid_matter_type1(applicable_contract):",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "get_valid_outcomes",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "def get_valid_outcomes(applicable_contract):\n    return get_all_values_across_categories(\"OUTCOME_CODES\", applicable_contract)\ndef get_valid_stage_reached(applicable_contract):\n    return get_all_values_across_categories(\"STAGE_REACHED\", applicable_contract)\ndef get_valid_matter_type1(applicable_contract):\n    return get_all_values_across_categories(\"MATTER_TYPE1\", applicable_contract)\ndef get_valid_matter_type2(applicable_contract):\n    return get_all_values_across_categories(\"MATTER_TYPE2\", applicable_contract)\ndef get_determination_codes(applicable_contract):\n    if applicable_contract == CONTRACT_EIGHTEEN:",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "get_valid_stage_reached",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "def get_valid_stage_reached(applicable_contract):\n    return get_all_values_across_categories(\"STAGE_REACHED\", applicable_contract)\ndef get_valid_matter_type1(applicable_contract):\n    return get_all_values_across_categories(\"MATTER_TYPE1\", applicable_contract)\ndef get_valid_matter_type2(applicable_contract):\n    return get_all_values_across_categories(\"MATTER_TYPE2\", applicable_contract)\ndef get_determination_codes(applicable_contract):\n    if applicable_contract == CONTRACT_EIGHTEEN:\n        return contract_2018_determination_codes\n    return contract_2013_determination_codes",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "get_valid_matter_type1",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "def get_valid_matter_type1(applicable_contract):\n    return get_all_values_across_categories(\"MATTER_TYPE1\", applicable_contract)\ndef get_valid_matter_type2(applicable_contract):\n    return get_all_values_across_categories(\"MATTER_TYPE2\", applicable_contract)\ndef get_determination_codes(applicable_contract):\n    if applicable_contract == CONTRACT_EIGHTEEN:\n        return contract_2018_determination_codes\n    return contract_2013_determination_codes\ndef get_applicable_contract(case_date_opened, case_matter_type_1=None):\n    if not settings.CONTRACT_2018_ENABLED:",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "get_valid_matter_type2",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "def get_valid_matter_type2(applicable_contract):\n    return get_all_values_across_categories(\"MATTER_TYPE2\", applicable_contract)\ndef get_determination_codes(applicable_contract):\n    if applicable_contract == CONTRACT_EIGHTEEN:\n        return contract_2018_determination_codes\n    return contract_2013_determination_codes\ndef get_applicable_contract(case_date_opened, case_matter_type_1=None):\n    if not settings.CONTRACT_2018_ENABLED:\n        return CONTRACT_THIRTEEN\n    try:",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "get_determination_codes",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "def get_determination_codes(applicable_contract):\n    if applicable_contract == CONTRACT_EIGHTEEN:\n        return contract_2018_determination_codes\n    return contract_2013_determination_codes\ndef get_applicable_contract(case_date_opened, case_matter_type_1=None):\n    if not settings.CONTRACT_2018_ENABLED:\n        return CONTRACT_THIRTEEN\n    try:\n        if CONTRACT_THIRTEEN_START_DATE <= case_date_opened < CONTRACT_THIRTEEN_END_DATE:\n            return CONTRACT_THIRTEEN",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "get_applicable_contract",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "def get_applicable_contract(case_date_opened, case_matter_type_1=None):\n    if not settings.CONTRACT_2018_ENABLED:\n        return CONTRACT_THIRTEEN\n    try:\n        if CONTRACT_THIRTEEN_START_DATE <= case_date_opened < CONTRACT_THIRTEEN_END_DATE:\n            return CONTRACT_THIRTEEN\n        elif case_date_opened >= CONTRACT_EIGHTEEN_START_DATE:\n            if case_matter_type_1 in contract_2018_category_spec[\"discrimination\"][\"MATTER_TYPE1\"]:\n                return CONTRACT_EIGHTEEN_DISCRIMINATION\n            elif case_matter_type_1 in contract_2018_category_spec[u\"education\"][\"MATTER_TYPE1\"]:",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "CONTRACT_THIRTEEN",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "CONTRACT_THIRTEEN = \"2013\"\nCONTRACT_EIGHTEEN = \"2018\"\nCONTRACT_EIGHTEEN_DISCRIMINATION = \"2018-discrimination\"\nCONTRACT_EIGHTEEN_EDUCATION = \"2018-education\"\nCONTRACT_THIRTEEN_START_DATE = datetime(year=2013, month=4, day=1)\nCONTRACT_THIRTEEN_END_DATE = datetime(year=2018, month=9, day=1)\nCONTRACT_EIGHTEEN_START_DATE = CONTRACT_THIRTEEN_END_DATE\ncontract_2013_determination_codes = {u\"OOSC\", u\"OSPF\", u\"CHNM\", u\"FINI\", u\"DVCA\"}\ncontract_2018_determination_codes = copy(contract_2013_determination_codes) | {\"FAFA\", \"EXEM\"}\ncontract_2018_signposting_codes = {u\"OOSC\", u\"TANA\", u\"OSPF\", u\"CHNM\", u\"FINI\", u\"FREP\", u\"LREP\"}",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "CONTRACT_EIGHTEEN",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "CONTRACT_EIGHTEEN = \"2018\"\nCONTRACT_EIGHTEEN_DISCRIMINATION = \"2018-discrimination\"\nCONTRACT_EIGHTEEN_EDUCATION = \"2018-education\"\nCONTRACT_THIRTEEN_START_DATE = datetime(year=2013, month=4, day=1)\nCONTRACT_THIRTEEN_END_DATE = datetime(year=2018, month=9, day=1)\nCONTRACT_EIGHTEEN_START_DATE = CONTRACT_THIRTEEN_END_DATE\ncontract_2013_determination_codes = {u\"OOSC\", u\"OSPF\", u\"CHNM\", u\"FINI\", u\"DVCA\"}\ncontract_2018_determination_codes = copy(contract_2013_determination_codes) | {\"FAFA\", \"EXEM\"}\ncontract_2018_signposting_codes = {u\"OOSC\", u\"TANA\", u\"OSPF\", u\"CHNM\", u\"FINI\", u\"FREP\", u\"LREP\"}\ncontract_2018_fixed_fee_codes = {u\"DF\", u\"HF\", u\"LF\", u\"MR\", u\"HM\", u\"NA\", u\"HR\"}",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "CONTRACT_EIGHTEEN_DISCRIMINATION",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "CONTRACT_EIGHTEEN_DISCRIMINATION = \"2018-discrimination\"\nCONTRACT_EIGHTEEN_EDUCATION = \"2018-education\"\nCONTRACT_THIRTEEN_START_DATE = datetime(year=2013, month=4, day=1)\nCONTRACT_THIRTEEN_END_DATE = datetime(year=2018, month=9, day=1)\nCONTRACT_EIGHTEEN_START_DATE = CONTRACT_THIRTEEN_END_DATE\ncontract_2013_determination_codes = {u\"OOSC\", u\"OSPF\", u\"CHNM\", u\"FINI\", u\"DVCA\"}\ncontract_2018_determination_codes = copy(contract_2013_determination_codes) | {\"FAFA\", \"EXEM\"}\ncontract_2018_signposting_codes = {u\"OOSC\", u\"TANA\", u\"OSPF\", u\"CHNM\", u\"FINI\", u\"FREP\", u\"LREP\"}\ncontract_2018_fixed_fee_codes = {u\"DF\", u\"HF\", u\"LF\", u\"MR\", u\"HM\", u\"NA\", u\"HR\"}\ncontact_2018_outcome_codes_requiring_signposting_code = {",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "CONTRACT_EIGHTEEN_EDUCATION",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "CONTRACT_EIGHTEEN_EDUCATION = \"2018-education\"\nCONTRACT_THIRTEEN_START_DATE = datetime(year=2013, month=4, day=1)\nCONTRACT_THIRTEEN_END_DATE = datetime(year=2018, month=9, day=1)\nCONTRACT_EIGHTEEN_START_DATE = CONTRACT_THIRTEEN_END_DATE\ncontract_2013_determination_codes = {u\"OOSC\", u\"OSPF\", u\"CHNM\", u\"FINI\", u\"DVCA\"}\ncontract_2018_determination_codes = copy(contract_2013_determination_codes) | {\"FAFA\", \"EXEM\"}\ncontract_2018_signposting_codes = {u\"OOSC\", u\"TANA\", u\"OSPF\", u\"CHNM\", u\"FINI\", u\"FREP\", u\"LREP\"}\ncontract_2018_fixed_fee_codes = {u\"DF\", u\"HF\", u\"LF\", u\"MR\", u\"HM\", u\"NA\", u\"HR\"}\ncontact_2018_outcome_codes_requiring_signposting_code = {\n    u\"DU\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "CONTRACT_THIRTEEN_START_DATE",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "CONTRACT_THIRTEEN_START_DATE = datetime(year=2013, month=4, day=1)\nCONTRACT_THIRTEEN_END_DATE = datetime(year=2018, month=9, day=1)\nCONTRACT_EIGHTEEN_START_DATE = CONTRACT_THIRTEEN_END_DATE\ncontract_2013_determination_codes = {u\"OOSC\", u\"OSPF\", u\"CHNM\", u\"FINI\", u\"DVCA\"}\ncontract_2018_determination_codes = copy(contract_2013_determination_codes) | {\"FAFA\", \"EXEM\"}\ncontract_2018_signposting_codes = {u\"OOSC\", u\"TANA\", u\"OSPF\", u\"CHNM\", u\"FINI\", u\"FREP\", u\"LREP\"}\ncontract_2018_fixed_fee_codes = {u\"DF\", u\"HF\", u\"LF\", u\"MR\", u\"HM\", u\"NA\", u\"HR\"}\ncontact_2018_outcome_codes_requiring_signposting_code = {\n    u\"DU\",\n    u\"DV\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "CONTRACT_THIRTEEN_END_DATE",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "CONTRACT_THIRTEEN_END_DATE = datetime(year=2018, month=9, day=1)\nCONTRACT_EIGHTEEN_START_DATE = CONTRACT_THIRTEEN_END_DATE\ncontract_2013_determination_codes = {u\"OOSC\", u\"OSPF\", u\"CHNM\", u\"FINI\", u\"DVCA\"}\ncontract_2018_determination_codes = copy(contract_2013_determination_codes) | {\"FAFA\", \"EXEM\"}\ncontract_2018_signposting_codes = {u\"OOSC\", u\"TANA\", u\"OSPF\", u\"CHNM\", u\"FINI\", u\"FREP\", u\"LREP\"}\ncontract_2018_fixed_fee_codes = {u\"DF\", u\"HF\", u\"LF\", u\"MR\", u\"HM\", u\"NA\", u\"HR\"}\ncontact_2018_outcome_codes_requiring_signposting_code = {\n    u\"DU\",\n    u\"DV\",\n    u\"DW\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "CONTRACT_EIGHTEEN_START_DATE",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "CONTRACT_EIGHTEEN_START_DATE = CONTRACT_THIRTEEN_END_DATE\ncontract_2013_determination_codes = {u\"OOSC\", u\"OSPF\", u\"CHNM\", u\"FINI\", u\"DVCA\"}\ncontract_2018_determination_codes = copy(contract_2013_determination_codes) | {\"FAFA\", \"EXEM\"}\ncontract_2018_signposting_codes = {u\"OOSC\", u\"TANA\", u\"OSPF\", u\"CHNM\", u\"FINI\", u\"FREP\", u\"LREP\"}\ncontract_2018_fixed_fee_codes = {u\"DF\", u\"HF\", u\"LF\", u\"MR\", u\"HM\", u\"NA\", u\"HR\"}\ncontact_2018_outcome_codes_requiring_signposting_code = {\n    u\"DU\",\n    u\"DV\",\n    u\"DW\",\n    u\"QU\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "contract_2013_determination_codes",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "contract_2013_determination_codes = {u\"OOSC\", u\"OSPF\", u\"CHNM\", u\"FINI\", u\"DVCA\"}\ncontract_2018_determination_codes = copy(contract_2013_determination_codes) | {\"FAFA\", \"EXEM\"}\ncontract_2018_signposting_codes = {u\"OOSC\", u\"TANA\", u\"OSPF\", u\"CHNM\", u\"FINI\", u\"FREP\", u\"LREP\"}\ncontract_2018_fixed_fee_codes = {u\"DF\", u\"HF\", u\"LF\", u\"MR\", u\"HM\", u\"NA\", u\"HR\"}\ncontact_2018_outcome_codes_requiring_signposting_code = {\n    u\"DU\",\n    u\"DV\",\n    u\"DW\",\n    u\"QU\",\n    u\"QV\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "contract_2018_determination_codes",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "contract_2018_determination_codes = copy(contract_2013_determination_codes) | {\"FAFA\", \"EXEM\"}\ncontract_2018_signposting_codes = {u\"OOSC\", u\"TANA\", u\"OSPF\", u\"CHNM\", u\"FINI\", u\"FREP\", u\"LREP\"}\ncontract_2018_fixed_fee_codes = {u\"DF\", u\"HF\", u\"LF\", u\"MR\", u\"HM\", u\"NA\", u\"HR\"}\ncontact_2018_outcome_codes_requiring_signposting_code = {\n    u\"DU\",\n    u\"DV\",\n    u\"DW\",\n    u\"QU\",\n    u\"QV\",\n    u\"QW\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "contract_2018_signposting_codes",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "contract_2018_signposting_codes = {u\"OOSC\", u\"TANA\", u\"OSPF\", u\"CHNM\", u\"FINI\", u\"FREP\", u\"LREP\"}\ncontract_2018_fixed_fee_codes = {u\"DF\", u\"HF\", u\"LF\", u\"MR\", u\"HM\", u\"NA\", u\"HR\"}\ncontact_2018_outcome_codes_requiring_signposting_code = {\n    u\"DU\",\n    u\"DV\",\n    u\"DW\",\n    u\"QU\",\n    u\"QV\",\n    u\"QW\",\n    u\"EU\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "contract_2018_fixed_fee_codes",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "contract_2018_fixed_fee_codes = {u\"DF\", u\"HF\", u\"LF\", u\"MR\", u\"HM\", u\"NA\", u\"HR\"}\ncontact_2018_outcome_codes_requiring_signposting_code = {\n    u\"DU\",\n    u\"DV\",\n    u\"DW\",\n    u\"QU\",\n    u\"QV\",\n    u\"QW\",\n    u\"EU\",\n    u\"EV\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "contact_2018_outcome_codes_requiring_signposting_code",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "contact_2018_outcome_codes_requiring_signposting_code = {\n    u\"DU\",\n    u\"DV\",\n    u\"DW\",\n    u\"QU\",\n    u\"QV\",\n    u\"QW\",\n    u\"EU\",\n    u\"EV\",\n    u\"EW\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "debt_category_spec",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "debt_category_spec = {\n    \"OUTCOME_CODES\": {u\"DA\", u\"DC\", u\"DD\", u\"DG\", u\"DH\", u\"DI\", u\"DU\", u\"DV\", u\"DW\", u\"DX\", u\"DY\", u\"DZ\"},\n    \"MATTER_TYPE1\": {u\"DPDE\", u\"DNPD\", u\"DMDE\", u\"DMCA\", u\"DMAP\", u\"DIVB\", u\"DORH\", u\"DTOT\"},\n    \"MATTER_TYPE2\": {u\"DVAL\", u\"DMIX\", u\"DCRE\", u\"DIBP\", u\"DORD\", u\"DOTH\", u\"DSCH\"},\n    \"STAGE_REACHED\": {u\"DA\", u\"DB\", u\"DC\", u\"DD\"},\n}\ndiscrimination_category_spec = {\n    \"OUTCOME_CODES\": {\n        u\"QA\",\n        u\"QB\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "discrimination_category_spec",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "discrimination_category_spec = {\n    \"OUTCOME_CODES\": {\n        u\"QA\",\n        u\"QB\",\n        u\"QC\",\n        u\"QD\",\n        u\"QE\",\n        u\"QF\",\n        u\"QG\",\n        u\"QH\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "education_category_spec",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "education_category_spec = {\n    \"OUTCOME_CODES\": {\n        u\"EA\",\n        u\"EB\",\n        u\"EC\",\n        u\"ED\",\n        u\"EE\",\n        u\"EF\",\n        u\"EG\",\n        u\"EH\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "family_category_spec",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "family_category_spec = {\n    \"OUTCOME_CODES\": {\n        u\"FA\",\n        u\"FB\",\n        u\"FC\",\n        u\"FD\",\n        u\"FE\",\n        u\"FF\",\n        u\"FG\",\n        u\"FH\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "housing_category_spec",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "housing_category_spec = {\n    \"OUTCOME_CODES\": {\n        u\"HA\",\n        u\"HD\",\n        u\"HE\",\n        u\"HF\",\n        u\"HG\",\n        u\"HH\",\n        u\"HI\",\n        u\"HJ\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "welfare_category_spec",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "welfare_category_spec = {\n    \"OUTCOME_CODES\": {u\"WA\", u\"WB\", u\"WC\", u\"WD\", u\"WE\", u\"WG\", u\"WU\", u\"WV\", u\"WZ\"},\n    \"MATTER_TYPE1\": {\n        u\"WDLA\",\n        u\"WBAA\",\n        u\"WICB\",\n        u\"WSFP\",\n        u\"WHBT\",\n        u\"WIST\",\n        u\"WJSA\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "contract_2013_category_spec",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "contract_2013_category_spec = {\n    u\"debt\": deepcopy(debt_category_spec),\n    u\"discrimination\": deepcopy(discrimination_category_spec),\n    u\"education\": deepcopy(education_category_spec),\n    u\"family\": deepcopy(family_category_spec),\n    u\"housing\": deepcopy(housing_category_spec),\n    u\"welfare\": deepcopy(welfare_category_spec),\n}\ndiscrimination_category_spec[\"OUTCOME_CODES\"].update({u\"QAA\"})\nfamily_category_spec[\"OUTCOME_CODES\"].update({u\"FAA\", u\"FAB\", u\"FAC\"})",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "contract_2018_category_spec",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "description": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "peekOfCode": "contract_2018_category_spec = {\n    u\"debt\": deepcopy(debt_category_spec),\n    u\"discrimination\": deepcopy(discrimination_category_spec),\n    u\"education\": deepcopy(education_category_spec),\n    u\"family\": deepcopy(family_category_spec),\n    u\"housing\": deepcopy(housing_category_spec),\n    u\"welfare\": deepcopy(welfare_category_spec),\n}\ndef get_all_values_across_categories(key, applicable_contract):\n    category_spec = contract_2013_category_spec",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.contracts",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "class depends_on(object):\n    \"\"\"\n    A decorator to run a function if and only if the\n    second arg passed to that function contains a key\n    that passes a check.\n    >>> d = {'a': True}\n    >>> class A(object):\n    >>>     @depends_on('a', check=value_is_truthy)\n    >>>     def do_something(self, d):\n    >>>         return 1",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "ProviderCSVValidator",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "class ProviderCSVValidator(object):\n    def __init__(self, rows):\n        self.rows = rows\n        self.cleaned_data = []\n    def _validate_field(self, field_name, field_value, idx, row_num, validators):\n        # Field Validation\n        try:\n            # reduce the validators over the original field value, save\n            # the final value into self.cleaned_data[field_name]\n            cleaned_value = reduce(inverted_reduce, validators, field_value)",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "validate_decimal",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "def validate_decimal(val):\n    if val:\n        try:\n            val = val.replace(u\",\", u\"\")\n            val = Decimal(val)\n            return val\n        except (ValueError, InvalidOperation) as ve:\n            raise serializers.ValidationError(str(ve))\ndef validate_integer(val):\n    if val:",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "validate_integer",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "def validate_integer(val):\n    if val:\n        try:\n            val = int(val)\n            return val\n        except ValueError as ve:\n            raise serializers.ValidationError(str(ve))\ndef validate_gte(minimum):\n    minimum = minimum\n    def _validate_gte(val):",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "validate_gte",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "def validate_gte(minimum):\n    minimum = minimum\n    def _validate_gte(val):\n        if val and (val < minimum):\n            raise serializers.ValidationError(\"Field must be >= %s\" % minimum)\n        return val\n    return _validate_gte\ndef validate_present(val, message=None):\n    message = message or \"is required\"\n    if not val:",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "validate_present",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "def validate_present(val, message=None):\n    message = message or \"is required\"\n    if not val:\n        raise serializers.ValidationError(message)\n    return val\ndef validate_date(val):\n    val = val.strip()\n    if val:\n        try:\n            assert date_pattern.match(val)",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "validate_date",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "def validate_date(val):\n    val = val.strip()\n    if val:\n        try:\n            assert date_pattern.match(val)\n            day, month, year = val.split(\"/\")\n            return datetime.datetime(int(year), int(month), int(day))\n        except (ValueError, TypeError, AssertionError):\n            raise serializers.ValidationError(\"%s is not a valid date (DD/MM/YYYY)\" % val)\ndef validate_not_present(val, message=None):",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "validate_not_present",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "def validate_not_present(val, message=None):\n    message = message or \"Field should not be present\"\n    if val and val.strip():\n        raise serializers.ValidationError(message)\n    return val\ndef validate_not_current_month(val):\n    if val:\n        now = datetime.datetime.now().replace(day=1).date()\n        val_month = val.replace(day=1).date()\n        if now == val_month:",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "validate_not_current_month",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "def validate_not_current_month(val):\n    if val:\n        now = datetime.datetime.now().replace(day=1).date()\n        val_month = val.replace(day=1).date()\n        if now == val_month:\n            raise serializers.ValidationError(\"Date (%s) must not be from current month\" % val.date())\n    return val\ndef validate_regex(regex, flags=None):\n    compiled_re = re.compile(regex, flags)\n    def _validate_regex(val):",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "validate_regex",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "def validate_regex(regex, flags=None):\n    compiled_re = re.compile(regex, flags)\n    def _validate_regex(val):\n        if val and (not compiled_re.match(val)):\n            raise serializers.ValidationError(\"Field value (%s) doesn't match pattern: %s\" % (val, regex))\n        return val\n    return _validate_regex\nvalidate_postcode = validate_regex(POSTCODE_RE, flags=re.VERBOSE | re.I)\ndef validate_in(iterable):\n    def _validate_in(val):",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "validate_in",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "def validate_in(iterable):\n    def _validate_in(val):\n        if val and (val not in iterable):\n            raise serializers.ValidationError(\"%s must be one of %s\" % (val, \", \".join(iterable)))\n        return val\n    return _validate_in\ndef inverted_reduce(x, f):\n    return f(x)\ndef value_is_truthy(x):\n    return bool(x)",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "inverted_reduce",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "def inverted_reduce(x, f):\n    return f(x)\ndef value_is_truthy(x):\n    return bool(x)\ndef value_is_falsey(x):\n    return not bool(x)\ndef value_not_equal(x):\n    return lambda y: x != y\ndef value_is_date_after_apr_2013(x):\n    return x and x > datetime.datetime(2013, 4, 1)",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "value_is_truthy",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "def value_is_truthy(x):\n    return bool(x)\ndef value_is_falsey(x):\n    return not bool(x)\ndef value_not_equal(x):\n    return lambda y: x != y\ndef value_is_date_after_apr_2013(x):\n    return x and x > datetime.datetime(2013, 4, 1)\nclass depends_on(object):\n    \"\"\"",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "value_is_falsey",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "def value_is_falsey(x):\n    return not bool(x)\ndef value_not_equal(x):\n    return lambda y: x != y\ndef value_is_date_after_apr_2013(x):\n    return x and x > datetime.datetime(2013, 4, 1)\nclass depends_on(object):\n    \"\"\"\n    A decorator to run a function if and only if the\n    second arg passed to that function contains a key",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "value_not_equal",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "def value_not_equal(x):\n    return lambda y: x != y\ndef value_is_date_after_apr_2013(x):\n    return x and x > datetime.datetime(2013, 4, 1)\nclass depends_on(object):\n    \"\"\"\n    A decorator to run a function if and only if the\n    second arg passed to that function contains a key\n    that passes a check.\n    >>> d = {'a': True}",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "value_is_date_after_apr_2013",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "def value_is_date_after_apr_2013(x):\n    return x and x > datetime.datetime(2013, 4, 1)\nclass depends_on(object):\n    \"\"\"\n    A decorator to run a function if and only if the\n    second arg passed to that function contains a key\n    that passes a check.\n    >>> d = {'a': True}\n    >>> class A(object):\n    >>>     @depends_on('a', check=value_is_truthy)",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "excel_col_name",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "def excel_col_name(col):  # col is 1 based\n    excel_col = \"\"\n    div = col\n    while div:\n        (div, mod) = divmod(div - 1, 26)  # will return (x, 0 .. 25)\n        excel_col = chr(mod + 65) + excel_col\n    return excel_col\naccount_number_regex_validator = validate_regex(r\"\\d{1}[a-z]{1}\\d{3}[a-z]{1}\", flags=re.IGNORECASE)\nvalidators = {\n    \"CLA Reference Number\": [validate_present, validate_integer],",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndate_pattern = re.compile(\"^[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}$\")\ndef validate_decimal(val):\n    if val:\n        try:\n            val = val.replace(u\",\", u\"\")\n            val = Decimal(val)\n            return val\n        except (ValueError, InvalidOperation) as ve:\n            raise serializers.ValidationError(str(ve))",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "date_pattern",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "date_pattern = re.compile(\"^[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}$\")\ndef validate_decimal(val):\n    if val:\n        try:\n            val = val.replace(u\",\", u\"\")\n            val = Decimal(val)\n            return val\n        except (ValueError, InvalidOperation) as ve:\n            raise serializers.ValidationError(str(ve))\ndef validate_integer(val):",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "validate_postcode",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "validate_postcode = validate_regex(POSTCODE_RE, flags=re.VERBOSE | re.I)\ndef validate_in(iterable):\n    def _validate_in(val):\n        if val and (val not in iterable):\n            raise serializers.ValidationError(\"%s must be one of %s\" % (val, \", \".join(iterable)))\n        return val\n    return _validate_in\ndef inverted_reduce(x, f):\n    return f(x)\ndef value_is_truthy(x):",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "account_number_regex_validator",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "account_number_regex_validator = validate_regex(r\"\\d{1}[a-z]{1}\\d{3}[a-z]{1}\", flags=re.IGNORECASE)\nvalidators = {\n    \"CLA Reference Number\": [validate_present, validate_integer],\n    \"Client Ref\": [validate_present],\n    \"Account Number\": [validate_present, account_number_regex_validator],\n    \"First Name\": [validate_present],\n    \"Surname\": [validate_present],\n    \"DOB\": [validate_date],\n    \"Age Range\": [validate_present, validate_in(AGE_RANGE)],\n    \"Gender\": [validate_present],",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "validators",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "validators = {\n    \"CLA Reference Number\": [validate_present, validate_integer],\n    \"Client Ref\": [validate_present],\n    \"Account Number\": [validate_present, account_number_regex_validator],\n    \"First Name\": [validate_present],\n    \"Surname\": [validate_present],\n    \"DOB\": [validate_date],\n    \"Age Range\": [validate_present, validate_in(AGE_RANGE)],\n    \"Gender\": [validate_present],\n    \"Ethnicity\": [validate_present],",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "original_field_order",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "original_field_order = [\n    \"CLA Reference Number\",\n    \"Client Ref\",\n    \"Account Number\",\n    \"First Name\",\n    \"Surname\",\n    \"DOB\",\n    \"Age Range\",\n    \"Gender\",\n    \"Ethnicity\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "new_field_order_when_contract_2018_enabled",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "new_field_order_when_contract_2018_enabled = [\n    \"CLA Reference Number\",\n    \"Client Ref\",\n    \"Account Number\",\n    \"First Name\",\n    \"Surname\",\n    \"DOB\",\n    \"Age Range\",\n    \"Gender\",\n    \"Ethnicity\",",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "contract_2013_validators_for_original_field_order",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "contract_2013_validators_for_original_field_order = OrderedDict()\nfor field in original_field_order:\n    contract_2013_validators_for_original_field_order[field] = deepcopy(validators[field])\n# Slightly amend our validators for 2013 contracts when the new CONTRACT_2018_ENABLED field order applies and take copy.\ncontract_2013_validators_for_new_field_order = OrderedDict()\nvalidators.update({\"Fixed Fee Amount\": [], \"Fixed Fee Code\": [validate_in([u\"NA\"])]})\nfor field in new_field_order_when_contract_2018_enabled:\n    contract_2013_validators_for_new_field_order[field] = deepcopy(validators[field])\n# Amend validators for 2018 contract cases and take copy. Only used when CONTRACT_2018_ENABLED setting is True.\ncontract_2018_validators_for_new_field_order = OrderedDict()",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "contract_2013_validators_for_new_field_order",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "contract_2013_validators_for_new_field_order = OrderedDict()\nvalidators.update({\"Fixed Fee Amount\": [], \"Fixed Fee Code\": [validate_in([u\"NA\"])]})\nfor field in new_field_order_when_contract_2018_enabled:\n    contract_2013_validators_for_new_field_order[field] = deepcopy(validators[field])\n# Amend validators for 2018 contract cases and take copy. Only used when CONTRACT_2018_ENABLED setting is True.\ncontract_2018_validators_for_new_field_order = OrderedDict()\nvalidators.update(\n    {\n        \"Matter Type 1\": [validate_present, validate_in(get_valid_matter_type1(CONTRACT_EIGHTEEN))],\n        \"Matter Type 2\": [validate_present, validate_in(get_valid_matter_type2(CONTRACT_EIGHTEEN))],",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "contract_2018_validators_for_new_field_order",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "description": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "peekOfCode": "contract_2018_validators_for_new_field_order = OrderedDict()\nvalidators.update(\n    {\n        \"Matter Type 1\": [validate_present, validate_in(get_valid_matter_type1(CONTRACT_EIGHTEEN))],\n        \"Matter Type 2\": [validate_present, validate_in(get_valid_matter_type2(CONTRACT_EIGHTEEN))],\n        \"Stage Reached\": [validate_in(get_valid_stage_reached(CONTRACT_EIGHTEEN))],\n        \"Outcome Code\": [],\n        \"Determination\": [validate_in(get_determination_codes(CONTRACT_EIGHTEEN))],\n        \"Fixed Fee Amount\": [validate_decimal, validate_gte(0)],\n        \"Fixed Fee Code\": [validate_in(contract_2018_fixed_fee_codes)],",
        "detail": "cla_backend.apps.legalaid.utils.csvupload.validators",
        "documentation": {}
    },
    {
        "label": "get_public_key",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.diversity",
        "description": "cla_backend.apps.legalaid.utils.diversity",
        "peekOfCode": "def get_public_key():\n    key = os.environ.get(\"DIVERSITY_PUBLIC_KEY\")\n    if key:\n        return _format_env_key(key)\n    return _read_key_file(os.environ.get(\"DIVERSITY_PUBLIC_KEY_PATH\", _dev_public_key))\ndef get_private_key():\n    key = os.environ.get(\"DIVERSITY_PRIVATE_KEY\")\n    if key:\n        return _format_env_key(key)\n    return _read_key_file(os.environ.get(\"DIVERSITY_PRIVATE_KEY_PATH\", _dev_private_key))",
        "detail": "cla_backend.apps.legalaid.utils.diversity",
        "documentation": {}
    },
    {
        "label": "get_private_key",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.diversity",
        "description": "cla_backend.apps.legalaid.utils.diversity",
        "peekOfCode": "def get_private_key():\n    key = os.environ.get(\"DIVERSITY_PRIVATE_KEY\")\n    if key:\n        return _format_env_key(key)\n    return _read_key_file(os.environ.get(\"DIVERSITY_PRIVATE_KEY_PATH\", _dev_private_key))\ndef save_diversity_data(personal_details_pk, data):\n    json_data = json.dumps(data)\n    cursor = connection.cursor()\n    sql = \"UPDATE {table_name} SET diversity = pgp_pub_encrypt(%s, dearmor(%s)), diversity_modified = %s WHERE id = %s\".format(\n        table_name=PersonalDetails._meta.db_table",
        "detail": "cla_backend.apps.legalaid.utils.diversity",
        "documentation": {}
    },
    {
        "label": "save_diversity_data",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.diversity",
        "description": "cla_backend.apps.legalaid.utils.diversity",
        "peekOfCode": "def save_diversity_data(personal_details_pk, data):\n    json_data = json.dumps(data)\n    cursor = connection.cursor()\n    sql = \"UPDATE {table_name} SET diversity = pgp_pub_encrypt(%s, dearmor(%s)), diversity_modified = %s WHERE id = %s\".format(\n        table_name=PersonalDetails._meta.db_table\n    )\n    cursor.execute(sql, [json_data, get_public_key(), timezone.now(), personal_details_pk])\ndef load_diversity_data(personal_details_pk, passphrase, private_key_override=None):\n    private_key = private_key_override or get_private_key()\n    sql = \"SELECT pgp_pub_decrypt(diversity, dearmor(%s), %s) FROM {table_name} WHERE id = %s\".format(",
        "detail": "cla_backend.apps.legalaid.utils.diversity",
        "documentation": {}
    },
    {
        "label": "load_diversity_data",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.diversity",
        "description": "cla_backend.apps.legalaid.utils.diversity",
        "peekOfCode": "def load_diversity_data(personal_details_pk, passphrase, private_key_override=None):\n    private_key = private_key_override or get_private_key()\n    sql = \"SELECT pgp_pub_decrypt(diversity, dearmor(%s), %s) FROM {table_name} WHERE id = %s\".format(\n        table_name=PersonalDetails._meta.db_table\n    )\n    cursor = connection.cursor()\n    cursor.execute(sql, [private_key, passphrase, personal_details_pk])\n    row = cursor.fetchone()[0]\n    return json.loads(row)\ndef reencrypt(personal_details_pk, previous_private_key, previous_passphrase):",
        "detail": "cla_backend.apps.legalaid.utils.diversity",
        "documentation": {}
    },
    {
        "label": "reencrypt",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.diversity",
        "description": "cla_backend.apps.legalaid.utils.diversity",
        "peekOfCode": "def reencrypt(personal_details_pk, previous_private_key, previous_passphrase):\n    previous_private_key = previous_private_key.replace(\"\\\\n\", \"\\n\")\n    cursor = connection.cursor()\n    sql = \"\"\"UPDATE {table_name} SET diversity = pgp_pub_encrypt(\n    pgp_pub_decrypt(diversity, dearmor(%s), %s),\n    dearmor(%s))\n    WHERE id = %s\n    \"\"\".format(\n        table_name=PersonalDetails._meta.db_table\n    )",
        "detail": "cla_backend.apps.legalaid.utils.diversity",
        "documentation": {}
    },
    {
        "label": "_dev_public_key",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.diversity",
        "description": "cla_backend.apps.legalaid.utils.diversity",
        "peekOfCode": "_dev_public_key = os.path.join(os.path.dirname(__file__), \"keys\", \"diversity_dev_public.key\")\n_dev_private_key = os.path.join(os.path.dirname(__file__), \"keys\", \"diversity_dev_private.key\")\ndef _read_key_file(file_path):\n    with open(file_path) as f:\n        return f.read()\ndef _format_env_key(key):\n    return key.replace(\"\\\\n\", \"\\n\")\ndef get_public_key():\n    key = os.environ.get(\"DIVERSITY_PUBLIC_KEY\")\n    if key:",
        "detail": "cla_backend.apps.legalaid.utils.diversity",
        "documentation": {}
    },
    {
        "label": "_dev_private_key",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.diversity",
        "description": "cla_backend.apps.legalaid.utils.diversity",
        "peekOfCode": "_dev_private_key = os.path.join(os.path.dirname(__file__), \"keys\", \"diversity_dev_private.key\")\ndef _read_key_file(file_path):\n    with open(file_path) as f:\n        return f.read()\ndef _format_env_key(key):\n    return key.replace(\"\\\\n\", \"\\n\")\ndef get_public_key():\n    key = os.environ.get(\"DIVERSITY_PUBLIC_KEY\")\n    if key:\n        return _format_env_key(key)",
        "detail": "cla_backend.apps.legalaid.utils.diversity",
        "documentation": {}
    },
    {
        "label": "is_in_business_hours",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.sla",
        "description": "cla_backend.apps.legalaid.utils.sla",
        "peekOfCode": "def is_in_business_hours(dt):\n    if not dt.tzinfo:\n        dt = timezone.make_aware(dt, timezone.get_default_timezone())\n    return dt in operator_hours\ndef get_remainder_from_end_of_day(day, dt_until):\n    available_slots = operator_hours.time_slots(day)\n    remainder = timedelta(minutes=SLOT_INTERVAL_MINS)\n    if available_slots:\n        end_of_day = available_slots[-1] + timedelta(minutes=SLOT_INTERVAL_MINS)\n        end_of_day = timezone.make_aware(end_of_day, timezone.get_default_timezone())",
        "detail": "cla_backend.apps.legalaid.utils.sla",
        "documentation": {}
    },
    {
        "label": "get_remainder_from_end_of_day",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.sla",
        "description": "cla_backend.apps.legalaid.utils.sla",
        "peekOfCode": "def get_remainder_from_end_of_day(day, dt_until):\n    available_slots = operator_hours.time_slots(day)\n    remainder = timedelta(minutes=SLOT_INTERVAL_MINS)\n    if available_slots:\n        end_of_day = available_slots[-1] + timedelta(minutes=SLOT_INTERVAL_MINS)\n        end_of_day = timezone.make_aware(end_of_day, timezone.get_default_timezone())\n        remainder = dt_until - end_of_day\n    assert remainder >= timedelta(microseconds=0)\n    return remainder\ndef get_next_business_day(start_date):",
        "detail": "cla_backend.apps.legalaid.utils.sla",
        "documentation": {}
    },
    {
        "label": "get_next_business_day",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.sla",
        "description": "cla_backend.apps.legalaid.utils.sla",
        "peekOfCode": "def get_next_business_day(start_date):\n    return filter(lambda x: x.date() > start_date, available_days(365))[0]\ndef get_sla_time(start_time, minutes_delta):\n    time_slots_today = operator_hours.time_slots(start_time.date())\n    end_of_business_day = None\n    if time_slots_today:\n        end_of_business_day = time_slots_today[-1] + timedelta(minutes=SLOT_INTERVAL_MINS)\n        end_of_business_day = timezone.make_aware(end_of_business_day, timezone.get_default_timezone())\n    next_business_day = get_next_business_day(start_time.date())\n    start_of_next_business_day = operator_hours.time_slots(next_business_day.date())[0]",
        "detail": "cla_backend.apps.legalaid.utils.sla",
        "documentation": {}
    },
    {
        "label": "get_sla_time",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.sla",
        "description": "cla_backend.apps.legalaid.utils.sla",
        "peekOfCode": "def get_sla_time(start_time, minutes_delta):\n    time_slots_today = operator_hours.time_slots(start_time.date())\n    end_of_business_day = None\n    if time_slots_today:\n        end_of_business_day = time_slots_today[-1] + timedelta(minutes=SLOT_INTERVAL_MINS)\n        end_of_business_day = timezone.make_aware(end_of_business_day, timezone.get_default_timezone())\n    next_business_day = get_next_business_day(start_time.date())\n    start_of_next_business_day = operator_hours.time_slots(next_business_day.date())[0]\n    start_of_next_business_day = timezone.make_aware(start_of_next_business_day, timezone.get_default_timezone())\n    if not is_in_business_hours(start_time):",
        "detail": "cla_backend.apps.legalaid.utils.sla",
        "documentation": {}
    },
    {
        "label": "get_day_sla_time",
        "kind": 2,
        "importPath": "cla_backend.apps.legalaid.utils.sla",
        "description": "cla_backend.apps.legalaid.utils.sla",
        "peekOfCode": "def get_day_sla_time(start_time, days):\n    sla_time = start_time\n    work_days = 0\n    while work_days < days:\n        sla_time += timedelta(days=1)\n        if not on_sunday(sla_time) and not on_bank_holiday(sla_time):\n            work_days += 1\n    return sla_time",
        "detail": "cla_backend.apps.legalaid.utils.sla",
        "documentation": {}
    },
    {
        "label": "operator_hours",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.utils.sla",
        "description": "cla_backend.apps.legalaid.utils.sla",
        "peekOfCode": "operator_hours = OpeningHours(**OPERATOR_HOURS)\ndef is_in_business_hours(dt):\n    if not dt.tzinfo:\n        dt = timezone.make_aware(dt, timezone.get_default_timezone())\n    return dt in operator_hours\ndef get_remainder_from_end_of_day(day, dt_until):\n    available_slots = operator_hours.time_slots(day)\n    remainder = timedelta(minutes=SLOT_INTERVAL_MINS)\n    if available_slots:\n        end_of_day = available_slots[-1] + timedelta(minutes=SLOT_INTERVAL_MINS)",
        "detail": "cla_backend.apps.legalaid.utils.sla",
        "documentation": {}
    },
    {
        "label": "CategoryModelAdmin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.admin",
        "description": "cla_backend.apps.legalaid.admin",
        "peekOfCode": "class CategoryModelAdmin(admin.ModelAdmin):\n    form = CategoryModelForm\nclass EODDetailsCategoryAdmin(admin.TabularInline):\n    model = EODDetailsCategory\n    readonly_fields = (\"category\", \"is_major\")\n    extra = 0\nclass EODDetailsAdmin(admin.ModelAdmin):\n    inlines = (EODDetailsCategoryAdmin,)\nclass CaseAdmin(admin.ModelAdmin):\n    raw_id_fields = (",
        "detail": "cla_backend.apps.legalaid.admin",
        "documentation": {}
    },
    {
        "label": "EODDetailsCategoryAdmin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.admin",
        "description": "cla_backend.apps.legalaid.admin",
        "peekOfCode": "class EODDetailsCategoryAdmin(admin.TabularInline):\n    model = EODDetailsCategory\n    readonly_fields = (\"category\", \"is_major\")\n    extra = 0\nclass EODDetailsAdmin(admin.ModelAdmin):\n    inlines = (EODDetailsCategoryAdmin,)\nclass CaseAdmin(admin.ModelAdmin):\n    raw_id_fields = (\n        \"eligibility_check\",\n        \"diagnosis\",",
        "detail": "cla_backend.apps.legalaid.admin",
        "documentation": {}
    },
    {
        "label": "EODDetailsAdmin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.admin",
        "description": "cla_backend.apps.legalaid.admin",
        "peekOfCode": "class EODDetailsAdmin(admin.ModelAdmin):\n    inlines = (EODDetailsCategoryAdmin,)\nclass CaseAdmin(admin.ModelAdmin):\n    raw_id_fields = (\n        \"eligibility_check\",\n        \"diagnosis\",\n        \"personal_details\",\n        \"thirdparty_details\",\n        \"adaptation_details\",\n        \"from_case\",",
        "detail": "cla_backend.apps.legalaid.admin",
        "documentation": {}
    },
    {
        "label": "CaseAdmin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.admin",
        "description": "cla_backend.apps.legalaid.admin",
        "peekOfCode": "class CaseAdmin(admin.ModelAdmin):\n    raw_id_fields = (\n        \"eligibility_check\",\n        \"diagnosis\",\n        \"personal_details\",\n        \"thirdparty_details\",\n        \"adaptation_details\",\n        \"from_case\",\n    )\n    readonly_fields = (\"callback_window_type\",)",
        "detail": "cla_backend.apps.legalaid.admin",
        "documentation": {}
    },
    {
        "label": "MeansTestEvent",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.events",
        "description": "cla_backend.apps.legalaid.events",
        "peekOfCode": "class MeansTestEvent(BaseEvent):\n    key = \"means_test\"\n    codes = {\n        \"MT_CREATED\": {\n            \"type\": LOG_TYPES.SYSTEM,\n            \"level\": LOG_LEVELS.HIGH,\n            \"selectable_by\": [],\n            \"description\": \"Means test created\",\n            \"stops_timer\": False,\n        },",
        "detail": "cla_backend.apps.legalaid.events",
        "documentation": {}
    },
    {
        "label": "CaseEvent",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.events",
        "description": "cla_backend.apps.legalaid.events",
        "peekOfCode": "class CaseEvent(BaseEvent):\n    key = \"case\"\n    codes = {\n        \"CASE_CREATED\": {\n            \"type\": LOG_TYPES.SYSTEM,\n            \"level\": LOG_LEVELS.HIGH,\n            \"selectable_by\": [],\n            \"description\": \"Case created\",\n            \"stops_timer\": False,\n        },",
        "detail": "cla_backend.apps.legalaid.events",
        "documentation": {}
    },
    {
        "label": "SuspendCaseEvent",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.events",
        "description": "cla_backend.apps.legalaid.events",
        "peekOfCode": "class SuspendCaseEvent(BaseEvent):\n    key = \"suspend_case\"\n    codes = {\n        \"INSUF\": {\n            \"type\": LOG_TYPES.OUTCOME,\n            \"level\": LOG_LEVELS.HIGH,\n            \"selectable_by\": [LOG_ROLES.OPERATOR],\n            \"description\": \"Not enough info to continue\",\n            \"stops_timer\": True,\n            \"order\": 10,",
        "detail": "cla_backend.apps.legalaid.events",
        "documentation": {}
    },
    {
        "label": "MoneyFieldDRF",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.fields",
        "description": "cla_backend.apps.legalaid.fields",
        "peekOfCode": "class MoneyFieldDRF(Field):\n    def __init__(self, max_value=9999999999, min_value=0, *args, **kwargs):\n        kwargs.setdefault(\"validators\", [])\n        if max_value is not None:\n            kwargs[\"validators\"].append(validators.MaxValueValidator(max_value))\n        if min_value is not None:\n            kwargs[\"validators\"].append(validators.MinValueValidator(min_value))\n        super(MoneyFieldDRF, self).__init__(*args, **kwargs)\n    def to_representation(self, obj):\n        return obj",
        "detail": "cla_backend.apps.legalaid.fields",
        "documentation": {}
    },
    {
        "label": "MoneyField",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.fields",
        "description": "cla_backend.apps.legalaid.fields",
        "peekOfCode": "class MoneyField(models.BigIntegerField):\n    \"\"\"\n    Stores money to nearest penny as integer. e.g. £10.22 would be 1022\n    \"\"\"\n    def __init__(self, max_value=9999999999, min_value=0, *args, **kwargs):\n        # add our validators first because DRF 3.0 only accepts the first validator\n        # see line 152 in rest_framework.utils.field_mapping.get_field_kwargs\n        kwargs.setdefault(\"validators\", [])\n        if max_value is not None:\n            max_validator = validators.MaxValueValidator(max_value)",
        "detail": "cla_backend.apps.legalaid.fields",
        "documentation": {}
    },
    {
        "label": "BaseCallMeBackForm",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.forms",
        "description": "cla_backend.apps.legalaid.forms",
        "peekOfCode": "class BaseCallMeBackForm(BaseCaseLogForm):\n    LOG_EVENT_KEY = \"call_me_back\"\n    def get_requires_action_at(self):\n        raise NotImplementedError()\n    def get_sla_base_time(self, _dt):\n        return timezone.localtime(_dt)\n    def get_context(self):\n        requires_action_at = self.get_requires_action_at()\n        _dt = self.get_sla_base_time(requires_action_at)\n        return {",
        "detail": "cla_backend.apps.legalaid.forms",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.models",
        "description": "cla_backend.apps.legalaid.models",
        "peekOfCode": "class Category(TimeStampedModel):\n    name = models.CharField(max_length=500)\n    code = models.CharField(max_length=50, unique=True)\n    raw_description = models.TextField(blank=True)\n    ecf_available = models.BooleanField(default=False)\n    mandatory = models.BooleanField(default=False)\n    description = models.TextField(blank=True, editable=False)\n    order = models.PositiveIntegerField(default=0)\n    class Meta(object):\n        ordering = [\"order\"]",
        "detail": "cla_backend.apps.legalaid.models",
        "documentation": {}
    },
    {
        "label": "Savings",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.models",
        "description": "cla_backend.apps.legalaid.models",
        "peekOfCode": "class Savings(CloneModelMixin, TimeStampedModel):\n    bank_balance = MoneyField(default=None, null=True, blank=True)\n    investment_balance = MoneyField(default=None, null=True, blank=True)\n    asset_balance = MoneyField(default=None, null=True, blank=True)\n    credit_balance = MoneyField(default=None, null=True, blank=True)\n    cloning_config = {\"excludes\": [\"created\", \"modified\"]}\nclass Income(CloneModelMixin, TimeStampedModel):\n    earnings = MoneyIntervalField(default=None, null=True, blank=True)\n    self_employment_drawings = MoneyIntervalField(default=None, null=True, blank=True)\n    benefits = MoneyIntervalField(default=None, null=True, blank=True)",
        "detail": "cla_backend.apps.legalaid.models",
        "documentation": {}
    },
    {
        "label": "Income",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.models",
        "description": "cla_backend.apps.legalaid.models",
        "peekOfCode": "class Income(CloneModelMixin, TimeStampedModel):\n    earnings = MoneyIntervalField(default=None, null=True, blank=True)\n    self_employment_drawings = MoneyIntervalField(default=None, null=True, blank=True)\n    benefits = MoneyIntervalField(default=None, null=True, blank=True)\n    tax_credits = MoneyIntervalField(default=None, null=True, blank=True)\n    child_benefits = MoneyIntervalField(default=None, null=True, blank=True)\n    maintenance_received = MoneyIntervalField(default=None, null=True, blank=True)\n    pension = MoneyIntervalField(default=None, null=True, blank=True)\n    other_income = MoneyIntervalField(default=None, null=True, blank=True)\n    self_employed = models.NullBooleanField(default=None)",
        "detail": "cla_backend.apps.legalaid.models",
        "documentation": {}
    },
    {
        "label": "Deductions",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.models",
        "description": "cla_backend.apps.legalaid.models",
        "peekOfCode": "class Deductions(CloneModelMixin, TimeStampedModel):\n    income_tax = MoneyIntervalField(default=None, null=True, blank=True)\n    national_insurance = MoneyIntervalField(default=None, null=True, blank=True)\n    maintenance = MoneyIntervalField(default=None, null=True, blank=True)\n    childcare = MoneyIntervalField(default=None, null=True, blank=True)\n    mortgage = MoneyIntervalField(default=None, null=True, blank=True)\n    rent = MoneyIntervalField(default=None, null=True, blank=True)\n    criminal_legalaid_contributions = MoneyField(default=None, null=True, blank=True)\n    cloning_config = {\"excludes\": [\"created\", \"modified\"]}\nclass ContactResearchMethod(CloneModelMixin, TimeStampedModel):",
        "detail": "cla_backend.apps.legalaid.models",
        "documentation": {}
    },
    {
        "label": "ContactResearchMethod",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.models",
        "description": "cla_backend.apps.legalaid.models",
        "peekOfCode": "class ContactResearchMethod(CloneModelMixin, TimeStampedModel):\n    method = models.CharField(max_length=10)\n    reference = UUIDField(auto=True, unique=True)\n    def __unicode__(self):\n        return u\"%s\" % self.method\nclass PersonalDetails(CloneModelMixin, TimeStampedModel):\n    title = models.CharField(max_length=20, blank=True, null=True)\n    full_name = models.CharField(max_length=400, blank=True, null=True)\n    postcode = models.CharField(max_length=12, blank=True, null=True)\n    street = models.CharField(max_length=255, blank=True, null=True)",
        "detail": "cla_backend.apps.legalaid.models",
        "documentation": {}
    },
    {
        "label": "PersonalDetails",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.models",
        "description": "cla_backend.apps.legalaid.models",
        "peekOfCode": "class PersonalDetails(CloneModelMixin, TimeStampedModel):\n    title = models.CharField(max_length=20, blank=True, null=True)\n    full_name = models.CharField(max_length=400, blank=True, null=True)\n    postcode = models.CharField(max_length=12, blank=True, null=True)\n    street = models.CharField(max_length=255, blank=True, null=True)\n    mobile_phone = models.CharField(max_length=20, blank=True, null=True)\n    home_phone = models.CharField(max_length=20, blank=True)\n    email = models.EmailField(blank=True)\n    date_of_birth = models.DateField(blank=True, null=True)\n    ni_number = models.CharField(max_length=10, null=True, blank=True)",
        "detail": "cla_backend.apps.legalaid.models",
        "documentation": {}
    },
    {
        "label": "ThirdPartyDetails",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.models",
        "description": "cla_backend.apps.legalaid.models",
        "peekOfCode": "class ThirdPartyDetails(CloneModelMixin, TimeStampedModel):\n    personal_details = models.ForeignKey(PersonalDetails)\n    pass_phrase = models.CharField(max_length=255, blank=True, null=True)\n    reason = models.CharField(max_length=30, choices=THIRDPARTY_REASON, null=True, blank=True, default=\"\")\n    personal_relationship = models.CharField(max_length=30, choices=THIRDPARTY_RELATIONSHIP)\n    personal_relationship_note = models.CharField(max_length=255, blank=True)\n    spoke_to = models.NullBooleanField(blank=True, null=True)\n    no_contact_reason = models.TextField(blank=True, null=True)\n    organisation_name = models.CharField(max_length=255, blank=True, null=True)\n    reference = UUIDField(auto=True, unique=True)",
        "detail": "cla_backend.apps.legalaid.models",
        "documentation": {}
    },
    {
        "label": "AdaptationDetails",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.models",
        "description": "cla_backend.apps.legalaid.models",
        "peekOfCode": "class AdaptationDetails(CloneModelMixin, TimeStampedModel):\n    bsl_webcam = models.BooleanField(default=False)\n    minicom = models.BooleanField(default=False)\n    text_relay = models.BooleanField(default=False)\n    skype_webcam = models.BooleanField(default=False)\n    language = models.CharField(max_length=30, choices=ADAPTATION_LANGUAGES, blank=True, null=True)\n    notes = models.TextField(blank=True)\n    callback_preference = models.BooleanField(default=False)\n    reference = UUIDField(auto=True, unique=True)\n    no_adaptations_required = models.NullBooleanField(blank=True)",
        "detail": "cla_backend.apps.legalaid.models",
        "documentation": {}
    },
    {
        "label": "EODDetailsManager",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.models",
        "description": "cla_backend.apps.legalaid.models",
        "peekOfCode": "class EODDetailsManager(models.Manager):\n    use_for_related_fields = True\n    def get_queryset(self):\n        return super(EODDetailsManager, self).get_queryset().select_related(\"case\")\nclass EODDetails(TimeStampedModel):\n    case = models.OneToOneField(\"Case\", related_name=\"eod_details\")\n    notes = models.TextField(blank=True)\n    reference = UUIDField(auto=True, unique=True)\n    objects = EODDetailsManager()\n    class Meta(object):",
        "detail": "cla_backend.apps.legalaid.models",
        "documentation": {}
    },
    {
        "label": "EODDetails",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.models",
        "description": "cla_backend.apps.legalaid.models",
        "peekOfCode": "class EODDetails(TimeStampedModel):\n    case = models.OneToOneField(\"Case\", related_name=\"eod_details\")\n    notes = models.TextField(blank=True)\n    reference = UUIDField(auto=True, unique=True)\n    objects = EODDetailsManager()\n    class Meta(object):\n        ordering = (\"-created\",)\n        verbose_name = \"EOD details\"\n        verbose_name_plural = \"EOD details\"\n    def __unicode__(self):",
        "detail": "cla_backend.apps.legalaid.models",
        "documentation": {}
    },
    {
        "label": "EODDetailsCategory",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.models",
        "description": "cla_backend.apps.legalaid.models",
        "peekOfCode": "class EODDetailsCategory(models.Model):\n    eod_details = models.ForeignKey(EODDetails, related_name=\"categories\")\n    category = models.CharField(max_length=30, choices=EXPRESSIONS_OF_DISSATISFACTION, blank=True, null=True)\n    is_major = models.BooleanField(default=False)\n    class Meta(object):\n        verbose_name = \"EOD category\"\n        verbose_name_plural = \"EOD categories\"\n    def __unicode__(self):\n        return EXPRESSIONS_OF_DISSATISFACTION.CHOICES_DICT.get(self.category)\nclass Person(CloneModelMixin, TimeStampedModel):",
        "detail": "cla_backend.apps.legalaid.models",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.models",
        "description": "cla_backend.apps.legalaid.models",
        "peekOfCode": "class Person(CloneModelMixin, TimeStampedModel):\n    income = models.ForeignKey(Income, blank=True, null=True)\n    savings = models.ForeignKey(Savings, blank=True, null=True)\n    deductions = models.ForeignKey(Deductions, blank=True, null=True)\n    cloning_config = {\"excludes\": [\"created\", \"modified\"], \"clone_fks\": [\"income\", \"savings\", \"deductions\"]}\n    class Meta(object):\n        ordering = (\"-created\",)\n        verbose_name_plural = \"people\"\n    @classmethod\n    def from_dict(cls, d):",
        "detail": "cla_backend.apps.legalaid.models",
        "documentation": {}
    },
    {
        "label": "ValidateModelMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.models",
        "description": "cla_backend.apps.legalaid.models",
        "peekOfCode": "class ValidateModelMixin(models.Model):\n    class Meta(object):\n        abstract = True\n    def get_dependencies(self):\n        \"\"\"\n        implement this in the model class that you\n        use the mixin inside of.\n        :return: a set of fields that are required given\n        the current state of the saved object. You can reference\n        nested fields by using __ notation. e.g. `partner__income`",
        "detail": "cla_backend.apps.legalaid.models",
        "documentation": {}
    },
    {
        "label": "EligibilityCheck",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.models",
        "description": "cla_backend.apps.legalaid.models",
        "peekOfCode": "class EligibilityCheck(TimeStampedModel, ValidateModelMixin):\n    reference = UUIDField(auto=True, unique=True)\n    category = models.ForeignKey(Category, blank=True, null=True)\n    you = models.ForeignKey(Person, blank=True, null=True, related_name=\"you\")\n    partner = models.ForeignKey(Person, blank=True, null=True, related_name=\"partner\")\n    disputed_savings = models.ForeignKey(Savings, blank=True, null=True)\n    your_problem_notes = models.TextField(blank=True)\n    notes = models.TextField(blank=True)\n    state = models.CharField(max_length=50, default=ELIGIBILITY_STATES.UNKNOWN, choices=ELIGIBILITY_STATES.CHOICES)\n    dependants_young = models.PositiveIntegerField(",
        "detail": "cla_backend.apps.legalaid.models",
        "documentation": {}
    },
    {
        "label": "Property",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.models",
        "description": "cla_backend.apps.legalaid.models",
        "peekOfCode": "class Property(TimeStampedModel):\n    value = MoneyField(default=None, null=True, blank=True)\n    mortgage_left = MoneyField(default=None, null=True, blank=True)\n    share = models.PositiveIntegerField(default=None, validators=[MaxValueValidator(100)], null=True, blank=True)\n    eligibility_check = models.ForeignKey(EligibilityCheck, related_query_name=\"property_set\")\n    disputed = models.NullBooleanField(default=None)\n    main = models.NullBooleanField(default=None)\n    class Meta(object):\n        verbose_name_plural = \"properties\"\n        ordering = (\"-created\",)",
        "detail": "cla_backend.apps.legalaid.models",
        "documentation": {}
    },
    {
        "label": "MatterType",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.models",
        "description": "cla_backend.apps.legalaid.models",
        "peekOfCode": "class MatterType(TimeStampedModel):\n    category = models.ForeignKey(Category)\n    code = models.CharField(max_length=4)\n    description = models.CharField(max_length=255)\n    level = models.PositiveSmallIntegerField(choices=MATTER_TYPE_LEVELS.CHOICES, validators=[MaxValueValidator(2)])\n    def __unicode__(self):\n        return u\"MatterType{} ({}): {} - {}\".format(\n            self.get_level_display(), self.category.code, self.code, self.description\n        )\n    class Meta(object):",
        "detail": "cla_backend.apps.legalaid.models",
        "documentation": {}
    },
    {
        "label": "MediaCodeGroup",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.models",
        "description": "cla_backend.apps.legalaid.models",
        "peekOfCode": "class MediaCodeGroup(models.Model):\n    name = models.CharField(max_length=128)\n    def __unicode__(self):\n        return self.name\nclass MediaCode(TimeStampedModel):\n    group = models.ForeignKey(MediaCodeGroup)\n    name = models.CharField(max_length=128)\n    code = models.CharField(max_length=20)\nclass Case(TimeStampedModel):\n    reference = models.CharField(max_length=128, unique=True, editable=False)",
        "detail": "cla_backend.apps.legalaid.models",
        "documentation": {}
    },
    {
        "label": "MediaCode",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.models",
        "description": "cla_backend.apps.legalaid.models",
        "peekOfCode": "class MediaCode(TimeStampedModel):\n    group = models.ForeignKey(MediaCodeGroup)\n    name = models.CharField(max_length=128)\n    code = models.CharField(max_length=20)\nclass Case(TimeStampedModel):\n    reference = models.CharField(max_length=128, unique=True, editable=False)\n    eligibility_check = models.OneToOneField(EligibilityCheck, null=True, blank=True)\n    diagnosis = models.OneToOneField(\"diagnosis.DiagnosisTraversal\", null=True, blank=True, on_delete=SET_NULL)\n    personal_details = models.ForeignKey(PersonalDetails, blank=True, null=True)\n    created_by = models.ForeignKey(settings.AUTH_USER_MODEL, blank=True, null=True)",
        "detail": "cla_backend.apps.legalaid.models",
        "documentation": {}
    },
    {
        "label": "Case",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.models",
        "description": "cla_backend.apps.legalaid.models",
        "peekOfCode": "class Case(TimeStampedModel):\n    reference = models.CharField(max_length=128, unique=True, editable=False)\n    eligibility_check = models.OneToOneField(EligibilityCheck, null=True, blank=True)\n    diagnosis = models.OneToOneField(\"diagnosis.DiagnosisTraversal\", null=True, blank=True, on_delete=SET_NULL)\n    personal_details = models.ForeignKey(PersonalDetails, blank=True, null=True)\n    created_by = models.ForeignKey(settings.AUTH_USER_MODEL, blank=True, null=True)\n    audit_log = models.ManyToManyField(AuditLog, blank=True)\n    requires_action_by = models.CharField(\n        max_length=50,\n        choices=REQUIRES_ACTION_BY.CHOICES,",
        "detail": "cla_backend.apps.legalaid.models",
        "documentation": {}
    },
    {
        "label": "CaseNotesHistory",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.models",
        "description": "cla_backend.apps.legalaid.models",
        "peekOfCode": "class CaseNotesHistory(TimeStampedModel):\n    case = models.ForeignKey(Case, db_index=True)\n    operator_notes = models.TextField(null=True, blank=True)\n    provider_notes = models.TextField(null=True, blank=True)\n    created_by = models.ForeignKey(settings.AUTH_USER_MODEL)\n    include_in_summary = models.BooleanField(default=True)\n    class Meta(object):\n        ordering = (\"-created\",)\n    def save(self, *args, **kwargs):\n        self.include_in_summary = True",
        "detail": "cla_backend.apps.legalaid.models",
        "documentation": {}
    },
    {
        "label": "CaseKnowledgebaseAssignment",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.models",
        "description": "cla_backend.apps.legalaid.models",
        "peekOfCode": "class CaseKnowledgebaseAssignment(TimeStampedModel):\n    case = models.ForeignKey(Case)\n    alternative_help_article = models.ForeignKey(\"knowledgebase.Article\")\n    assigned_by = models.ForeignKey(\"auth.User\", blank=True, null=True)",
        "detail": "cla_backend.apps.legalaid.models",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.models",
        "description": "cla_backend.apps.legalaid.models",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef _make_reference():\n    from django.utils.crypto import get_random_string\n    return u\"%s-%s-%s\" % (\n        # exclude B8G6I1l0OQDS5Z2\n        get_random_string(length=2, allowed_chars=\"ACEFHJKMNPRTUVWXY3479\"),\n        get_random_string(length=4, allowed_chars=\"123456789\"),\n        get_random_string(length=4, allowed_chars=\"123456789\"),\n    )\ndef _check_reference_unique(reference):",
        "detail": "cla_backend.apps.legalaid.models",
        "documentation": {}
    },
    {
        "label": "IsManagerOrMePermission",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.permissions",
        "description": "cla_backend.apps.legalaid.permissions",
        "peekOfCode": "class IsManagerOrMePermission(BasePermission):\n    def has_object_permission(self, request, view, obj):\n        usermodel_instance = view.get_logged_in_user_model()\n        # this doesn't check if usermodel_instance.provider == obj.provider\n        # that is handled by get_queryset()\n        return usermodel_instance == obj or usermodel_instance.is_manager",
        "detail": "cla_backend.apps.legalaid.permissions",
        "documentation": {}
    },
    {
        "label": "CategorySerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class CategorySerializerBase(serializers.HyperlinkedModelSerializer):\n    class Meta(object):\n        model = Category\n        fields = (\"code\", \"name\", \"description\", \"ecf_available\", \"mandatory\")\nclass ProviderSerializerBase(serializers.HyperlinkedModelSerializer):\n    class Meta(object):\n        model = Provider\nclass OutOfHoursRotaSerializerBase(ClaModelSerializer):\n    category = serializers.SlugRelatedField(slug_field=\"code\", queryset=Category.objects.all())\n    provider = serializers.PrimaryKeyRelatedField(queryset=Provider.objects.all())",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "ProviderSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class ProviderSerializerBase(serializers.HyperlinkedModelSerializer):\n    class Meta(object):\n        model = Provider\nclass OutOfHoursRotaSerializerBase(ClaModelSerializer):\n    category = serializers.SlugRelatedField(slug_field=\"code\", queryset=Category.objects.all())\n    provider = serializers.PrimaryKeyRelatedField(queryset=Provider.objects.all())\n    def validate(self, attrs):\n        # if this is for a patch rather than a post then an instance already exists\n        if self.instance is not None:\n            instance = self.instance",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "OutOfHoursRotaSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class OutOfHoursRotaSerializerBase(ClaModelSerializer):\n    category = serializers.SlugRelatedField(slug_field=\"code\", queryset=Category.objects.all())\n    provider = serializers.PrimaryKeyRelatedField(queryset=Provider.objects.all())\n    def validate(self, attrs):\n        # if this is for a patch rather than a post then an instance already exists\n        if self.instance is not None:\n            instance = self.instance\n        else:\n            instance = OutOfHoursRota(**attrs)\n        instance.clean()",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "FeedbackSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class FeedbackSerializerBase(serializers.ModelSerializer):\n    created_by = serializers.CharField(source=\"created_by.user.username\", read_only=True)\n    case = serializers.SlugRelatedField(slug_field=\"reference\", read_only=True)\n    comment = serializers.CharField(max_length=5000, read_only=True)\n    justified = serializers.BooleanField(read_only=True)\n    resolved = serializers.BooleanField(read_only=True)\n    provider = serializers.SerializerMethodField()\n    def get_provider(self, obj):\n        return obj.created_by.provider.name\n    class Meta(object):",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "CSVUploadSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class CSVUploadSerializerBase(serializers.ModelSerializer):\n    rows = serializers.SerializerMethodField()\n    provider = serializers.CharField(read_only=True, source=\"provider.name\")\n    created_by = serializers.CharField(read_only=True, source=\"created_by.user.username\")\n    body = JSONField()\n    def get_rows(self, obj):\n        return len(obj.body)\n    def validate_month(self, value):\n        validate_first_of_month(value)\n        return value",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "PropertySerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class PropertySerializerBase(ClaModelSerializer):\n    class Meta(object):\n        model = Property\nclass TotalsModelSerializer(ClaModelSerializer):\n    total_fields = set()\n    total = serializers.SerializerMethodField()\n    def get_total(self, obj):\n        total = 0\n        for f in self.total_fields:\n            value = getattr(obj, f, 0)",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "TotalsModelSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class TotalsModelSerializer(ClaModelSerializer):\n    total_fields = set()\n    total = serializers.SerializerMethodField()\n    def get_total(self, obj):\n        total = 0\n        for f in self.total_fields:\n            value = getattr(obj, f, 0)\n            if isinstance(value, MoneyInterval):\n                subtotal = value.as_monthly()\n            else:",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "IncomeSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class IncomeSerializerBase(TotalsModelSerializer):\n    total_fields = {\n        \"earnings\",\n        \"self_employment_drawings\",\n        \"benefits\",\n        \"tax_credits\",\n        \"child_benefits\",\n        \"maintenance_received\",\n        \"pension\",\n        \"other_income\",",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "SavingsSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class SavingsSerializerBase(TotalsModelSerializer):\n    total_fields = {\"bank_balance\", \"investment_balance\", \"asset_balance\", \"credit_balance\"}\n    class Meta(object):\n        model = Savings\nclass DeductionsSerializerBase(TotalsModelSerializer):\n    total_fields = {\n        \"criminal_legalaid_contributions\",\n        \"income_tax\",\n        \"national_insurance\",\n        \"maintenance\",",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "DeductionsSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class DeductionsSerializerBase(TotalsModelSerializer):\n    total_fields = {\n        \"criminal_legalaid_contributions\",\n        \"income_tax\",\n        \"national_insurance\",\n        \"maintenance\",\n        \"childcare\",\n        \"mortgage\",\n        \"rent\",\n    }",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "PersonalDetailsSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class PersonalDetailsSerializerBase(serializers.ModelSerializer):\n    contact_for_research = serializers.NullBooleanField(required=False)\n    vulnerable_user = serializers.NullBooleanField(required=False)\n    class Meta(object):\n        model = PersonalDetails\nclass PersonalDetailsSerializerFull(PersonalDetailsSerializerBase):\n    dob = ThreePartDateField(required=False, source=\"date_of_birth\", allow_null=True)\n    has_diversity = serializers.SerializerMethodField(\"diversity_bool\")\n    def diversity_bool(self, obj):\n        return bool(obj.diversity)",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "PersonalDetailsSerializerFull",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class PersonalDetailsSerializerFull(PersonalDetailsSerializerBase):\n    dob = ThreePartDateField(required=False, source=\"date_of_birth\", allow_null=True)\n    has_diversity = serializers.SerializerMethodField(\"diversity_bool\")\n    def diversity_bool(self, obj):\n        return bool(obj.diversity)\nclass ThirdPartyPersonalDetailsSerializerBase(PersonalDetailsSerializerBase):\n    pass\nclass ThirdPartyDetailsSerializerBase(ClaModelSerializer):\n    personal_details = ThirdPartyPersonalDetailsSerializerBase(required=True)\n    spoke_to = serializers.NullBooleanField(required=False)",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "ThirdPartyPersonalDetailsSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class ThirdPartyPersonalDetailsSerializerBase(PersonalDetailsSerializerBase):\n    pass\nclass ThirdPartyDetailsSerializerBase(ClaModelSerializer):\n    personal_details = ThirdPartyPersonalDetailsSerializerBase(required=True)\n    spoke_to = serializers.NullBooleanField(required=False)\n    class Meta(object):\n        model = ThirdPartyDetails\n        writable_nested_fields = [\"personal_details\"]\nclass PersonSerializerBase(ClaModelSerializer):\n    income = IncomeSerializerBase(required=False)",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "ThirdPartyDetailsSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class ThirdPartyDetailsSerializerBase(ClaModelSerializer):\n    personal_details = ThirdPartyPersonalDetailsSerializerBase(required=True)\n    spoke_to = serializers.NullBooleanField(required=False)\n    class Meta(object):\n        model = ThirdPartyDetails\n        writable_nested_fields = [\"personal_details\"]\nclass PersonSerializerBase(ClaModelSerializer):\n    income = IncomeSerializerBase(required=False)\n    savings = SavingsSerializerBase(required=False)\n    deductions = DeductionsSerializerBase(required=False)",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "PersonSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class PersonSerializerBase(ClaModelSerializer):\n    income = IncomeSerializerBase(required=False)\n    savings = SavingsSerializerBase(required=False)\n    deductions = DeductionsSerializerBase(required=False)\n    class Meta(object):\n        model = Person\n        writable_nested_fields = [\"income\", \"savings\", \"deductions\"]\nclass AdaptationDetailsSerializerBase(serializers.ModelSerializer):\n    bsl_webcam = serializers.BooleanField(label=\"BSL - Webcam\", required=False)\n    minicom = serializers.BooleanField(label=\"Minicom\", required=False)",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "AdaptationDetailsSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class AdaptationDetailsSerializerBase(serializers.ModelSerializer):\n    bsl_webcam = serializers.BooleanField(label=\"BSL - Webcam\", required=False)\n    minicom = serializers.BooleanField(label=\"Minicom\", required=False)\n    text_relay = serializers.BooleanField(label=\"Text relay\", required=False)\n    skype_webcam = serializers.BooleanField(label=\"Skype\", required=False)\n    callback_preference = serializers.BooleanField(label=\"Callback preference\", required=False)\n    no_adaptations_required = serializers.BooleanField(label=\"No adaptations required\", required=False)\n    class Meta(object):\n        model = AdaptationDetails\nclass EODDetailsCategorySerializerBase(serializers.ModelSerializer):",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "EODDetailsCategorySerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class EODDetailsCategorySerializerBase(serializers.ModelSerializer):\n    class Meta(object):\n        model = EODDetailsCategory\n        fields = (\"category\", \"is_major\")\nclass EODDetailsSerializerBase(ClaModelSerializer):\n    notes = serializers.CharField(max_length=5000, required=False, allow_blank=True)\n    categories = EODDetailsCategorySerializerBase(many=True, required=False)\n    class Meta(object):\n        model = EODDetails\n        writable_nested_fields = [\"categories\"]",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "EODDetailsSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class EODDetailsSerializerBase(ClaModelSerializer):\n    notes = serializers.CharField(max_length=5000, required=False, allow_blank=True)\n    categories = EODDetailsCategorySerializerBase(many=True, required=False)\n    class Meta(object):\n        model = EODDetails\n        writable_nested_fields = [\"categories\"]\nclass EligibilityCheckSerializerBase(ClaModelSerializer):\n    property_set = PropertySerializerBase(many=True, required=False)\n    you = PersonSerializerBase(required=False, allow_null=True)\n    partner = PersonSerializerBase(required=False, allow_null=True)",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "EligibilityCheckSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class EligibilityCheckSerializerBase(ClaModelSerializer):\n    property_set = PropertySerializerBase(many=True, required=False)\n    you = PersonSerializerBase(required=False, allow_null=True)\n    partner = PersonSerializerBase(required=False, allow_null=True)\n    category = serializers.SlugRelatedField(\n        slug_field=\"code\", required=False, queryset=Category.objects.all(), allow_null=True\n    )\n    your_problem_notes = serializers.CharField(max_length=500, required=False, allow_blank=True)\n    notes = serializers.CharField(max_length=5000, required=False, allow_blank=True)\n    specific_benefits = JSONField(required=False, allow_null=True)",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "MatterTypeSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class MatterTypeSerializerBase(ClaModelSerializer):\n    category = serializers.SlugRelatedField(slug_field=\"code\", read_only=True)\n    class Meta(object):\n        model = MatterType\n        fields = (\"category\", \"code\", \"description\", \"level\")\nclass MediaCodeSerializerBase(ClaModelSerializer):\n    group = serializers.SlugRelatedField(slug_field=\"name\", read_only=True)\n    class Meta(object):\n        model = MediaCode\n        fields = (\"group\", \"name\", \"code\")",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "MediaCodeSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class MediaCodeSerializerBase(ClaModelSerializer):\n    group = serializers.SlugRelatedField(slug_field=\"name\", read_only=True)\n    class Meta(object):\n        model = MediaCode\n        fields = (\"group\", \"name\", \"code\")\nclass ContactResearchMethodSerializerBase(ClaModelSerializer):\n    class Meta(object):\n        model = ContactResearchMethod\n        fields = (\"method\", \"id\")\nclass CaseSerializerBase(PartialUpdateExcludeReadonlySerializerMixin, ClaModelSerializer):",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "ContactResearchMethodSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class ContactResearchMethodSerializerBase(ClaModelSerializer):\n    class Meta(object):\n        model = ContactResearchMethod\n        fields = (\"method\", \"id\")\nclass CaseSerializerBase(PartialUpdateExcludeReadonlySerializerMixin, ClaModelSerializer):\n    eligibility_check = UUIDSerializer(slug_field=\"reference\", read_only=True)\n    diagnosis = UUIDSerializer(slug_field=\"reference\", required=False, read_only=True)\n    personal_details = PersonalDetailsSerializerBase()\n    notes = serializers.CharField(max_length=10000, required=False, allow_blank=True)\n    provider_notes = serializers.CharField(max_length=10000, required=False, allow_blank=True)",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "CaseSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class CaseSerializerBase(PartialUpdateExcludeReadonlySerializerMixin, ClaModelSerializer):\n    eligibility_check = UUIDSerializer(slug_field=\"reference\", read_only=True)\n    diagnosis = UUIDSerializer(slug_field=\"reference\", required=False, read_only=True)\n    personal_details = PersonalDetailsSerializerBase()\n    notes = serializers.CharField(max_length=10000, required=False, allow_blank=True)\n    provider_notes = serializers.CharField(max_length=10000, required=False, allow_blank=True)\n    matter_type1 = serializers.SlugRelatedField(\n        slug_field=\"code\",\n        required=False,\n        queryset=MatterType.objects.filter(level=MATTER_TYPE_LEVELS.ONE),",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "CaseSerializerFull",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class CaseSerializerFull(CaseSerializerBase):\n    eligibility_check = UUIDSerializer(slug_field=\"reference\", required=False, read_only=True)\n    full_name = serializers.CharField(source=\"personal_details.full_name\", read_only=True)\n    postcode = serializers.CharField(source=\"personal_details.postcode\", read_only=True)\n    case_count = serializers.IntegerField(source=\"personal_details.case_count\", read_only=True)\n    personal_details = UUIDSerializer(required=False, slug_field=\"reference\", read_only=True)\n    thirdparty_details = UUIDSerializer(required=False, slug_field=\"reference\", read_only=True)\n    adaptation_details = UUIDSerializer(required=False, slug_field=\"reference\", read_only=True)\n    eod_details = UUIDSerializer(required=False, slug_field=\"reference\", read_only=True)\n    flagged_with_eod = serializers.BooleanField(read_only=True)",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta(object):\n        model = User\n        fields = (\"id\", \"username\", \"email\", \"first_name\", \"last_name\")\nclass ExtendedUserSerializerBase(serializers.ModelSerializer):\n    username = serializers.CharField(source=\"user.username\")\n    first_name = serializers.CharField(source=\"user.first_name\")\n    last_name = serializers.CharField(source=\"user.last_name\")\n    email = serializers.CharField(source=\"user.email\")\n    password = serializers.CharField(source=\"user.password\", write_only=True)",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "ExtendedUserSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class ExtendedUserSerializerBase(serializers.ModelSerializer):\n    username = serializers.CharField(source=\"user.username\")\n    first_name = serializers.CharField(source=\"user.first_name\")\n    last_name = serializers.CharField(source=\"user.last_name\")\n    email = serializers.CharField(source=\"user.email\")\n    password = serializers.CharField(source=\"user.password\", write_only=True)\n    last_login = serializers.DateTimeField(source=\"user.last_login\", read_only=True)\n    created = serializers.DateTimeField(source=\"user.date_joined\", read_only=True)\n    user = UserSerializer()\n    def validate_password(self, password):",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "CaseArchivedSerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class CaseArchivedSerializerBase(serializers.ModelSerializer):\n    date_of_birth = ThreePartDateField(required=False, allow_null=True)\n    date_specialist_referred = ThreePartDateField(required=False, allow_null=True)\n    date_specialist_closed = ThreePartDateField(required=False, allow_null=True)\n    financially_eligible = serializers.NullBooleanField(required=False)\n    in_scope = serializers.NullBooleanField(required=False)\n    class Meta(object):\n        model = CaseArchived\nclass CaseNotesHistorySerializerBase(ClaModelSerializer):\n    created_by = serializers.CharField(read_only=True, source=\"created_by.username\")",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "CaseNotesHistorySerializerBase",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.serializers",
        "description": "cla_backend.apps.legalaid.serializers",
        "peekOfCode": "class CaseNotesHistorySerializerBase(ClaModelSerializer):\n    created_by = serializers.CharField(read_only=True, source=\"created_by.username\")\n    created = serializers.DateTimeField(read_only=True)\n    operator_notes = serializers.CharField(read_only=True)\n    provider_notes = serializers.CharField(read_only=True)\n    type_notes = serializers.SerializerMethodField()\n    def get_type_notes(self, obj):\n        if obj.provider_notes is not None:\n            return obj.provider_notes\n        return obj.operator_notes",
        "detail": "cla_backend.apps.legalaid.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.urls",
        "description": "cla_backend.apps.legalaid.urls",
        "peekOfCode": "router = routers.DefaultRouter()\nrouter.register(r\"category\", views.CategoryViewSet)\nrouter.register(r\"eligibility_check\", views.EligibilityCheckViewSet, base_name=\"eligibility_check\")\nrouter.register(r\"case\", views.CaseViewSet)\neligibility_check_router = NestedSimpleRouter(router, \"eligibility_check\", lookup=\"eligibility_check_\")\neligibility_check_router.register(r\"property\", views.PropertyViewSet, base_name=\"property\")\nurlpatterns = patterns(\"\", url(r\"^\", include(router.urls)), url(r\"^\", include(eligibility_check_router.urls)))",
        "detail": "cla_backend.apps.legalaid.urls",
        "documentation": {}
    },
    {
        "label": "eligibility_check_router",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.urls",
        "description": "cla_backend.apps.legalaid.urls",
        "peekOfCode": "eligibility_check_router = NestedSimpleRouter(router, \"eligibility_check\", lookup=\"eligibility_check_\")\neligibility_check_router.register(r\"property\", views.PropertyViewSet, base_name=\"property\")\nurlpatterns = patterns(\"\", url(r\"^\", include(router.urls)), url(r\"^\", include(eligibility_check_router.urls)))",
        "detail": "cla_backend.apps.legalaid.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "cla_backend.apps.legalaid.urls",
        "description": "cla_backend.apps.legalaid.urls",
        "peekOfCode": "urlpatterns = patterns(\"\", url(r\"^\", include(router.urls)), url(r\"^\", include(eligibility_check_router.urls)))",
        "detail": "cla_backend.apps.legalaid.urls",
        "documentation": {}
    },
    {
        "label": "CaseFormActionMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class CaseFormActionMixin(FormActionMixin):\n    \"\"\"\n    This is for backward compatibility\n    \"\"\"\n    FORM_ACTION_OBJ_PARAM = \"case\"\nclass PasswordResetForm(forms.Form):\n    new_password = forms.CharField(required=True, min_length=10)\n    old_password = forms.CharField(required=False)\n    def __init__(self, case=None, *args, **kwargs):\n        self.action_user = kwargs.pop(\"action_user\")",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetForm",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class PasswordResetForm(forms.Form):\n    new_password = forms.CharField(required=True, min_length=10)\n    old_password = forms.CharField(required=False)\n    def __init__(self, case=None, *args, **kwargs):\n        self.action_user = kwargs.pop(\"action_user\")\n        self.reset_user = kwargs.pop(\"reset_user\")\n        super(PasswordResetForm, self).__init__(*args, **kwargs)\n        if self.action_user == self.reset_user:\n            self.fields[\"old_password\"].required = True\n    def clean_old_password(self):",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseUserViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class BaseUserViewSet(\n    mixins.RetrieveModelMixin, mixins.ListModelMixin, ClaCreateModelMixin, CaseFormActionMixin, CompatGenericViewSet\n):\n    permission_classes = (IsManagerOrMePermission,)\n    me_lookup_url_kwargs = \"me\"\n    lookup_field = \"user__username\"\n    def get_queryset(self):\n        qs = super(BaseUserViewSet, self).get_queryset()\n        return qs.filter(user__is_active=True)\n    def get_logged_in_user_model(self):",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseCategoryViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class BaseCategoryViewSet(viewsets.ReadOnlyModelViewSet):\n    queryset = Category.objects.all()\n    model = Category\n    serializer_class = CategorySerializerBase\n    lookup_field = \"code\"\nclass BaseEligibilityCheckViewSet(JsonPatchViewSetMixin, CompatGenericViewSet):\n    queryset = EligibilityCheck.objects.all()\n    model = EligibilityCheck\n    lookup_field = \"reference\"\n    @detail_route()",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseEligibilityCheckViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class BaseEligibilityCheckViewSet(JsonPatchViewSetMixin, CompatGenericViewSet):\n    queryset = EligibilityCheck.objects.all()\n    model = EligibilityCheck\n    lookup_field = \"reference\"\n    @detail_route()\n    def validate(self, request, **kwargs):\n        obj = self.get_object()\n        return DRFResponse(obj.validate())\n    @detail_route(methods=[\"post\"])\n    def is_eligible(self, request, *args, **kwargs):",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseNestedEligibilityCheckViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class BaseNestedEligibilityCheckViewSet(NestedGenericModelMixin, BaseEligibilityCheckViewSet):\n    PARENT_FIELD = \"eligibility_check\"\n    def get_means_test_event_kwargs(self, kwargs):\n        patch = self.jsonpatch\n        kwargs.update({\"patch\": json.dumps(patch), \"notes\": format_patch(patch[\"forwards\"])})\n        return kwargs\nclass BaseMatterTypeViewSet(mixins.RetrieveModelMixin, mixins.ListModelMixin, CompatGenericViewSet):\n    queryset = MatterType.objects.all()\n    model = MatterType\n    serializer_class = MatterTypeSerializerBase",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseMatterTypeViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class BaseMatterTypeViewSet(mixins.RetrieveModelMixin, mixins.ListModelMixin, CompatGenericViewSet):\n    queryset = MatterType.objects.all()\n    model = MatterType\n    serializer_class = MatterTypeSerializerBase\n    filter_backends = (DjangoFilterBackend,)\n    filter_fields = (\"level\", \"category__code\")\nclass BaseMediaCodeViewSet(mixins.RetrieveModelMixin, mixins.ListModelMixin, CompatGenericViewSet):\n    queryset = MediaCode.objects.all()\n    model = MediaCode\n    serializer_class = MediaCodeSerializerBase",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseMediaCodeViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class BaseMediaCodeViewSet(mixins.RetrieveModelMixin, mixins.ListModelMixin, CompatGenericViewSet):\n    queryset = MediaCode.objects.all()\n    model = MediaCode\n    serializer_class = MediaCodeSerializerBase\n    filter_backends = (DjangoFilterBackend,)\n    filter_fields = (\"name\", \"group__name\")\nclass BaseContactResearchMethodViewSet(mixins.RetrieveModelMixin, mixins.ListModelMixin, CompatGenericViewSet):\n    queryset = ContactResearchMethod.objects.all()\n    model = ContactResearchMethod\n    serializer_class = ContactResearchMethodSerializerBase",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseContactResearchMethodViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class BaseContactResearchMethodViewSet(mixins.RetrieveModelMixin, mixins.ListModelMixin, CompatGenericViewSet):\n    queryset = ContactResearchMethod.objects.all()\n    model = ContactResearchMethod\n    serializer_class = ContactResearchMethodSerializerBase\n    filter_backends = (DjangoFilterBackend,)\n    filter_fields = (\"method\",)\nclass FullPersonalDetailsViewSet(\n    ClaCreateModelMixin, ClaUpdateModelMixin, mixins.RetrieveModelMixin, NestedGenericModelMixin, CompatGenericViewSet\n):\n    queryset = PersonalDetails.objects.all()",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "FullPersonalDetailsViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class FullPersonalDetailsViewSet(\n    ClaCreateModelMixin, ClaUpdateModelMixin, mixins.RetrieveModelMixin, NestedGenericModelMixin, CompatGenericViewSet\n):\n    queryset = PersonalDetails.objects.all()\n    model = PersonalDetails\n    serializer_class = PersonalDetailsSerializerFull\n    lookup_field = \"reference\"\n    PARENT_FIELD = \"personal_details\"\nclass BaseThirdPartyDetailsViewSet(\n    ClaCreateModelMixin, ClaUpdateModelMixin, mixins.RetrieveModelMixin, NestedGenericModelMixin, CompatGenericViewSet",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseThirdPartyDetailsViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class BaseThirdPartyDetailsViewSet(\n    ClaCreateModelMixin, ClaUpdateModelMixin, mixins.RetrieveModelMixin, NestedGenericModelMixin, CompatGenericViewSet\n):\n    queryset = ThirdPartyDetails.objects.all()\n    model = ThirdPartyDetails\n    serializer_class = ThirdPartyDetailsSerializerBase\n    lookup_field = \"reference\"\n    PARENT_FIELD = \"thirdparty_details\"\nclass BaseAdaptationDetailsViewSet(\n    ClaCreateModelMixin, ClaUpdateModelMixin, mixins.RetrieveModelMixin, NestedGenericModelMixin, CompatGenericViewSet",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseAdaptationDetailsViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class BaseAdaptationDetailsViewSet(\n    ClaCreateModelMixin, ClaUpdateModelMixin, mixins.RetrieveModelMixin, NestedGenericModelMixin, CompatGenericViewSet\n):\n    queryset = AdaptationDetails.objects.all()\n    model = AdaptationDetails\n    serializer_class = AdaptationDetailsSerializerBase\n    lookup_field = \"reference\"\n    PARENT_FIELD = \"adaptation_details\"\nclass BaseAdaptationDetailsMetadataViewSet(ClaCreateModelMixin, CompatGenericViewSet):\n    queryset = AdaptationDetails.objects.all()",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseAdaptationDetailsMetadataViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class BaseAdaptationDetailsMetadataViewSet(ClaCreateModelMixin, CompatGenericViewSet):\n    queryset = AdaptationDetails.objects.all()\n    model = AdaptationDetails\n    serializer_class = AdaptationDetailsSerializerBase\n    def create(self, request, *args, **kwargs):\n        self.http_method_not_allowed(request)\nclass BaseEODDetailsViewSet(\n    ClaCreateModelMixin, ClaUpdateModelMixin, mixins.RetrieveModelMixin, NestedGenericModelMixin, CompatGenericViewSet\n):\n    queryset = EODDetails.objects.all()",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseEODDetailsViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class BaseEODDetailsViewSet(\n    ClaCreateModelMixin, ClaUpdateModelMixin, mixins.RetrieveModelMixin, NestedGenericModelMixin, CompatGenericViewSet\n):\n    queryset = EODDetails.objects.all()\n    model = EODDetails\n    serializer_class = EODDetailsSerializerBase\n    lookup_field = \"reference\"\n    PARENT_FIELD = \"eod_details\"\n    def perform_update(self, serializer):\n        if isinstance(serializer.instance, EODDetails):",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseCaseOrderingFilter",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class BaseCaseOrderingFilter(OrderingFilter):\n    default_modified = \"modified\"\n    def filter_queryset(self, request, queryset, view):\n        ordering = self.get_ordering(request, queryset, view)\n        if isinstance(ordering, basestring):\n            if \",\" in ordering:\n                ordering = ordering.split(\",\")\n            else:\n                ordering = [ordering]\n        if \"requires_action_at\" not in ordering:",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "AscCaseOrderingFilter",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class AscCaseOrderingFilter(BaseCaseOrderingFilter):\n    default_modified = \"modified\"\nclass DescCaseOrderingFilter(BaseCaseOrderingFilter):\n    default_modified = \"-modified\"\nclass BaseCaseLogMixin(object):\n    def get_log_notes(self, obj):\n        raise NotImplementedError()\n    def get_log_context(self, obj):\n        context = {}\n        if obj.eligibility_check:",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "DescCaseOrderingFilter",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class DescCaseOrderingFilter(BaseCaseOrderingFilter):\n    default_modified = \"-modified\"\nclass BaseCaseLogMixin(object):\n    def get_log_notes(self, obj):\n        raise NotImplementedError()\n    def get_log_context(self, obj):\n        context = {}\n        if obj.eligibility_check:\n            context[\"eligibility_state\"] = obj.eligibility_check.state\n        return context",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseCaseLogMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class BaseCaseLogMixin(object):\n    def get_log_notes(self, obj):\n        raise NotImplementedError()\n    def get_log_context(self, obj):\n        context = {}\n        if obj.eligibility_check:\n            context[\"eligibility_state\"] = obj.eligibility_check.state\n        return context\n    def post_save(self, obj, created=False):\n        super(BaseCaseLogMixin, self).post_save(obj, created=created)",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "FullCaseViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class FullCaseViewSet(\n    DetailSerializerMixin,\n    ClaUpdateModelMixin,\n    ClaRetrieveModelMixinWithSelfInstance,\n    mixins.ListModelMixin,\n    CaseFormActionMixin,\n    CompatGenericViewSet,\n):\n    queryset = Case.objects.all()\n    model = Case",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseFeedbackViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class BaseFeedbackViewSet(\n    NestedGenericModelMixin,\n    mixins.ListModelMixin,\n    ClaUpdateModelMixin,\n    mixins.RetrieveModelMixin,\n    CompatGenericViewSet,\n):\n    queryset = Feedback.objects.all()\n    model = Feedback\n    serializer_class = FeedbackSerializerBase",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseCSVUploadReadOnlyViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class BaseCSVUploadReadOnlyViewSet(\n    DetailSerializerMixin, mixins.ListModelMixin, mixins.RetrieveModelMixin, CompatGenericViewSet\n):\n    queryset = CSVUpload.objects.all()\n    model = CSVUpload\n    serializer_class = CSVUploadSerializerBase\n    serializer_detail_class = CSVUploadSerializerBase\n    filter_backends = (OrderingFilter,)\nclass BaseCSVUploadViewSet(\n    DetailSerializerMixin,",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseCSVUploadViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class BaseCSVUploadViewSet(\n    DetailSerializerMixin,\n    mixins.ListModelMixin,\n    ClaCreateModelMixin,\n    ClaUpdateModelMixin,\n    mixins.RetrieveModelMixin,\n    CompatGenericViewSet,\n):\n    queryset = CSVUpload.objects.all()\n    model = CSVUpload",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "PaginatorWithExtraItem",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class PaginatorWithExtraItem(CaseNotesHistoryResultsSetPagination):\n    \"\"\"\n    Same as the Paginator but it will return one more item than expected.\n    Used for endpoints that need to diff elements.\n    \"\"\"\n    extra_num = 1\n    def get_page_size(self, request):\n        return super(PaginatorWithExtraItem, self).get_page_size(request) + 1\nclass BaseCaseNotesHistoryViewSet(NestedGenericModelMixin, mixins.ListModelMixin, CompatGenericViewSet):\n    PARENT_FIELD = \"casenoteshistory_set\"",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "BaseCaseNotesHistoryViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.legalaid.views",
        "description": "cla_backend.apps.legalaid.views",
        "peekOfCode": "class BaseCaseNotesHistoryViewSet(NestedGenericModelMixin, mixins.ListModelMixin, CompatGenericViewSet):\n    PARENT_FIELD = \"casenoteshistory_set\"\n    lookup_field = \"reference\"\n    serializer_class = CaseNotesHistorySerializerBase\n    queryset = CaseNotesHistory.objects.all()\n    model = CaseNotesHistory\n    @property\n    def pagination_class(self):\n        \"\"\"\n        If with_extra query param is provided, the endpoint will return",
        "detail": "cla_backend.apps.legalaid.views",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "cla_backend.apps.means_test_api.urls",
        "description": "cla_backend.apps.means_test_api.urls",
        "peekOfCode": "urlpatterns = patterns(\"\", url(r\"^means_test/$\", views.eligibility_batch_check, name=\"means_test\"))",
        "detail": "cla_backend.apps.means_test_api.urls",
        "documentation": {}
    },
    {
        "label": "eligibility_batch_check",
        "kind": 2,
        "importPath": "cla_backend.apps.means_test_api.views",
        "description": "cla_backend.apps.means_test_api.views",
        "peekOfCode": "def eligibility_batch_check(request):\n    return Response(map(pass_fail, request.data))\ndef pass_fail(scenario):\n    case_data = CaseData(**to_case_data(scenario))\n    scenario = EligibilityChecker(case_data)\n    return \"P\" if scenario.is_eligible() else \"F\"\ndef to_case_data(scenario):\n    benefits = scenario[\"benefits\"].split(\",\")\n    benefits = map(slugify, benefits)\n    case = {}",
        "detail": "cla_backend.apps.means_test_api.views",
        "documentation": {}
    },
    {
        "label": "pass_fail",
        "kind": 2,
        "importPath": "cla_backend.apps.means_test_api.views",
        "description": "cla_backend.apps.means_test_api.views",
        "peekOfCode": "def pass_fail(scenario):\n    case_data = CaseData(**to_case_data(scenario))\n    scenario = EligibilityChecker(case_data)\n    return \"P\" if scenario.is_eligible() else \"F\"\ndef to_case_data(scenario):\n    benefits = scenario[\"benefits\"].split(\",\")\n    benefits = map(slugify, benefits)\n    case = {}\n    case[\"category\"] = scenario[\"law-area\"].lower()\n    case[\"property_data\"] = properties(scenario)",
        "detail": "cla_backend.apps.means_test_api.views",
        "documentation": {}
    },
    {
        "label": "to_case_data",
        "kind": 2,
        "importPath": "cla_backend.apps.means_test_api.views",
        "description": "cla_backend.apps.means_test_api.views",
        "peekOfCode": "def to_case_data(scenario):\n    benefits = scenario[\"benefits\"].split(\",\")\n    benefits = map(slugify, benefits)\n    case = {}\n    case[\"category\"] = scenario[\"law-area\"].lower()\n    case[\"property_data\"] = properties(scenario)\n    case[\"facts\"] = {\n        \"dependants_old\": number(scenario[\"over16\"]),\n        \"dependants_young\": number(scenario[\"under16\"]),\n        \"has_partner\": is_yes(scenario[\"partner\"]),",
        "detail": "cla_backend.apps.means_test_api.views",
        "documentation": {}
    },
    {
        "label": "is_yes",
        "kind": 2,
        "importPath": "cla_backend.apps.means_test_api.views",
        "description": "cla_backend.apps.means_test_api.views",
        "peekOfCode": "def is_yes(value):\n    return str(value).upper() == \"Y\"\ndef properties(scenario):\n    def prop(s, i):\n        return scenario[\"prop{0}-{1}\".format(i, s)]\n    def property_data(i):\n        if prop(\"value\", i):\n            return {\n                \"value\": money(prop(\"value\")),\n                \"mortgage_left\": money(prop(\"mortgage\")),",
        "detail": "cla_backend.apps.means_test_api.views",
        "documentation": {}
    },
    {
        "label": "properties",
        "kind": 2,
        "importPath": "cla_backend.apps.means_test_api.views",
        "description": "cla_backend.apps.means_test_api.views",
        "peekOfCode": "def properties(scenario):\n    def prop(s, i):\n        return scenario[\"prop{0}-{1}\".format(i, s)]\n    def property_data(i):\n        if prop(\"value\", i):\n            return {\n                \"value\": money(prop(\"value\")),\n                \"mortgage_left\": money(prop(\"mortgage\")),\n                \"share\": number(prop(\"share\")),\n                \"disputed\": is_yes(prop(\"disputed\")),",
        "detail": "cla_backend.apps.means_test_api.views",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 2,
        "importPath": "cla_backend.apps.means_test_api.views",
        "description": "cla_backend.apps.means_test_api.views",
        "peekOfCode": "def number(s):\n    try:\n        n = int(s)\n    except ValueError:\n        return 0\n    return n\ndef money(s):\n    try:\n        n = Decimal(s).quantize(Decimal(\".01\"))\n    except (ValueError, InvalidOperation):",
        "detail": "cla_backend.apps.means_test_api.views",
        "documentation": {}
    },
    {
        "label": "money",
        "kind": 2,
        "importPath": "cla_backend.apps.means_test_api.views",
        "description": "cla_backend.apps.means_test_api.views",
        "peekOfCode": "def money(s):\n    try:\n        n = Decimal(s).quantize(Decimal(\".01\"))\n    except (ValueError, InvalidOperation):\n        return 0\n    return int(n * 100)\ndef slugify(s):\n    slug = s.strip().lower()\n    slug = re.sub(r\" \", \"-\", slug)\n    slug = re.sub(r\"[^\\w-]+\", \"\", slug)",
        "detail": "cla_backend.apps.means_test_api.views",
        "documentation": {}
    },
    {
        "label": "slugify",
        "kind": 2,
        "importPath": "cla_backend.apps.means_test_api.views",
        "description": "cla_backend.apps.means_test_api.views",
        "peekOfCode": "def slugify(s):\n    slug = s.strip().lower()\n    slug = re.sub(r\" \", \"-\", slug)\n    slug = re.sub(r\"[^\\w-]+\", \"\", slug)\n    return slug\ndef on_passported_benefits(benefits):\n    passported_benefits = [\n        \"income-support\",\n        \"income-based-job-seekers-allowance\",\n        \"income-related-employment-and-support-allowance\",",
        "detail": "cla_backend.apps.means_test_api.views",
        "documentation": {}
    },
    {
        "label": "on_passported_benefits",
        "kind": 2,
        "importPath": "cla_backend.apps.means_test_api.views",
        "description": "cla_backend.apps.means_test_api.views",
        "peekOfCode": "def on_passported_benefits(benefits):\n    passported_benefits = [\n        \"income-support\",\n        \"income-based-job-seekers-allowance\",\n        \"income-related-employment-and-support-allowance\",\n        \"guarantee-credit-or-universal-credit\",\n    ]\n    return any(benefit in benefits for benefit in passported_benefits)\ndef on_nass_benefits(benefits):\n    return \"immigrationasylum\" in benefits",
        "detail": "cla_backend.apps.means_test_api.views",
        "documentation": {}
    },
    {
        "label": "on_nass_benefits",
        "kind": 2,
        "importPath": "cla_backend.apps.means_test_api.views",
        "description": "cla_backend.apps.means_test_api.views",
        "peekOfCode": "def on_nass_benefits(benefits):\n    return \"immigrationasylum\" in benefits",
        "detail": "cla_backend.apps.means_test_api.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.notifications.migrations.0001_initial",
        "description": "cla_backend.apps.notifications.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [migrations.swappable_dependency(settings.AUTH_USER_MODEL)]\n    operations = [\n        migrations.CreateModel(\n            name=\"Notification\",\n            fields=[\n                (\"id\", models.AutoField(verbose_name=\"ID\", serialize=False, auto_created=True, primary_key=True)),\n                (\n                    \"created\",\n                    model_utils.fields.AutoCreatedField(",
        "detail": "cla_backend.apps.notifications.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.notifications.migrations.0002_schedule",
        "description": "cla_backend.apps.notifications.migrations.0002_schedule",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notifications', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Schedule',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, verbose_name='created', editable=False)),",
        "detail": "cla_backend.apps.notifications.migrations.0002_schedule",
        "documentation": {}
    },
    {
        "label": "NotificationAPIMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.notifications.tests.views.mixins.notification_api",
        "description": "cla_backend.apps.notifications.tests.views.mixins.notification_api",
        "peekOfCode": "class NotificationAPIMixin(SimpleResourceAPIMixin):\n    LOOKUP_KEY = \"pk\"\n    API_URL_BASE_NAME = \"notifications\"\n    RESOURCE_RECIPE = \"notifications.notification\"\n    def setUp(self):\n        super(NotificationAPIMixin, self).setUp()\n        self.notifications = make_recipe(\"notifications.notification\", _quantity=2)\n        make_recipe(\"notifications.notification_out_of_time\", _quantity=2)\n    def test_get_allowed(self):\n        \"\"\"",
        "detail": "cla_backend.apps.notifications.tests.views.mixins.notification_api",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 2,
        "importPath": "cla_backend.apps.notifications.tests.mommy_recipes",
        "description": "cla_backend.apps.notifications.tests.mommy_recipes",
        "peekOfCode": "def now():\n    return datetime.datetime.utcnow().replace(tzinfo=pytz.utc)\ndef hour_in_past():\n    return now() - datetime.timedelta(hours=1)\ndef hour_in_future():\n    return now() + datetime.timedelta(hours=1)\ndef hours_in_future():\n    return now() + datetime.timedelta(hours=2)\nnotification = Recipe(Notification, notification=seq(\"Notification\"), start_time=hour_in_past, end_time=hour_in_future)\nnotification_out_of_time = Recipe(",
        "detail": "cla_backend.apps.notifications.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "hour_in_past",
        "kind": 2,
        "importPath": "cla_backend.apps.notifications.tests.mommy_recipes",
        "description": "cla_backend.apps.notifications.tests.mommy_recipes",
        "peekOfCode": "def hour_in_past():\n    return now() - datetime.timedelta(hours=1)\ndef hour_in_future():\n    return now() + datetime.timedelta(hours=1)\ndef hours_in_future():\n    return now() + datetime.timedelta(hours=2)\nnotification = Recipe(Notification, notification=seq(\"Notification\"), start_time=hour_in_past, end_time=hour_in_future)\nnotification_out_of_time = Recipe(\n    Notification, notification=seq(\"Notification\"), start_time=hour_in_future, end_time=hours_in_future\n)",
        "detail": "cla_backend.apps.notifications.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "hour_in_future",
        "kind": 2,
        "importPath": "cla_backend.apps.notifications.tests.mommy_recipes",
        "description": "cla_backend.apps.notifications.tests.mommy_recipes",
        "peekOfCode": "def hour_in_future():\n    return now() + datetime.timedelta(hours=1)\ndef hours_in_future():\n    return now() + datetime.timedelta(hours=2)\nnotification = Recipe(Notification, notification=seq(\"Notification\"), start_time=hour_in_past, end_time=hour_in_future)\nnotification_out_of_time = Recipe(\n    Notification, notification=seq(\"Notification\"), start_time=hour_in_future, end_time=hours_in_future\n)",
        "detail": "cla_backend.apps.notifications.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "hours_in_future",
        "kind": 2,
        "importPath": "cla_backend.apps.notifications.tests.mommy_recipes",
        "description": "cla_backend.apps.notifications.tests.mommy_recipes",
        "peekOfCode": "def hours_in_future():\n    return now() + datetime.timedelta(hours=2)\nnotification = Recipe(Notification, notification=seq(\"Notification\"), start_time=hour_in_past, end_time=hour_in_future)\nnotification_out_of_time = Recipe(\n    Notification, notification=seq(\"Notification\"), start_time=hour_in_future, end_time=hours_in_future\n)",
        "detail": "cla_backend.apps.notifications.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "notification",
        "kind": 5,
        "importPath": "cla_backend.apps.notifications.tests.mommy_recipes",
        "description": "cla_backend.apps.notifications.tests.mommy_recipes",
        "peekOfCode": "notification = Recipe(Notification, notification=seq(\"Notification\"), start_time=hour_in_past, end_time=hour_in_future)\nnotification_out_of_time = Recipe(\n    Notification, notification=seq(\"Notification\"), start_time=hour_in_future, end_time=hours_in_future\n)",
        "detail": "cla_backend.apps.notifications.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "notification_out_of_time",
        "kind": 5,
        "importPath": "cla_backend.apps.notifications.tests.mommy_recipes",
        "description": "cla_backend.apps.notifications.tests.mommy_recipes",
        "peekOfCode": "notification_out_of_time = Recipe(\n    Notification, notification=seq(\"Notification\"), start_time=hour_in_future, end_time=hours_in_future\n)",
        "detail": "cla_backend.apps.notifications.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "NotificationsScheduleTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.notifications.tests.test_tasks",
        "description": "cla_backend.apps.notifications.tests.test_tasks",
        "peekOfCode": "class NotificationsScheduleTestCase(TestCase):\n    def mock_send_notifications(self, notifications):\n        self.notifications = notifications\n        self.mock_send_notifications_called = True\n    def setUp(self):\n        self.patcher = mock.patch(\"notifications.periodic_tasks._send_notifications\", self.mock_send_notifications)\n        self.mock_send_notifications_called = False\n        self.patcher.start()\n    def tearDown(self):\n        super(NotificationsScheduleTestCase, self).tearDown()",
        "detail": "cla_backend.apps.notifications.tests.test_tasks",
        "documentation": {}
    },
    {
        "label": "NotificationAdmin",
        "kind": 6,
        "importPath": "cla_backend.apps.notifications.admin",
        "description": "cla_backend.apps.notifications.admin",
        "peekOfCode": "class NotificationAdmin(admin.ModelAdmin):\n    exclude = (\"created_by\", \"description\", \"type\")\n    list_display = (\"id\", \"notification\", \"type\", \"start_time\", \"end_time\")\n    actions = (set_end_time_in_past,)\n    def save_model(self, request, obj, form, change):\n        if not obj.pk:\n            obj.created_by = request.user\n        obj.save()\nadmin.site.register(Notification, NotificationAdmin)",
        "detail": "cla_backend.apps.notifications.admin",
        "documentation": {}
    },
    {
        "label": "set_end_time_in_past",
        "kind": 2,
        "importPath": "cla_backend.apps.notifications.admin",
        "description": "cla_backend.apps.notifications.admin",
        "peekOfCode": "def set_end_time_in_past(modeladmin, request, queryset):\n    queryset.update(end_time=datetime.datetime.now())\nset_end_time_in_past.short_description = \"Set end time in the past to \" \"remove notification\"\nclass NotificationAdmin(admin.ModelAdmin):\n    exclude = (\"created_by\", \"description\", \"type\")\n    list_display = (\"id\", \"notification\", \"type\", \"start_time\", \"end_time\")\n    actions = (set_end_time_in_past,)\n    def save_model(self, request, obj, form, change):\n        if not obj.pk:\n            obj.created_by = request.user",
        "detail": "cla_backend.apps.notifications.admin",
        "documentation": {}
    },
    {
        "label": "set_end_time_in_past.short_description",
        "kind": 5,
        "importPath": "cla_backend.apps.notifications.admin",
        "description": "cla_backend.apps.notifications.admin",
        "peekOfCode": "set_end_time_in_past.short_description = \"Set end time in the past to \" \"remove notification\"\nclass NotificationAdmin(admin.ModelAdmin):\n    exclude = (\"created_by\", \"description\", \"type\")\n    list_display = (\"id\", \"notification\", \"type\", \"start_time\", \"end_time\")\n    actions = (set_end_time_in_past,)\n    def save_model(self, request, obj, form, change):\n        if not obj.pk:\n            obj.created_by = request.user\n        obj.save()\nadmin.site.register(Notification, NotificationAdmin)",
        "detail": "cla_backend.apps.notifications.admin",
        "documentation": {}
    },
    {
        "label": "NOTIFICATION_TYPES",
        "kind": 5,
        "importPath": "cla_backend.apps.notifications.constants",
        "description": "cla_backend.apps.notifications.constants",
        "peekOfCode": "NOTIFICATION_TYPES = ((\"alert\", \"Alert\"), (\"notification\", \"Notification\"))",
        "detail": "cla_backend.apps.notifications.constants",
        "documentation": {}
    },
    {
        "label": "NotificationManager",
        "kind": 6,
        "importPath": "cla_backend.apps.notifications.models",
        "description": "cla_backend.apps.notifications.models",
        "peekOfCode": "class NotificationManager(models.Manager):\n    def live(self):\n        now = timezone.now()\n        return self.get_queryset().filter(start_time__lt=now, end_time__gt=now)\nclass ScheduleManager(models.Manager):\n    def live(self):\n        now = timezone.now()\n        return self.get_queryset().filter(\n            notification__start_time__lt=now,\n            notification__end_time__gt=now,",
        "detail": "cla_backend.apps.notifications.models",
        "documentation": {}
    },
    {
        "label": "ScheduleManager",
        "kind": 6,
        "importPath": "cla_backend.apps.notifications.models",
        "description": "cla_backend.apps.notifications.models",
        "peekOfCode": "class ScheduleManager(models.Manager):\n    def live(self):\n        now = timezone.now()\n        return self.get_queryset().filter(\n            notification__start_time__lt=now,\n            notification__end_time__gt=now,\n            completed=False, retried__lt=MAX_NOTIFICATION_RETRIES\n        )\nclass Notification(TimeStampedModel):\n    type = models.CharField(max_length=20, choices=NOTIFICATION_TYPES, default=\"notification\")",
        "detail": "cla_backend.apps.notifications.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "cla_backend.apps.notifications.models",
        "description": "cla_backend.apps.notifications.models",
        "peekOfCode": "class Notification(TimeStampedModel):\n    type = models.CharField(max_length=20, choices=NOTIFICATION_TYPES, default=\"notification\")\n    notification = models.CharField(max_length=100)\n    description = models.CharField(max_length=600, null=True, blank=True)\n    notes = models.TextField(null=True, blank=True)\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n    created_by = models.ForeignKey(settings.AUTH_USER_MODEL)\n    objects = NotificationManager()\nclass Schedule(TimeStampedModel):",
        "detail": "cla_backend.apps.notifications.models",
        "documentation": {}
    },
    {
        "label": "Schedule",
        "kind": 6,
        "importPath": "cla_backend.apps.notifications.models",
        "description": "cla_backend.apps.notifications.models",
        "peekOfCode": "class Schedule(TimeStampedModel):\n    notification = models.ForeignKey(Notification)\n    retried = models.IntegerField(default=0)\n    status = models.CharField(max_length=20, default=\"scheduled\")\n    completed = models.BooleanField(default=False)\n    objects = ScheduleManager()\npost_save.connect(schedule_notifications_to_users, sender=Notification)\npost_delete.connect(un_schedule_notifications_to_users, sender=Notification)",
        "detail": "cla_backend.apps.notifications.models",
        "documentation": {}
    },
    {
        "label": "MAX_NOTIFICATION_RETRIES",
        "kind": 5,
        "importPath": "cla_backend.apps.notifications.models",
        "description": "cla_backend.apps.notifications.models",
        "peekOfCode": "MAX_NOTIFICATION_RETRIES = 3\nclass NotificationManager(models.Manager):\n    def live(self):\n        now = timezone.now()\n        return self.get_queryset().filter(start_time__lt=now, end_time__gt=now)\nclass ScheduleManager(models.Manager):\n    def live(self):\n        now = timezone.now()\n        return self.get_queryset().filter(\n            notification__start_time__lt=now,",
        "detail": "cla_backend.apps.notifications.models",
        "documentation": {}
    },
    {
        "label": "setup_periodic_tasks",
        "kind": 2,
        "importPath": "cla_backend.apps.notifications.periodic_tasks",
        "description": "cla_backend.apps.notifications.periodic_tasks",
        "peekOfCode": "def setup_periodic_tasks(sender, **kwargs):\n    sender.add_periodic_task(180, push_notifications.s(), name='Push notifications every 3 minutes')\n@current_app.task\ndef push_notifications():\n    logger.info(\"Notifications: Running push notifications\")\n    schedules = Schedule.objects.live()\n    if not schedules:\n        logger.info(\"Notifications: No schedules found\")\n        return\n    notifications = []",
        "detail": "cla_backend.apps.notifications.periodic_tasks",
        "documentation": {}
    },
    {
        "label": "push_notifications",
        "kind": 2,
        "importPath": "cla_backend.apps.notifications.periodic_tasks",
        "description": "cla_backend.apps.notifications.periodic_tasks",
        "peekOfCode": "def push_notifications():\n    logger.info(\"Notifications: Running push notifications\")\n    schedules = Schedule.objects.live()\n    if not schedules:\n        logger.info(\"Notifications: No schedules found\")\n        return\n    notifications = []\n    for schedule in schedules:\n        if schedule.notification not in notifications:\n            notifications.append(schedule.notification)",
        "detail": "cla_backend.apps.notifications.periodic_tasks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "cla_backend.apps.notifications.periodic_tasks",
        "description": "cla_backend.apps.notifications.periodic_tasks",
        "peekOfCode": "logger = get_logger(\"celery.beat\")\ndef setup_periodic_tasks(sender, **kwargs):\n    sender.add_periodic_task(180, push_notifications.s(), name='Push notifications every 3 minutes')\n@current_app.task\ndef push_notifications():\n    logger.info(\"Notifications: Running push notifications\")\n    schedules = Schedule.objects.live()\n    if not schedules:\n        logger.info(\"Notifications: No schedules found\")\n        return",
        "detail": "cla_backend.apps.notifications.periodic_tasks",
        "documentation": {}
    },
    {
        "label": "NotificationSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.notifications.serializers",
        "description": "cla_backend.apps.notifications.serializers",
        "peekOfCode": "class NotificationSerializer(serializers.ModelSerializer):\n    class Meta(object):\n        model = Notification\n        fields = (\"id\", \"type\", \"notification\", \"description\", \"start_time\", \"end_time\")",
        "detail": "cla_backend.apps.notifications.serializers",
        "documentation": {}
    },
    {
        "label": "schedule_notifications_to_users",
        "kind": 2,
        "importPath": "cla_backend.apps.notifications.signals",
        "description": "cla_backend.apps.notifications.signals",
        "peekOfCode": "def schedule_notifications_to_users(sender, instance, **kwargs):\n    from notifications.models import Schedule\n    now = timezone.now()\n    defaults = {}\n    # Reset schedule when updating notification to start in the future\n    if instance.start_time > now:\n        defaults[\"retried\"] = 0\n        defaults[\"completed\"] = False\n        defaults[\"status\"] = \"scheduled\"\n    Schedule.objects.update_or_create(notification=instance, defaults=defaults)",
        "detail": "cla_backend.apps.notifications.signals",
        "documentation": {}
    },
    {
        "label": "un_schedule_notifications_to_users",
        "kind": 2,
        "importPath": "cla_backend.apps.notifications.signals",
        "description": "cla_backend.apps.notifications.signals",
        "peekOfCode": "def un_schedule_notifications_to_users(sender, instance, **kwargs):\n    from notifications.models import Schedule\n    Schedule.objects.filter(notification=instance).delete()",
        "detail": "cla_backend.apps.notifications.signals",
        "documentation": {}
    },
    {
        "label": "BaseNotificationViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.notifications.views",
        "description": "cla_backend.apps.notifications.views",
        "peekOfCode": "class BaseNotificationViewSet(mixins.RetrieveModelMixin, mixins.ListModelMixin, CompatGenericViewSet):\n    serializer_class = NotificationSerializer\n    model = Notification\n    def get_queryset(self):\n        return Notification.objects.live()",
        "detail": "cla_backend.apps.notifications.views",
        "documentation": {}
    },
    {
        "label": "DynamicTimezoneDatabaseWrapper",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.db.backend.base",
        "description": "cla_backend.apps.reports.db.backend.base",
        "peekOfCode": "class DynamicTimezoneDatabaseWrapper(DatabaseWrapper):  # noqa: F405\n    \"\"\"\n    This exists to allow report generation SQL to set the time zone of the\n    connection without interference from Django, which normally tries to\n    ensure that all connections are UTC if `USE_TZ` is `True`.\n    \"\"\"\n    def create_cursor(self):\n        cursor = self.connection.cursor()\n        cursor.tzinfo_factory = local_tzinfo_factory\n        return cursor",
        "detail": "cla_backend.apps.reports.db.backend.base",
        "documentation": {}
    },
    {
        "label": "local_tzinfo_factory",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.db.backend.base",
        "description": "cla_backend.apps.reports.db.backend.base",
        "peekOfCode": "def local_tzinfo_factory(offset):\n    \"\"\"\n    Create a tzinfo object using the offset of the db connection. This ensures\n    that the datetimes returned are timezone aware and will be printed in the\n    reports with timezone information.\n    \"\"\"\n    return pytz.FixedOffset(offset)\nclass DynamicTimezoneDatabaseWrapper(DatabaseWrapper):  # noqa: F405\n    \"\"\"\n    This exists to allow report generation SQL to set the time zone of the",
        "detail": "cla_backend.apps.reports.db.backend.base",
        "documentation": {}
    },
    {
        "label": "DatabaseWrapper",
        "kind": 5,
        "importPath": "cla_backend.apps.reports.db.backend.base",
        "description": "cla_backend.apps.reports.db.backend.base",
        "peekOfCode": "DatabaseWrapper = DynamicTimezoneDatabaseWrapper",
        "detail": "cla_backend.apps.reports.db.backend.base",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.management.commands.mi_cb1_report",
        "description": "cla_backend.apps.reports.management.commands.mi_cb1_report",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"This runs the MCCB1sSLA report\"\n    def handle(self, *args, **options):\n        self.create_report()\n    @csrf_exempt\n    def create_report(self):\n        date_from = (date.today() - timedelta(days=7)).strftime(\"%Y-%m-%d\")\n        date_to = date.today().strftime(\"%Y-%m-%d\")\n        report_data = '{{\"action\": \"Export\", \"date_from\": \"{0}\", \"date_to\": \"{1}\"}}'.format(date_from, date_to)\n        web_user = get_web_user()",
        "detail": "cla_backend.apps.reports.management.commands.mi_cb1_report",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "cla_backend.apps.reports.management.commands.mi_cb1_report",
        "description": "cla_backend.apps.reports.management.commands.mi_cb1_report",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Command(BaseCommand):\n    help = \"This runs the MCCB1sSLA report\"\n    def handle(self, *args, **options):\n        self.create_report()\n    @csrf_exempt\n    def create_report(self):\n        date_from = (date.today() - timedelta(days=7)).strftime(\"%Y-%m-%d\")\n        date_to = date.today().strftime(\"%Y-%m-%d\")\n        report_data = '{{\"action\": \"Export\", \"date_from\": \"{0}\", \"date_to\": \"{1}\"}}'.format(date_from, date_to)",
        "detail": "cla_backend.apps.reports.management.commands.mi_cb1_report",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.management.commands.obiee_export",
        "description": "cla_backend.apps.reports.management.commands.obiee_export",
        "peekOfCode": "class Command(DocOptCommand):\n    docs = \"\"\"\n    Usage:\n        obiee_export <export_path> <diversity_keyphrase> [--datetime-from=<datetime>] [--datetime-to=<datetime>]\n    Options:\n        -h --help                   Show this screen.\n        --datetime-from=<datetime>  ISO 8601 datetime (default midnight yesterday)\n        --datetime-to=<datetime>    ISO 8601 datetime (default midnight today)\n    \"\"\"\n    filename = \"cla_database.zip\"",
        "detail": "cla_backend.apps.reports.management.commands.obiee_export",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.migrations.0001_initial",
        "description": "cla_backend.apps.reports.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [migrations.swappable_dependency(settings.AUTH_USER_MODEL)]\n    operations = [\n        migrations.CreateModel(\n            name=\"Export\",\n            fields=[\n                (\"id\", models.AutoField(verbose_name=\"ID\", serialize=False, auto_created=True, primary_key=True)),\n                (\n                    \"created\",\n                    model_utils.fields.AutoCreatedField(",
        "detail": "cla_backend.apps.reports.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.migrations.0002_auto_20160401_1205",
        "description": "cla_backend.apps.reports.migrations.0002_auto_20160401_1205",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"reports\", \"0001_initial\")]\n    operations = [LoadExtension(name=\"tablefunc\")]",
        "detail": "cla_backend.apps.reports.migrations.0002_auto_20160401_1205",
        "documentation": {}
    },
    {
        "label": "report_links",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.templatetags.reports_tags",
        "description": "cla_backend.apps.reports.templatetags.reports_tags",
        "peekOfCode": "def report_links():\n    abbrevs = re.compile(r\"(mi|eod|cb1|obiee)\", flags=re.IGNORECASE)\n    def replace_abbrev(full_name):\n        names = full_name.split()\n        names = [abbrevs.sub(lambda n: n.group(1).upper(), name) for name in names]\n        return u\" \".join(names)\n    def report_link(x):\n        return {\n            \"name\": replace_abbrev(title(x.name.replace(u\"_\", u\" \"))),\n            \"url\": reverse(\"reports:{0}\".format(x.name)),",
        "detail": "cla_backend.apps.reports.templatetags.reports_tags",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "cla_backend.apps.reports.templatetags.reports_tags",
        "description": "cla_backend.apps.reports.templatetags.reports_tags",
        "peekOfCode": "register = template.Library()\n@register.assignment_tag\ndef report_links():\n    abbrevs = re.compile(r\"(mi|eod|cb1|obiee)\", flags=re.IGNORECASE)\n    def replace_abbrev(full_name):\n        names = full_name.split()\n        names = [abbrevs.sub(lambda n: n.group(1).upper(), name) for name in names]\n        return u\" \".join(names)\n    def report_link(x):\n        return {",
        "detail": "cla_backend.apps.reports.templatetags.reports_tags",
        "documentation": {}
    },
    {
        "label": "MiSlaTestCaseBase",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_mi_sla_2_report",
        "description": "cla_backend.apps.reports.tests.test_mi_sla_2_report",
        "peekOfCode": "class MiSlaTestCaseBase(CallCentreFixedOperatingHours):\n    source = None\n    requires_action_at_minutes_offset = 60\n    def setUp(self):\n        super(MiSlaTestCaseBase, self).setUp()\n        self.current_case = None\n        self.now = self.get_default_dt()\n        self.timezone_mock = mock.patch.object(timezone, \"now\", lambda: self.now)\n        self.timezone_mock.start()\n        now_naive = timezone.make_naive(self.now, timezone.get_current_timezone())",
        "detail": "cla_backend.apps.reports.tests.test_mi_sla_2_report",
        "documentation": {}
    },
    {
        "label": "MiSlaTestCaseWeb",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_mi_sla_2_report",
        "description": "cla_backend.apps.reports.tests.test_mi_sla_2_report",
        "peekOfCode": "class MiSlaTestCaseWeb(MiSlaTestCaseBase, TestCase):\n    source = CASE_SOURCE.WEB\n    # fmt: off\n    \"\"\"\n    CB1\n    +--------------+-------------------------------+---------------------------------------------+--------------------------------+\n    |              |                               |                                             | Call answered                  |\n    |              |                               |                                             | after 30m                      |\n    |              | Call answered                 | Call answered                               | AND                            |\n    |              | Within 30m window             | before 30m window                           | current time within 72h window |",
        "detail": "cla_backend.apps.reports.tests.test_mi_sla_2_report",
        "documentation": {}
    },
    {
        "label": "MiSlaTestCasePhone",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_mi_sla_2_report",
        "description": "cla_backend.apps.reports.tests.test_mi_sla_2_report",
        "peekOfCode": "class MiSlaTestCasePhone(MiSlaTestCaseWeb):\n    source = CASE_SOURCE.PHONE\nclass MiSlaTestCaseSMS(MiSlaTestCaseBase, TestCase):\n    source = CASE_SOURCE.SMS\n    # fmt: off\n    \"\"\"\n    Rules used to determine if SLA1/SLA2 was missed\n    Note: A callback attempt is when the operator has clicked the start call button after successfully contacting the user\n    +-----------+--------------+-----------------------------------+--------------------------------------------------------------------+-------------------------------------------------------------------+\n    |           |              | Callback attempted within 2 hours | Callback attempted after 2 hours AND current time within 8h window | Callback attempted after 2 hours AND current time after 8h window |",
        "detail": "cla_backend.apps.reports.tests.test_mi_sla_2_report",
        "documentation": {}
    },
    {
        "label": "MiSlaTestCaseSMS",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_mi_sla_2_report",
        "description": "cla_backend.apps.reports.tests.test_mi_sla_2_report",
        "peekOfCode": "class MiSlaTestCaseSMS(MiSlaTestCaseBase, TestCase):\n    source = CASE_SOURCE.SMS\n    # fmt: off\n    \"\"\"\n    Rules used to determine if SLA1/SLA2 was missed\n    Note: A callback attempt is when the operator has clicked the start call button after successfully contacting the user\n    +-----------+--------------+-----------------------------------+--------------------------------------------------------------------+-------------------------------------------------------------------+\n    |           |              | Callback attempted within 2 hours | Callback attempted after 2 hours AND current time within 8h window | Callback attempted after 2 hours AND current time after 8h window |\n    +-----------+--------------+-----------------------------------+--------------------------------------------------------------------+-------------------------------------------------------------------+\n    |           | SLA 2 missed | FALSE                             | FALSE                                                              | TRUE                                                              |",
        "detail": "cla_backend.apps.reports.tests.test_mi_sla_2_report",
        "documentation": {}
    },
    {
        "label": "MiSlaTestCaseVoiceMail",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_mi_sla_2_report",
        "description": "cla_backend.apps.reports.tests.test_mi_sla_2_report",
        "peekOfCode": "class MiSlaTestCaseVoiceMail(MiSlaTestCaseSMS):\n    source = CASE_SOURCE.VOICEMAIL",
        "detail": "cla_backend.apps.reports.tests.test_mi_sla_2_report",
        "documentation": {}
    },
    {
        "label": "mock_now",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.tests.test_mi_sla_2_report",
        "description": "cla_backend.apps.reports.tests.test_mi_sla_2_report",
        "peekOfCode": "def mock_now(dt):\n    return dt\n@contextmanager\ndef patch_field(cls, field_name, dt):\n    field = cls._meta.get_field(field_name)\n    with mock.patch.object(field, \"default\", new=mock_now(dt)):\n        yield\nclass MiSlaTestCaseBase(CallCentreFixedOperatingHours):\n    source = None\n    requires_action_at_minutes_offset = 60",
        "detail": "cla_backend.apps.reports.tests.test_mi_sla_2_report",
        "documentation": {}
    },
    {
        "label": "patch_field",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.tests.test_mi_sla_2_report",
        "description": "cla_backend.apps.reports.tests.test_mi_sla_2_report",
        "peekOfCode": "def patch_field(cls, field_name, dt):\n    field = cls._meta.get_field(field_name)\n    with mock.patch.object(field, \"default\", new=mock_now(dt)):\n        yield\nclass MiSlaTestCaseBase(CallCentreFixedOperatingHours):\n    source = None\n    requires_action_at_minutes_offset = 60\n    def setUp(self):\n        super(MiSlaTestCaseBase, self).setUp()\n        self.current_case = None",
        "detail": "cla_backend.apps.reports.tests.test_mi_sla_2_report",
        "documentation": {}
    },
    {
        "label": "MiSlaTestCaseBase",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_mi_sla_report",
        "description": "cla_backend.apps.reports.tests.test_mi_sla_report",
        "peekOfCode": "class MiSlaTestCaseBase(CallCentreFixedOperatingHours):\n    source = None\n    requires_action_at_minutes_offset = 60\n    def setUp(self):\n        super(MiSlaTestCaseBase, self).setUp()\n        self.current_case = None\n        self.now = self.get_default_dt()\n        self.timezone_mock = mock.patch.object(timezone, \"now\", lambda: self.now)\n        self.timezone_mock.start()\n        now_naive = timezone.make_naive(self.now, timezone.get_current_timezone())",
        "detail": "cla_backend.apps.reports.tests.test_mi_sla_report",
        "documentation": {}
    },
    {
        "label": "MiSlaTestCaseWeb",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_mi_sla_report",
        "description": "cla_backend.apps.reports.tests.test_mi_sla_report",
        "peekOfCode": "class MiSlaTestCaseWeb(MiSlaTestCaseBase, TestCase):\n    source = CASE_SOURCE.WEB\n    # fmt: off\n    \"\"\"\n    CB1\n    +--------------+-------------------------------+---------------------------------------------+--------------------------------+\n    |              |                               |                                             | Call answered                  |\n    |              |                               |                                             | after 30m                      |\n    |              | Call answered                 | Call answered                               | AND                            |\n    |              | Within 30m window             | before 30m window                           | current time within 72h window |",
        "detail": "cla_backend.apps.reports.tests.test_mi_sla_report",
        "documentation": {}
    },
    {
        "label": "MiSlaTestCasePhone",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_mi_sla_report",
        "description": "cla_backend.apps.reports.tests.test_mi_sla_report",
        "peekOfCode": "class MiSlaTestCasePhone(MiSlaTestCaseWeb):\n    source = CASE_SOURCE.PHONE\nclass MiSlaTestCaseSMS(MiSlaTestCaseBase, TestCase):\n    source = CASE_SOURCE.SMS\n    # fmt: off\n    \"\"\"\n    Rules used to determine if SLA1 was missed\n    Note: A callback attempt is when the operator has clicked the start call button after successfully contacting the user\n    +-----------+--------------+-----------------------------------+--------------------------------------------------------------------+-------------------------------------------------------------------+\n    |           |              | Callback attempted within 2 hours | Callback attempted after 2 hours AND current time within 8h window | Callback attempted after 2 hours AND current time after 8h window |",
        "detail": "cla_backend.apps.reports.tests.test_mi_sla_report",
        "documentation": {}
    },
    {
        "label": "MiSlaTestCaseSMS",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_mi_sla_report",
        "description": "cla_backend.apps.reports.tests.test_mi_sla_report",
        "peekOfCode": "class MiSlaTestCaseSMS(MiSlaTestCaseBase, TestCase):\n    source = CASE_SOURCE.SMS\n    # fmt: off\n    \"\"\"\n    Rules used to determine if SLA1 was missed\n    Note: A callback attempt is when the operator has clicked the start call button after successfully contacting the user\n    +-----------+--------------+-----------------------------------+--------------------------------------------------------------------+-------------------------------------------------------------------+\n    |           |              | Callback attempted within 2 hours | Callback attempted after 2 hours AND current time within 8h window | Callback attempted after 2 hours AND current time after 8h window |\n    +-----------+--------------+-----------------------------------+--------------------------------------------------------------------+-------------------------------------------------------------------+\n    | SMS       | SLA 1 missed | FALSE                             | TRUE                                                               | TRUE                                                              |",
        "detail": "cla_backend.apps.reports.tests.test_mi_sla_report",
        "documentation": {}
    },
    {
        "label": "MiSlaTestCaseVoiceMail",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_mi_sla_report",
        "description": "cla_backend.apps.reports.tests.test_mi_sla_report",
        "peekOfCode": "class MiSlaTestCaseVoiceMail(MiSlaTestCaseSMS):\n    source = CASE_SOURCE.VOICEMAIL",
        "detail": "cla_backend.apps.reports.tests.test_mi_sla_report",
        "documentation": {}
    },
    {
        "label": "mock_now",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.tests.test_mi_sla_report",
        "description": "cla_backend.apps.reports.tests.test_mi_sla_report",
        "peekOfCode": "def mock_now(dt):\n    return dt\n@contextmanager\ndef patch_field(cls, field_name, dt):\n    field = cls._meta.get_field(field_name)\n    with mock.patch.object(field, \"default\", new=mock_now(dt)):\n        yield\nclass MiSlaTestCaseBase(CallCentreFixedOperatingHours):\n    source = None\n    requires_action_at_minutes_offset = 60",
        "detail": "cla_backend.apps.reports.tests.test_mi_sla_report",
        "documentation": {}
    },
    {
        "label": "patch_field",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.tests.test_mi_sla_report",
        "description": "cla_backend.apps.reports.tests.test_mi_sla_report",
        "peekOfCode": "def patch_field(cls, field_name, dt):\n    field = cls._meta.get_field(field_name)\n    with mock.patch.object(field, \"default\", new=mock_now(dt)):\n        yield\nclass MiSlaTestCaseBase(CallCentreFixedOperatingHours):\n    source = None\n    requires_action_at_minutes_offset = 60\n    def setUp(self):\n        super(MiSlaTestCaseBase, self).setUp()\n        self.current_case = None",
        "detail": "cla_backend.apps.reports.tests.test_mi_sla_report",
        "documentation": {}
    },
    {
        "label": "DeleteExportFile",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_models",
        "description": "cla_backend.apps.reports.tests.test_models",
        "peekOfCode": "class DeleteExportFile(TestCase):\n    @patch(\"cla_backend.libs.aws.s3.ReportsS3.get_s3_connection\")\n    def test_delete_export_file_no_aws(self, mock_s3):\n        with patch(\"os.remove\") as mock_remove:\n            settings.AWS_REPORTS_STORAGE_BUCKET_NAME = \"\"\n            sender = MagicMock()\n            instance = MagicMock()\n            # delete_export_file(sender, instance=None, **kwargs)\n            delete_export_file(sender, instance)\n            assert mock_remove.called",
        "detail": "cla_backend.apps.reports.tests.test_models",
        "documentation": {}
    },
    {
        "label": "ReportsSQLColumnsMatchHeadersTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_reports",
        "description": "cla_backend.apps.reports.tests.test_reports",
        "peekOfCode": "class ReportsSQLColumnsMatchHeadersTestCase(TestCase):\n    def setUp(self):\n        super(ReportsSQLColumnsMatchHeadersTestCase, self).setUp()\n        make_recipe(\"cla_provider.Provider\")\n    def test_headers_count_matches_sql(self):\n        for n, i in vars(reports.forms).items():\n            if (\n                inspect.isclass(i)\n                and issubclass(i, reports.forms.SQLFileDateRangeReport)\n                and i != reports.forms.SQLFileDateRangeReport",
        "detail": "cla_backend.apps.reports.tests.test_reports",
        "documentation": {}
    },
    {
        "label": "ReportOrganisationColumnTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_reports",
        "description": "cla_backend.apps.reports.tests.test_reports",
        "peekOfCode": "class ReportOrganisationColumnTestCase(TestCase):\n    def test_mi_survey_dom1_extract_organisation_column(self):\n        pd = make_recipe(\"legalaid.personal_details\", safe_to_contact=CONTACT_SAFETY.SAFE, contact_for_research=True)\n        foo_org = make_recipe(\"call_centre.organisation\", name=\"Foo org\")\n        bar_org = make_recipe(\"call_centre.organisation\", name=\"Bar org\")\n        make_recipe(\"legalaid.case\", personal_details=pd, organisation=foo_org)\n        make_recipe(\"legalaid.case\", personal_details=pd, organisation=bar_org)\n        data = {\"date_from\": datetime.datetime.now(), \"date_to\": datetime.datetime.now()}\n        instance = reports.forms.MISurveyExtract(data=data)\n        instance.is_valid()",
        "detail": "cla_backend.apps.reports.tests.test_reports",
        "documentation": {}
    },
    {
        "label": "ReportMiAuditLogExtractTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_reports",
        "description": "cla_backend.apps.reports.tests.test_reports",
        "peekOfCode": "class ReportMiAuditLogExtractTestCase(TestCase):\n    def test_mi_case_audit_log_extract(self):\n        def get_expected(model, operator, audit):\n            return (\n                model.reference,\n                AuditLog.ACTIONS.VIEWED,\n                operator.user.username,\n                operator.organisation.name,\n                audit.created,\n            )",
        "detail": "cla_backend.apps.reports.tests.test_reports",
        "documentation": {}
    },
    {
        "label": "ReportsDateRangeValidationWorks",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_reports",
        "description": "cla_backend.apps.reports.tests.test_reports",
        "peekOfCode": "class ReportsDateRangeValidationWorks(TestCase):\n    def test_valid_date_range(self):\n        class T(reports.forms.DateRangeReportForm):\n            max_date_range = 5\n        now = datetime.datetime.now()\n        i = T(data={\"date_from\": now - datetime.timedelta(days=4), \"date_to\": now})\n        self.assertTrue(i.is_valid())\n        self.assertEqual(i.errors.keys(), [])\n    def test_invalid_date_range(self):\n        class T(reports.forms.DateRangeReportForm):",
        "detail": "cla_backend.apps.reports.tests.test_reports",
        "documentation": {}
    },
    {
        "label": "MIDuplicateCasesTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_reports",
        "description": "cla_backend.apps.reports.tests.test_reports",
        "peekOfCode": "class MIDuplicateCasesTestCase(TestCase):\n    def test_duplicate_cases(self):\n        # random data\n        for _ in range(20):\n            personal_details = make_recipe(\n                \"legalaid.personal_details\", _fill_optional=[\"full_name\", \"date_of_birth\", \"postcode\"]\n            )\n            make_recipe(\"legalaid.case\", personal_details=personal_details)\n        # data with one pair of duplicates\n        data = (",
        "detail": "cla_backend.apps.reports.tests.test_reports",
        "documentation": {}
    },
    {
        "label": "OBIEEExportOutputsZipTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_reports",
        "description": "cla_backend.apps.reports.tests.test_reports",
        "peekOfCode": "class OBIEEExportOutputsZipTestCase(TestCase):\n    def setUp(self):\n        self.td = tempfile.mkdtemp()\n        # actually test that it works\n        self.personal_details = make_recipe(\"legalaid.personal_details\")\n        save_diversity_data(self.personal_details.pk, {\"test\": \"test\"})\n        self.dt_from = datetime.datetime.now() - datetime.timedelta(days=1)\n        self.dt_to = datetime.datetime.now() + datetime.timedelta(days=1)\n    def test_zip_output(self):\n        e = OBIEEExporter(self.td, \"cla\", dt_from=self.dt_from, dt_to=self.dt_to)",
        "detail": "cla_backend.apps.reports.tests.test_reports",
        "documentation": {}
    },
    {
        "label": "TestKnowledgeBaseArticlesExport",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_reports",
        "description": "cla_backend.apps.reports.tests.test_reports",
        "peekOfCode": "class TestKnowledgeBaseArticlesExport(TestCase):\n    def setUp(self):\n        article_1, article_2, article_3, article4 = make_recipe(\"knowledgebase.article\", _quantity=4)\n        make_recipe(\"knowledgebase.telephone_number\", article=article_1, number=123)\n        make_recipe(\"knowledgebase.telephone_number\", article=article_1, number=456, name=\"special\")\n        make_recipe(\"knowledgebase.telephone_number\", article=article_2, number=789)\n        make_recipe(\"knowledgebase.article_category_matrix\", article=article_1, article_category__name=\"a category\")\n        make_recipe(\n            \"knowledgebase.article_category_matrix\",\n            article=article_1,",
        "detail": "cla_backend.apps.reports.tests.test_reports",
        "documentation": {}
    },
    {
        "label": "ReasonForContactingReportTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_reports",
        "description": "cla_backend.apps.reports.tests.test_reports",
        "peekOfCode": "class ReasonForContactingReportTestCase(TestCase):\n    def test_rfc(self):\n        referrers = [\n            \"Unknown\",\n            \"https://localhost/scope/diagnosis\",\n            \"https://localhost/scope/diagnosis/n131\",\n            \"https://localhost/scope/diagnosis?category=check\",\n            \"https://localhost/scope/diagnosis\",\n        ]\n        categories = [",
        "detail": "cla_backend.apps.reports.tests.test_reports",
        "documentation": {}
    },
    {
        "label": "OBIEEExportTaskTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_tasks",
        "description": "cla_backend.apps.reports.tests.test_tasks",
        "peekOfCode": "class OBIEEExportTaskTestCase(TestCase):\n    def setUp(self):\n        self.personal_details = make_recipe(\"legalaid.personal_details\")\n        save_diversity_data(self.personal_details.pk, {\"test\": \"test\"})\n        self.task = OBIEEExportTask()\n        self.task._create_export = mock.MagicMock()\n        self.task.send_to_s3 = mock.MagicMock()\n        self.user = make_user()\n    def run_task(self, passphrase):\n        today = datetime.datetime.today()",
        "detail": "cla_backend.apps.reports.tests.test_tasks",
        "documentation": {}
    },
    {
        "label": "MICB1ExportTaskTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_tasks",
        "description": "cla_backend.apps.reports.tests.test_tasks",
        "peekOfCode": "class MICB1ExportTaskTestCase(TestCase):\n    # test to check and see whether the code tries to contact aws if running locally.\n    def setUp(self):\n        # run(self, user_id, filename, form_class_name, post_data, *args, **kwargs):\n        self.task = ExportTask()\n        self.task._create_export = mock.MagicMock()\n        self.task.send_to_s3 = mock.MagicMock()\n        self.user = make_user()\n    def run_task(self):\n        date_from = \"03/07/2022\"",
        "detail": "cla_backend.apps.reports.tests.test_tasks",
        "documentation": {}
    },
    {
        "label": "RFCTaskTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_tasks",
        "description": "cla_backend.apps.reports.tests.test_tasks",
        "peekOfCode": "class RFCTaskTestCase(TestCase):\n    def setUp(self):\n        self.task = ReasonForContactingExportTask()\n        self.task._create_export = mock.MagicMock()\n        self.task.send_to_s3 = mock.MagicMock()\n        self.user = make_user()\n    def run_task(self):\n        date_from = datetime.datetime.now() - datetime.timedelta(days=1)\n        date_to = datetime.datetime.now() + datetime.timedelta(days=1)\n        file_name = \"cla_reasonforcontacting.zip\"",
        "detail": "cla_backend.apps.reports.tests.test_tasks",
        "documentation": {}
    },
    {
        "label": "DownloadFileTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tests.test_views",
        "description": "cla_backend.apps.reports.tests.test_views",
        "peekOfCode": "class DownloadFileTestCase(TestCase):\n    @patch(\"cla_backend.libs.aws.s3.ReportsS3.get_s3_connection\")\n    def test_download_no_aws(self, mock_s3):\n        # mock pythons open()\n        with patch(\"__builtin__.open\", mock_open(read_data=\"data\")) as mock_file:\n            mock_request = MagicMock()\n            # if file_name contains string \"schedule\"\n            # delete from the database doesn't occur.\n            file_name = \"scheduled\"\n            file_path = os.path.join(settings.TEMP_DIR, os.path.basename(file_name))",
        "detail": "cla_backend.apps.reports.tests.test_views",
        "documentation": {}
    },
    {
        "label": "ExportListView",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.api",
        "description": "cla_backend.apps.reports.api",
        "peekOfCode": "class ExportListView(generics.ListAPIView, generics.DestroyAPIView):\n    serializer_class = ExportSerializer\n    model = Export\n    permission_classes = (IsAdminUser,)\n    authentication_classes = (SessionAuthentication,)\n    scheduled = False\n    queryset = Export.objects.all()\n    def get_queryset(self):\n        if self.scheduled:\n            user = get_web_user()",
        "detail": "cla_backend.apps.reports.api",
        "documentation": {}
    },
    {
        "label": "EXPORT_STATUS",
        "kind": 5,
        "importPath": "cla_backend.apps.reports.constants",
        "description": "cla_backend.apps.reports.constants",
        "peekOfCode": "EXPORT_STATUS = Choices(\n    (\"CREATED\", \"created\", \"created\"), (\"FAILED\", \"failed\", \"failed\"), (\"STARTED\", \"started\", \"started\")\n)",
        "detail": "cla_backend.apps.reports.constants",
        "documentation": {}
    },
    {
        "label": "ConvertDateMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class ConvertDateMixin(object):\n    def _convert_date(self, d):\n        d = datetime.combine(d, time(hour=0, minute=0))\n        d = timezone.make_aware(d, timezone.get_current_timezone())\n        return d\nclass ReportForm(ConvertDateMixin, forms.Form):\n    def __init__(self, request=None, *args, **kwargs):\n        self.request = request\n        super(ReportForm, self).__init__(*args, **kwargs)\n    def get_headers(self):",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "ReportForm",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class ReportForm(ConvertDateMixin, forms.Form):\n    def __init__(self, request=None, *args, **kwargs):\n        self.request = request\n        super(ReportForm, self).__init__(*args, **kwargs)\n    def get_headers(self):\n        raise NotImplementedError\n    def get_rows(self):\n        for row in self.get_queryset():\n            yield row\n    def __iter__(self):",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "DateRangeReportForm",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class DateRangeReportForm(ReportForm):\n    date_from = forms.DateField(widget=widgets.AdminDateWidget)\n    date_to = forms.DateField(widget=widgets.AdminDateWidget)\n    max_date_range = None\n    def clean(self):\n        cleaned_data = super(DateRangeReportForm, self).clean()\n        if \"date_from\" in self.cleaned_data and \"date_to\" in self.cleaned_data:\n            # date_range will add an extra day onto to than that which is displayed,\n            # use the values from the user\n            from_input = self._convert_date(self.cleaned_data[\"date_from\"])",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "MonthRangeReportForm",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class MonthRangeReportForm(ReportForm):\n    date = forms.DateField(widget=MonthYearWidget(years=year_range(backward=4, forward=3)))\n    @property\n    def month(self):\n        return self._convert_date(self.cleaned_data[\"date\"])\nclass SQLFileReportMixin(object):\n    def __init__(self, *args, **kwargs):\n        super(SQLFileReportMixin, self).__init__(*args, **kwargs)\n        path = os.path.join(sql.__path__[0], self.QUERY_FILE)\n        with open(path, \"r\") as f:",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "SQLFileReportMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class SQLFileReportMixin(object):\n    def __init__(self, *args, **kwargs):\n        super(SQLFileReportMixin, self).__init__(*args, **kwargs)\n        path = os.path.join(sql.__path__[0], self.QUERY_FILE)\n        with open(path, \"r\") as f:\n            self.query = f.read()\n    def get_sql_params(self):\n        raise NotImplementedError()\n    def get_queryset(self):\n        return self.execute_query(self.query, self.get_sql_params())",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "SQLFileDateRangeReport",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class SQLFileDateRangeReport(SQLFileReportMixin, DateRangeReportForm):\n    def get_sql_params(self):\n        return self.date_range\nclass SQLFileMonthRangeReport(SQLFileReportMixin, MonthRangeReportForm):\n    def get_sql_params(self):\n        return (self.month.date(),)\nclass MIProviderAllocationExtract(SQLFileDateRangeReport):\n    QUERY_FILE = \"MIProviderAllocation.sql\"\n    def get_headers(self):\n        return [\"category\"] + self._get_provider_names()",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "SQLFileMonthRangeReport",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class SQLFileMonthRangeReport(SQLFileReportMixin, MonthRangeReportForm):\n    def get_sql_params(self):\n        return (self.month.date(),)\nclass MIProviderAllocationExtract(SQLFileDateRangeReport):\n    QUERY_FILE = \"MIProviderAllocation.sql\"\n    def get_headers(self):\n        return [\"category\"] + self._get_provider_names()\n    def _get_provider_names(self):\n        regex = re.compile(r\"[^ 0-9A-Za-z.-]+\")\n        return [re.sub(regex, \"\", p[\"name\"]) for p in Provider.objects.all().order_by(\"id\").values(\"name\")]",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "MIProviderAllocationExtract",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class MIProviderAllocationExtract(SQLFileDateRangeReport):\n    QUERY_FILE = \"MIProviderAllocation.sql\"\n    def get_headers(self):\n        return [\"category\"] + self._get_provider_names()\n    def _get_provider_names(self):\n        regex = re.compile(r\"[^ 0-9A-Za-z.-]+\")\n        return [re.sub(regex, \"\", p[\"name\"]) for p in Provider.objects.all().order_by(\"id\").values(\"name\")]\n    def get_sql_params(self):\n        params = super(MIProviderAllocationExtract, self).get_sql_params()\n        cols = '\"%s\" text' % '\" text, \"'.join(self.get_headers())",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "MIVoiceReport",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class MIVoiceReport(SQLFileMonthRangeReport):\n    QUERY_FILE = \"MIVoiceReport.sql\"\n    def get_headers(self):\n        return [\n            \"id\",\n            \"created\",\n            \"modified\",\n            \"provider_id\",\n            \"created_by_id\",\n            \"LAA_Reference\",",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "MICaseExtract",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class MICaseExtract(SQLFileDateRangeReport):\n    QUERY_FILE = \"MIExtractByOutcome.sql\"\n    passphrase = forms.CharField(\n        required=False, help_text=\"Optional. If not provided, the report will not include diversity data\"\n    )\n    def get_headers(self):\n        return [\n            \"LAA_Reference\",\n            \"Hash_ID\",\n            \"Case_ID\",",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "MICaseExtractExtended",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class MICaseExtractExtended(SQLFileDateRangeReport):\n    QUERY_FILE = \"MIExtractByOutcomeExtended.sql\"\n    passphrase = forms.CharField(\n        required=False, help_text=\"Optional. If not provided, the report will not include diversity data\"\n    )\n    def get_headers(self):\n        return [\n            \"LAA_Reference\",\n            \"Hash_ID\",\n            \"Case_ID\",",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "CaseDemographicsReport",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class CaseDemographicsReport(SQLFileDateRangeReport):\n    QUERY_FILE = \"CaseDemographicsReport.sql\"\n    passphrase = forms.CharField(\n        required=False, help_text=\"Optional. If not provided, the report will not include diversity data\"\n    )\n    def get_headers(self):\n        return [\n            \"LAA_Reference\",\n            \"Hash_ID\",\n            \"Case_ID\",",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "MIFeedbackExtract",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class MIFeedbackExtract(SQLFileDateRangeReport):\n    QUERY_FILE = \"MIExtractByFeedback.sql\"\n    def get_headers(self):\n        return [\n            \"LAA_Reference\",\n            \"Date_Feedback_Created\",\n            \"Feedback_Issue\",\n            \"Feedback_Justified\",\n            \"Feedback_Resolved\",\n            \"Text_Output\",",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "MIDuplicateCaseExtract",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class MIDuplicateCaseExtract(SQLFileDateRangeReport):\n    QUERY_FILE = \"MIDuplicateCases.sql\"\n    def get_headers(self):\n        return [\"LAA_Reference\", \"Reference\", \"Category\", \"Created\", \"Full_name\", \"DOB\", \"Postcode\"]\nclass MIAlternativeHelpExtract(SQLFileDateRangeReport):\n    QUERY_FILE = \"MIAlternativeHelp.sql\"\n    def get_headers(self):\n        return [\"Id\", \"Reference\", \"Laa_reference\", \"Category\", \"Created\", \"Code\", \"Notes\", \"F2F\", \"KB_Id\"]\nclass MIContactsPerCaseByCategoryExtract(SQLFileDateRangeReport):\n    QUERY_FILE = \"MIContactsPerCaseByCategory.sql\"",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "MIAlternativeHelpExtract",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class MIAlternativeHelpExtract(SQLFileDateRangeReport):\n    QUERY_FILE = \"MIAlternativeHelp.sql\"\n    def get_headers(self):\n        return [\"Id\", \"Reference\", \"Laa_reference\", \"Category\", \"Created\", \"Code\", \"Notes\", \"F2F\", \"KB_Id\"]\nclass MIContactsPerCaseByCategoryExtract(SQLFileDateRangeReport):\n    QUERY_FILE = \"MIContactsPerCaseByCategory.sql\"\n    def get_headers(self):\n        return [\"Reference\", \"LAA_Reference\", \"outcome_count\", \"category\", \"created\", \"outcomes\"]\n    def get_valid_outcomes(self):\n        return event_registry.filter(stops_timer=True, type=LOG_TYPES.OUTCOME).keys()",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "MIContactsPerCaseByCategoryExtract",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class MIContactsPerCaseByCategoryExtract(SQLFileDateRangeReport):\n    QUERY_FILE = \"MIContactsPerCaseByCategory.sql\"\n    def get_headers(self):\n        return [\"Reference\", \"LAA_Reference\", \"outcome_count\", \"category\", \"created\", \"outcomes\"]\n    def get_valid_outcomes(self):\n        return event_registry.filter(stops_timer=True, type=LOG_TYPES.OUTCOME).keys()\n    def get_sql_params(self):\n        return self.date_range + (self.get_valid_outcomes(),)\nclass MISurveyExtract(SQLFileDateRangeReport):\n    QUERY_FILE = \"MISurveyExtract.sql\"",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "MISurveyExtract",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class MISurveyExtract(SQLFileDateRangeReport):\n    QUERY_FILE = \"MISurveyExtract.sql\"\n    def get_headers(self):\n        return [\n            \"Hash_ID\",\n            \"created\",\n            \"modified\",\n            \"full_name\",\n            \"postcode\",\n            \"street\",",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "MICB1Extract",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class MICB1Extract(SQLFileDateRangeReport):\n    # This now only returns the information needed for SLA1, SLA2 is calculated slightly differently\n    # so we split it out.\n    QUERY_FILE = \"MICB1sSLA1.sql\"\n    # currently sunday to sunday\n    max_date_range = 8\n    def get_now(self):\n        return timezone.now()\n    def get_headers(self):\n        return [",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "MICB1ExtractSLA2",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class MICB1ExtractSLA2(SQLFileDateRangeReport):\n    # This only returns the information needed for SLA2, this has been copied from the original\n    # MICB1Extract and had SLA1 removed.\n    QUERY_FILE = \"MICB1sSLA2.sql\"\n    max_date_range = 8\n    def get_now(self):\n        return timezone.now()\n    def get_headers(self):\n        return [\n            \"LAA_Reference\",",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "MICB1ExtractAgilisys",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class MICB1ExtractAgilisys(SQLFileDateRangeReport):\n    QUERY_FILE = \"MICB1sSLAAgilisys.sql\"\n    max_date_range = 3\n    def get_headers(self):\n        return [\n            \"LAA_Reference\",\n            \"Hash_ID_personal_details_captured\",\n            \"Case_ID\",\n            \"Provider_ID_if_allocated\",\n            \"Law_Category_Name\",",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "MIDigitalCaseTypesExtract",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class MIDigitalCaseTypesExtract(SQLFileDateRangeReport):\n    QUERY_FILE = \"MIDigitalCaseTypes.sql\"\n    def get_headers(self):\n        return [\n            \"laa_reference\",\n            \"case_ref\",\n            \"contact_type\",\n            \"case_created_by\",\n            \"means_test_completed_online\",\n            \"call_me_back_only\",",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "MIEODReport",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class MIEODReport(SQLFileDateRangeReport):\n    QUERY_FILE = \"MIEOD.sql\"\n    def get_headers(self):\n        return [\n            \"LAA_Reference\",\n            \"Case_Reference\",\n            \"Case_Category\",\n            # 'EOD_Created',\n            \"EOD_Updated\",\n            \"EOD_Category\",",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "ComplaintsReport",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class ComplaintsReport(SQLFileDateRangeReport):\n    QUERY_FILE = \"Complaints.sql\"\n    def get_headers(self):\n        return [\n            \"LAA reference\",\n            \"Case reference\",\n            \"Full name\",\n            \"Case category\",\n            \"Created by operator\",\n            \"Operator manager owner\",",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "MIOBIEEExportExtract",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class MIOBIEEExportExtract(MonthRangeReportForm):\n    passphrase = forms.CharField(\n        help_text=\"This is required, the diversity passpharse is required to\"\n        \" decrypt the diversity information that people have given \"\n        \"to us. If not provided or wrong then the report will fail \"\n        \"to generate.\"\n    )\nclass MetricsReport(SQLFileDateRangeReport):\n    QUERY_FILE = \"metrics.sql\"\n    def get_sql_params(self):",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "MetricsReport",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class MetricsReport(SQLFileDateRangeReport):\n    QUERY_FILE = \"metrics.sql\"\n    def get_sql_params(self):\n        from_date, to_date = self.date_range\n        return {\"from_date\": from_date, \"to_date\": to_date}\n    def get_headers(self):\n        return [\n            \"Date\",\n            \"Diagnosis_total\",\n            \"Scope_unknown\",",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "MIExtractCaseViewAuditLog",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class MIExtractCaseViewAuditLog(SQLFileDateRangeReport):\n    QUERY_FILE = \"MIExtractCaseAuditLog.sql\"\n    def get_sql_params(self):\n        from_date, to_date = self.date_range\n        return {\"from_date\": from_date, \"to_date\": to_date}\n    def get_headers(self):\n        return [\"Case\", \"Action\", \"Operator\", \"Organisation\", \"Date\"]\nclass MIExtractComplaintViewAuditLog(SQLFileDateRangeReport):\n    QUERY_FILE = \"MIExtractComplaintAuditLog.sql\"\n    def get_sql_params(self):",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "MIExtractComplaintViewAuditLog",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class MIExtractComplaintViewAuditLog(SQLFileDateRangeReport):\n    QUERY_FILE = \"MIExtractComplaintAuditLog.sql\"\n    def get_sql_params(self):\n        from_date, to_date = self.date_range\n        return {\"from_date\": from_date, \"to_date\": to_date}\n    def get_headers(self):\n        return [\"Case\", \"Complaint Id\", \"Action\", \"Operator\", \"Organisation\", \"Date\"]\nclass ReasonsForContactingReport(DateRangeReportForm):\n    # initialise the dataset here and pass in the referrer...\n    def __init__(self, request=None, *args, **kwargs):",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "ReasonsForContactingReport",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class ReasonsForContactingReport(DateRangeReportForm):\n    # initialise the dataset here and pass in the referrer...\n    def __init__(self, request=None, *args, **kwargs):\n        self.request = request\n        self.referrer = None\n        super(ReportForm, self).__init__(*args, **kwargs)\n    def get_data_set(self):\n        from_date, to_date = self.date_range\n        return ReasonForContacting.get_report_category_stats(\n            start_date=from_date, end_date=to_date, referrer=self.referrer",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "AllKnowledgeBaseArticles",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "class AllKnowledgeBaseArticles(ReportForm):\n    def get_queryset(self):\n        return Article.objects.prefetch_related(\"articlecategorymatrix_set__article_category\", \"telephonenumber_set\")\n    def get_rows(self):\n        for article in self.get_queryset():\n            telephone_numbers = article.telephonenumber_set.all()\n            categories = article.articlecategorymatrix_set.all()\n            yield [\n                article.pk,\n                article.created,",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "year_range",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "def year_range(backward=0, forward=10):\n    this_year = date.today().year\n    return range(this_year - backward, this_year + forward)\nclass MonthRangeReportForm(ReportForm):\n    date = forms.DateField(widget=MonthYearWidget(years=year_range(backward=4, forward=3)))\n    @property\n    def month(self):\n        return self._convert_date(self.cleaned_data[\"date\"])\nclass SQLFileReportMixin(object):\n    def __init__(self, *args, **kwargs):",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "get_from_nth",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "def get_from_nth(items, n, attribute):\n    try:\n        item = items[n - 1]\n    except IndexError:\n        return \"\"\n    else:\n        return get_recursively(item, attribute)\ndef get_recursively(item, attribute):\n    attribute_parts = attribute.split(\".\")\n    value = getattr(item, attribute_parts[0])",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "get_recursively",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.forms",
        "description": "cla_backend.apps.reports.forms",
        "peekOfCode": "def get_recursively(item, attribute):\n    attribute_parts = attribute.split(\".\")\n    value = getattr(item, attribute_parts[0])\n    remaining = \".\".join(attribute_parts[1:])\n    if remaining:\n        return get_recursively(value, remaining)\n    return value if value is not None else \"\"",
        "detail": "cla_backend.apps.reports.forms",
        "documentation": {}
    },
    {
        "label": "Export",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.models",
        "description": "cla_backend.apps.reports.models",
        "peekOfCode": "class Export(TimeStampedModel):\n    user = models.ForeignKey(\"auth.User\")\n    path = models.CharField(max_length=255, null=True)\n    status = models.CharField(max_length=10, choices=EXPORT_STATUS)\n    task_id = models.CharField(max_length=100)\n    message = models.TextField()\n    @property\n    def link(self):\n        if self.path:\n            return \"/admin/reports/exports/download/%s\" % os.path.basename(self.path)",
        "detail": "cla_backend.apps.reports.models",
        "documentation": {}
    },
    {
        "label": "delete_export_file",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.models",
        "description": "cla_backend.apps.reports.models",
        "peekOfCode": "def delete_export_file(sender, instance=None, **kwargs):\n    # check if there is a connection to aws, otherwise delete locally\n    if settings.AWS_REPORTS_STORAGE_BUCKET_NAME:\n        try:\n            key = settings.EXPORT_DIR + os.path.basename(instance.path)\n            ReportsS3.delete_file(settings.AWS_REPORTS_STORAGE_BUCKET_NAME, key)\n        except (ValueError, AttributeError):\n            pass\n    else:\n        filepath = settings.TEMP_DIR + \"/\" + os.path.basename(instance.path)",
        "detail": "cla_backend.apps.reports.models",
        "documentation": {}
    },
    {
        "label": "ExportSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.serializers",
        "description": "cla_backend.apps.reports.serializers",
        "peekOfCode": "class ExportSerializer(serializers.ModelSerializer):\n    link = serializers.CharField()\n    class Meta:\n        model = Export\n        fields = (\"id\", \"link\", \"path\", \"status\", \"message\")",
        "detail": "cla_backend.apps.reports.serializers",
        "documentation": {}
    },
    {
        "label": "ExportTaskBase",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tasks",
        "description": "cla_backend.apps.reports.tasks",
        "peekOfCode": "class ExportTaskBase(Task):\n    def __init__(self):\n        self.filepath = \"\"\n        self.message = \"\"\n        self.export = None\n        self.form = None\n        self.user = None\n    def _create_export(self):\n        self.export = Export.objects.create(user=self.user, task_id=self.request.id, status=EXPORT_STATUS.started)\n    def _set_up_form(self, form_class_name, post_data):",
        "detail": "cla_backend.apps.reports.tasks",
        "documentation": {}
    },
    {
        "label": "ExportTask",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tasks",
        "description": "cla_backend.apps.reports.tasks",
        "peekOfCode": "class ExportTask(ExportTaskBase):\n    name = \"exporttask\"\n    def run(self, user_id, filename, form_class_name, post_data, *args, **kwargs):\n        self.user = User.objects.get(pk=user_id)\n        self._create_export()\n        self._set_up_form(form_class_name, post_data)\n        self.filepath = self._filepath(filename)\n        try:\n            csv_data = self.form.get_output()\n            csv_file = open(self.filepath, \"w\")",
        "detail": "cla_backend.apps.reports.tasks",
        "documentation": {}
    },
    {
        "label": "OBIEEExportTask",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tasks",
        "description": "cla_backend.apps.reports.tasks",
        "peekOfCode": "class OBIEEExportTask(ExportTaskBase):\n    name = \"obieeexporttask\"\n    def run(self, user_id, filename, form_class_name, post_data, *args, **kwargs):\n        \"\"\"\n        Export a full dump of the db for OBIEE export and make it available\n        for downloads\n        \"\"\"\n        self.user = User.objects.get(pk=user_id)\n        self._create_export()\n        self._set_up_form(form_class_name, post_data)",
        "detail": "cla_backend.apps.reports.tasks",
        "documentation": {}
    },
    {
        "label": "ReasonForContactingExportTask",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.tasks",
        "description": "cla_backend.apps.reports.tasks",
        "peekOfCode": "class ReasonForContactingExportTask(ExportTaskBase):\n    name = \"reasonforcontactingexport\"\n    def run(self, user_id, filename, form_class_name, post_data, *args, **kwargs):\n        \"\"\"\n        Export csv files for each of the referrers from reason for contacting\n        \"\"\"\n        self.tmp_export_path = tempfile.mkdtemp()\n        self.user = User.objects.get(pk=user_id)\n        self._create_export()\n        self._set_up_form(form_class_name, post_data)",
        "detail": "cla_backend.apps.reports.tasks",
        "documentation": {}
    },
    {
        "label": "csv_writer",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.tasks",
        "description": "cla_backend.apps.reports.tasks",
        "peekOfCode": "def csv_writer(csv_file):\n    yield csv.writer(csv_file)\ndef import_form(class_name):\n    mod = __import__(\"reports.forms\", fromlist=[class_name])\n    return getattr(mod, class_name)\nclass ExportTaskBase(Task):\n    def __init__(self):\n        self.filepath = \"\"\n        self.message = \"\"\n        self.export = None",
        "detail": "cla_backend.apps.reports.tasks",
        "documentation": {}
    },
    {
        "label": "import_form",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.tasks",
        "description": "cla_backend.apps.reports.tasks",
        "peekOfCode": "def import_form(class_name):\n    mod = __import__(\"reports.forms\", fromlist=[class_name])\n    return getattr(mod, class_name)\nclass ExportTaskBase(Task):\n    def __init__(self):\n        self.filepath = \"\"\n        self.message = \"\"\n        self.export = None\n        self.form = None\n        self.user = None",
        "detail": "cla_backend.apps.reports.tasks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "cla_backend.apps.reports.tasks",
        "description": "cla_backend.apps.reports.tasks",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@contextlib.contextmanager\ndef csv_writer(csv_file):\n    yield csv.writer(csv_file)\ndef import_form(class_name):\n    mod = __import__(\"reports.forms\", fromlist=[class_name])\n    return getattr(mod, class_name)\nclass ExportTaskBase(Task):\n    def __init__(self):\n        self.filepath = \"\"",
        "detail": "cla_backend.apps.reports.tasks",
        "documentation": {}
    },
    {
        "label": "tasks",
        "kind": 5,
        "importPath": "cla_backend.apps.reports.tasks",
        "description": "cla_backend.apps.reports.tasks",
        "peekOfCode": "tasks = [ExportTask, OBIEEExportTask(), ReasonForContactingExportTask()]\nfor task in tasks:\n    app.tasks.register(task)",
        "detail": "cla_backend.apps.reports.tasks",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "cla_backend.apps.reports.urls",
        "description": "cla_backend.apps.reports.urls",
        "peekOfCode": "urlpatterns = patterns(\n    \"\",\n    url(r\"^api/exports/$\", api.ExportListView.as_view(), name=\"exports\"),\n    url(r\"^api/exports/scheduled/$\", api.ExportListView.as_view(scheduled=True), name=\"scheduled\"),\n    url(r\"^api/exports/(?P<pk>[0-9]+)/$\", api.ExportListView.as_view(), name=\"exports\"),\n    url(r\"^exports/download/(?P<file_name>[A-Za-z0-9-_\\.]+)$\", views.download_file, name=\"exports\"),\n    url(\n        r\"^mi-provider-allocation-extract/$\",\n        views.mi_provider_allocation_extract,\n        name=\"mi_provider_allocation_extract\",",
        "detail": "cla_backend.apps.reports.urls",
        "documentation": {}
    },
    {
        "label": "OBIEEExporter",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.utils",
        "description": "cla_backend.apps.reports.utils",
        "peekOfCode": "class OBIEEExporter(object):\n    basic_sql_files = [\n        \"export_auth_user.sql\",\n        \"export_call_centre_operator.sql\",\n        \"export_diagnosis_diagnosis_traversal.sql\",\n        \"export_event_log_log.sql\",\n        \"export_knowledge_base_article.sql\",\n        \"export_knowledge_base_article_category.sql\",\n        \"export_knowledge_base_article_category_matrix.sql\",\n        \"export_legal_aid_adaptationdetails.sql\",",
        "detail": "cla_backend.apps.reports.utils",
        "documentation": {}
    },
    {
        "label": "get_reports_cursor",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.utils",
        "description": "cla_backend.apps.reports.utils",
        "peekOfCode": "def get_reports_cursor():\n    try:\n        return connections[\"reports\"].cursor()\n    except ConnectionDoesNotExist:\n        return connection.cursor()\ndef set_local_time_for_query(query):\n    \"\"\" Sets time zone to local time for the current transaction \"\"\"\n    return (\"SET LOCAL TIME ZONE '{timezone}'; {query};\").format(timezone=settings.TIME_ZONE, query=query)\nclass OBIEEExporter(object):\n    basic_sql_files = [",
        "detail": "cla_backend.apps.reports.utils",
        "documentation": {}
    },
    {
        "label": "set_local_time_for_query",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.utils",
        "description": "cla_backend.apps.reports.utils",
        "peekOfCode": "def set_local_time_for_query(query):\n    \"\"\" Sets time zone to local time for the current transaction \"\"\"\n    return (\"SET LOCAL TIME ZONE '{timezone}'; {query};\").format(timezone=settings.TIME_ZONE, query=query)\nclass OBIEEExporter(object):\n    basic_sql_files = [\n        \"export_auth_user.sql\",\n        \"export_call_centre_operator.sql\",\n        \"export_diagnosis_diagnosis_traversal.sql\",\n        \"export_event_log_log.sql\",\n        \"export_knowledge_base_article.sql\",",
        "detail": "cla_backend.apps.reports.utils",
        "documentation": {}
    },
    {
        "label": "report_view",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def report_view(request, form_class, title, template=\"case_report\", success_task=ExportTask, file_name=None):\n    admin_site_instance = AdminSite()\n    slug = re.sub(\"[^0-9a-zA-Z]+\", \"_\", title.lower()).strip(\"_\")\n    if not file_name:\n        filename = \"{0}.csv\".format(slug)\n    else:\n        filename = file_name\n    tmpl = \"admin/reports/{0}.html\".format(template)\n    form = form_class()\n    if valid_submit(request, form):",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "scheduled_report_view",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def scheduled_report_view(request, title):\n    tmpl = \"admin/reports/case_report.html\"\n    admin_site_instance = AdminSite()\n    return render(request, tmpl, {\"title\": title, \"has_permission\": admin_site_instance.has_permission(request)})\ndef valid_submit(request, form):\n    if request.method == \"POST\":\n        form.data = request.POST\n        form.is_bound = True\n        return form.is_valid()\n    return False",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "valid_submit",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def valid_submit(request, form):\n    if request.method == \"POST\":\n        form.data = request.POST\n        form.is_bound = True\n        return form.is_valid()\n    return False\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_provider_allocation_extract(request):\n    return report_view(request, MIProviderAllocationExtract, \"MI Provider Allocation\")",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "mi_provider_allocation_extract",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def mi_provider_allocation_extract(request):\n    return report_view(request, MIProviderAllocationExtract, \"MI Provider Allocation\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_case_extract(request):\n    return report_view(request, MICaseExtract, \"MI Case Extract\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_case_extract_extended(request):\n    return report_view(request, MICaseExtractExtended, \"MI Case Extract Extended\")",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "mi_case_extract",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def mi_case_extract(request):\n    return report_view(request, MICaseExtract, \"MI Case Extract\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_case_extract_extended(request):\n    return report_view(request, MICaseExtractExtended, \"MI Case Extract Extended\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_feedback_extract(request):\n    return report_view(request, MIFeedbackExtract, \"MI Feedback Extract\")",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "mi_case_extract_extended",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def mi_case_extract_extended(request):\n    return report_view(request, MICaseExtractExtended, \"MI Case Extract Extended\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_feedback_extract(request):\n    return report_view(request, MIFeedbackExtract, \"MI Feedback Extract\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_duplicate_case_extract(request):\n    return report_view(request, MIDuplicateCaseExtract, \"MI Duplicate Case Extract\")",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "mi_feedback_extract",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def mi_feedback_extract(request):\n    return report_view(request, MIFeedbackExtract, \"MI Feedback Extract\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_duplicate_case_extract(request):\n    return report_view(request, MIDuplicateCaseExtract, \"MI Duplicate Case Extract\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_contacts_extract(request):\n    return report_view(request, MIContactsPerCaseByCategoryExtract, \"MI Contacts Per Case By Category\")",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "mi_duplicate_case_extract",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def mi_duplicate_case_extract(request):\n    return report_view(request, MIDuplicateCaseExtract, \"MI Duplicate Case Extract\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_contacts_extract(request):\n    return report_view(request, MIContactsPerCaseByCategoryExtract, \"MI Contacts Per Case By Category\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_alternative_help_extract(request):\n    return report_view(request, MIAlternativeHelpExtract, \"MI Alternative Help Extract\")",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "mi_contacts_extract",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def mi_contacts_extract(request):\n    return report_view(request, MIContactsPerCaseByCategoryExtract, \"MI Contacts Per Case By Category\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_alternative_help_extract(request):\n    return report_view(request, MIAlternativeHelpExtract, \"MI Alternative Help Extract\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_survey_extract(request):\n    return report_view(request, MISurveyExtract, \"MI Survey Extract (ONLY RUN ON DOM1)\")",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "mi_alternative_help_extract",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def mi_alternative_help_extract(request):\n    return report_view(request, MIAlternativeHelpExtract, \"MI Alternative Help Extract\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_survey_extract(request):\n    return report_view(request, MISurveyExtract, \"MI Survey Extract (ONLY RUN ON DOM1)\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_cb1_extract(request):\n    if settings.SHOW_NEW_CB1:",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "mi_survey_extract",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def mi_survey_extract(request):\n    return report_view(request, MISurveyExtract, \"MI Survey Extract (ONLY RUN ON DOM1)\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_cb1_extract(request):\n    if settings.SHOW_NEW_CB1:\n        return scheduled_report_view(request, \"MI CB1 Extract\")\n    else:\n        return report_view(request, MICB1Extract, \"MI CB1 Extract\")\n@staff_member_required",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "mi_cb1_extract",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def mi_cb1_extract(request):\n    if settings.SHOW_NEW_CB1:\n        return scheduled_report_view(request, \"MI CB1 Extract\")\n    else:\n        return report_view(request, MICB1Extract, \"MI CB1 Extract\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_cb1_extract_sla_2(request):\n    return report_view(request, MICB1ExtractSLA2, \"MI CB1 Extract SLA 2\")\n@staff_member_required",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "mi_cb1_extract_sla_2",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def mi_cb1_extract_sla_2(request):\n    return report_view(request, MICB1ExtractSLA2, \"MI CB1 Extract SLA 2\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_cb1_extract_agilisys(request):\n    return report_view(request, MICB1ExtractAgilisys, \"MI CB1 Extract for Agilisys\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_voice_extract(request):\n    return report_view(request, MIVoiceReport, \"MI Voice Report\")",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "mi_cb1_extract_agilisys",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def mi_cb1_extract_agilisys(request):\n    return report_view(request, MICB1ExtractAgilisys, \"MI CB1 Extract for Agilisys\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_voice_extract(request):\n    return report_view(request, MIVoiceReport, \"MI Voice Report\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_digital_case_type_extract(request):\n    return report_view(request, MIDigitalCaseTypesExtract, \"MI Digital Case Types Report\")",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "mi_voice_extract",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def mi_voice_extract(request):\n    return report_view(request, MIVoiceReport, \"MI Voice Report\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_digital_case_type_extract(request):\n    return report_view(request, MIDigitalCaseTypesExtract, \"MI Digital Case Types Report\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_eod_extract(request):\n    return report_view(request, MIEODReport, \"MI EOD Report\")",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "mi_digital_case_type_extract",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def mi_digital_case_type_extract(request):\n    return report_view(request, MIDigitalCaseTypesExtract, \"MI Digital Case Types Report\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_eod_extract(request):\n    return report_view(request, MIEODReport, \"MI EOD Report\")\n@staff_member_required\n@permission_required(\"legalaid.run_complaints_report\")\ndef mi_complaints(request):\n    return report_view(request, ComplaintsReport, \"Complaints Report\")",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "mi_eod_extract",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def mi_eod_extract(request):\n    return report_view(request, MIEODReport, \"MI EOD Report\")\n@staff_member_required\n@permission_required(\"legalaid.run_complaints_report\")\ndef mi_complaints(request):\n    return report_view(request, ComplaintsReport, \"Complaints Report\")\n@staff_member_required\n@permission_required(\"legalaid.run_obiee_reports\")\ndef mi_obiee_extract(request):\n    return report_view(",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "mi_complaints",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def mi_complaints(request):\n    return report_view(request, ComplaintsReport, \"Complaints Report\")\n@staff_member_required\n@permission_required(\"legalaid.run_obiee_reports\")\ndef mi_obiee_extract(request):\n    return report_view(\n        request,\n        MIOBIEEExportExtract,\n        \"MI Export to Email for OBIEE\",\n        file_name=\"cla.database.zip\",",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "mi_obiee_extract",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def mi_obiee_extract(request):\n    return report_view(\n        request,\n        MIOBIEEExportExtract,\n        \"MI Export to Email for OBIEE\",\n        file_name=\"cla.database.zip\",\n        success_task=OBIEEExportTask,\n    )\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "metrics_report",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def metrics_report(request):\n    return report_view(request, MetricsReport, \"Metrics Report\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_case_view_audit_log_extract(request):\n    return report_view(request, MIExtractCaseViewAuditLog, \"MI Case Views Audit Log Extract\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_complaint_view_audit_log_extract(request):\n    return report_view(request, MIExtractComplaintViewAuditLog, \"MI Complaints Views Audit Log Extract\")",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "mi_case_view_audit_log_extract",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def mi_case_view_audit_log_extract(request):\n    return report_view(request, MIExtractCaseViewAuditLog, \"MI Case Views Audit Log Extract\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef mi_complaint_view_audit_log_extract(request):\n    return report_view(request, MIExtractComplaintViewAuditLog, \"MI Complaints Views Audit Log Extract\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef all_knowledgebase_articles(request):\n    return report_view(request, AllKnowledgeBaseArticles, \"Knowledge Base Articles\")",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "mi_complaint_view_audit_log_extract",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def mi_complaint_view_audit_log_extract(request):\n    return report_view(request, MIExtractComplaintViewAuditLog, \"MI Complaints Views Audit Log Extract\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef all_knowledgebase_articles(request):\n    return report_view(request, AllKnowledgeBaseArticles, \"Knowledge Base Articles\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef reasons_for_contacting(request):\n    return report_view(",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "all_knowledgebase_articles",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def all_knowledgebase_articles(request):\n    return report_view(request, AllKnowledgeBaseArticles, \"Knowledge Base Articles\")\n@staff_member_required\n@permission_required(\"legalaid.run_reports\")\ndef reasons_for_contacting(request):\n    return report_view(\n        request,\n        ReasonsForContactingReport,\n        \"Reasons for Contacting Export\",\n        file_name=\"cla_reasonforcontacting.zip\",",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "reasons_for_contacting",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def reasons_for_contacting(request):\n    return report_view(\n        request,\n        ReasonsForContactingReport,\n        \"Reasons for Contacting Export\",\n        file_name=\"cla_reasonforcontacting.zip\",\n        success_task=ReasonForContactingExportTask,\n    )\n@staff_member_required\ndef download_file(request, file_name=\"\", *args, **kwargs):",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "download_file",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def download_file(request, file_name=\"\", *args, **kwargs):\n    # check if there is a connection to aws, otherwise download from local TEMP_DIR\n    if settings.AWS_REPORTS_STORAGE_BUCKET_NAME:\n        bucket_name = settings.AWS_REPORTS_STORAGE_BUCKET_NAME\n        key = settings.EXPORT_DIR + file_name\n        obj = ReportsS3.download_file(bucket_name, key)\n        if obj is None:\n            raise Http404(\"Export does not exist\")\n        response = HttpResponse(obj[\"body\"])\n        for key, val in obj[\"headers\"].items():",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "case_demographic_report",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def case_demographic_report(request):\n    return report_view(request, CaseDemographicsReport, \"Case Demographic Report\")\ndef delete_record(user_id, file_name):\n    try:\n        export_record = Export.objects.get(user_id=user_id, path__endswith=file_name)\n        export_record.delete()\n    except Export.DoesNotExist:\n        raise Http404(\"Export does not exist\")",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "delete_record",
        "kind": 2,
        "importPath": "cla_backend.apps.reports.views",
        "description": "cla_backend.apps.reports.views",
        "peekOfCode": "def delete_record(user_id, file_name):\n    try:\n        export_record = Export.objects.get(user_id=user_id, path__endswith=file_name)\n        export_record.delete()\n    except Export.DoesNotExist:\n        raise Http404(\"Export does not exist\")",
        "detail": "cla_backend.apps.reports.views",
        "documentation": {}
    },
    {
        "label": "MonthYearWidget",
        "kind": 6,
        "importPath": "cla_backend.apps.reports.widgets",
        "description": "cla_backend.apps.reports.widgets",
        "peekOfCode": "class MonthYearWidget(Widget):\n    \"\"\"\n    A Widget that splits date input into two <select> boxes for month and year,\n    with 'day' defaulting to the first of the month.\n    Based on SelectDateWidget, in\n    django/trunk/django/forms/extras/widgets.py\n    \"\"\"\n    none_value = (0, \"---\")\n    month_field = \"%s_month\"\n    year_field = \"%s_year\"",
        "detail": "cla_backend.apps.reports.widgets",
        "documentation": {}
    },
    {
        "label": "RE_DATE",
        "kind": 5,
        "importPath": "cla_backend.apps.reports.widgets",
        "description": "cla_backend.apps.reports.widgets",
        "peekOfCode": "RE_DATE = re.compile(r\"(\\d{4})-(\\d\\d?)-(\\d\\d?)$\")\nclass MonthYearWidget(Widget):\n    \"\"\"\n    A Widget that splits date input into two <select> boxes for month and year,\n    with 'day' defaulting to the first of the month.\n    Based on SelectDateWidget, in\n    django/trunk/django/forms/extras/widgets.py\n    \"\"\"\n    none_value = (0, \"---\")\n    month_field = \"%s_month\"",
        "detail": "cla_backend.apps.reports.widgets",
        "documentation": {}
    },
    {
        "label": "HealthChecksTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.status.tests.healthchecks_tests",
        "description": "cla_backend.apps.status.tests.healthchecks_tests",
        "peekOfCode": "class HealthChecksTestCase(unittest.TestCase):\n    def test_healthcheck_is_registered(self):\n        registry.load_healthchecks()\n        expected_names = \"check_disk\"\n        healthcheck_names = [healthcheck.__name__ for healthcheck in registry._registry]\n        self.assertIn(expected_names, healthcheck_names)\n    @mock.patch(\"os.statvfs\")\n    def test_disk_space_check_passes_when_more_than_2_percent_space_is_available(self, stat_mock):\n        stat_mock.return_value.f_bavail = 3 * 1024\n        stat_mock.return_value.f_blocks = 100 * 1024",
        "detail": "cla_backend.apps.status.tests.healthchecks_tests",
        "documentation": {}
    },
    {
        "label": "SmokeTests",
        "kind": 6,
        "importPath": "cla_backend.apps.status.tests.smoketests",
        "description": "cla_backend.apps.status.tests.smoketests",
        "peekOfCode": "class SmokeTests(unittest.TestCase):\n    def test_can_access_db(self):\n        \"\"\"\n        access the database\n        \"\"\"\n        cursor = connection.cursor()\n        cursor.execute(\"SELECT 1\")\n        row = cursor.fetchone()\n        self.assertEqual(1, row[0])\n    def test_can_access_celery(self):",
        "detail": "cla_backend.apps.status.tests.smoketests",
        "documentation": {}
    },
    {
        "label": "check_disk",
        "kind": 2,
        "importPath": "cla_backend.apps.status.healthchecks",
        "description": "cla_backend.apps.status.healthchecks",
        "peekOfCode": "def check_disk():\n    stat = os.statvfs(os.getcwd())\n    available_mb = (stat.f_bavail * stat.f_frsize) / (1024.0 ** 2)\n    total_mb = (stat.f_blocks * stat.f_frsize) / (1024.0 ** 2)\n    available_percent = available_mb / total_mb * 100\n    status = available_percent > 2.0\n    return status",
        "detail": "cla_backend.apps.status.healthchecks",
        "documentation": {}
    },
    {
        "label": "MaintenanceModeMiddleware",
        "kind": 6,
        "importPath": "cla_backend.apps.status.middleware",
        "description": "cla_backend.apps.status.middleware",
        "peekOfCode": "class MaintenanceModeMiddleware(object):\n    MAINTENANCE_PATH = \"/maintenance\"\n    EXEMPT_PATHS = [\n        \"/status\",\n        \"/status/ping.json\",\n        \"/status/status.json\",\n        \"/status/healthcheck.json\",\n        MAINTENANCE_PATH,\n    ]\n    def process_request(self, request):",
        "detail": "cla_backend.apps.status.middleware",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "cla_backend.apps.status.urls",
        "description": "cla_backend.apps.status.urls",
        "peekOfCode": "urlpatterns = patterns(\n    \"\",\n    url(r\"^$\", views.status),\n    url(r\"^status.json$\", views.smoketests),\n    url(r\"^ping.json$\", views.PingJsonView.as_view(**settings.PING_JSON_KEYS), name=\"ping_json\"),\n    url(r\"^healthcheck.json$\", HealthcheckView.as_view(), name=\"healthcheck_json\"),\n)",
        "detail": "cla_backend.apps.status.urls",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "kind": 6,
        "importPath": "cla_backend.apps.status.views",
        "description": "cla_backend.apps.status.views",
        "peekOfCode": "class JSONResponse(HttpResponse):\n    def __init__(self, data, **kwargs):\n        content = JSONRenderer().render(data)\n        kwargs[\"content_type\"] = \"application/json\"\n        super(JSONResponse, self).__init__(content, **kwargs)\n@csrf_exempt\ndef status(request):\n    if request.method == \"GET\":\n        message = \"\"\n        c = None",
        "detail": "cla_backend.apps.status.views",
        "documentation": {}
    },
    {
        "label": "PingJsonView",
        "kind": 6,
        "importPath": "cla_backend.apps.status.views",
        "description": "cla_backend.apps.status.views",
        "peekOfCode": "class PingJsonView(BasePingJsonView):\n    CONTRACT_2018_ENABLED_key = None\nclass MaintenanceModeView(TemplateView):\n    template_name = \"maintenance.html\"\n    def dispatch(self, request, *args, **kwargs):\n        context = self.get_context_data(**kwargs)\n        return self.render_to_response(context, status=503)",
        "detail": "cla_backend.apps.status.views",
        "documentation": {}
    },
    {
        "label": "MaintenanceModeView",
        "kind": 6,
        "importPath": "cla_backend.apps.status.views",
        "description": "cla_backend.apps.status.views",
        "peekOfCode": "class MaintenanceModeView(TemplateView):\n    template_name = \"maintenance.html\"\n    def dispatch(self, request, *args, **kwargs):\n        context = self.get_context_data(**kwargs)\n        return self.render_to_response(context, status=503)",
        "detail": "cla_backend.apps.status.views",
        "documentation": {}
    },
    {
        "label": "status",
        "kind": 2,
        "importPath": "cla_backend.apps.status.views",
        "description": "cla_backend.apps.status.views",
        "peekOfCode": "def status(request):\n    if request.method == \"GET\":\n        message = \"\"\n        c = None\n        try:\n            c = connection.cursor()\n            c.execute(\"SELECT 1\")\n            row = c.fetchone()\n            db_ready = row[0] == 1\n            return JSONResponse({\"db\": {\"ready\": db_ready, \"message\": message}})",
        "detail": "cla_backend.apps.status.views",
        "documentation": {}
    },
    {
        "label": "smoketests",
        "kind": 2,
        "importPath": "cla_backend.apps.status.views",
        "description": "cla_backend.apps.status.views",
        "peekOfCode": "def smoketests(request):\n    \"\"\"\n    Run smoke tests and return results as JSON datastructure\n    \"\"\"\n    from cla_backend.apps.status.tests.smoketests import SmokeTests\n    return JSONResponse(smoketest(SmokeTests))\nclass PingJsonView(BasePingJsonView):\n    CONTRACT_2018_ENABLED_key = None\nclass MaintenanceModeView(TemplateView):\n    template_name = \"maintenance.html\"",
        "detail": "cla_backend.apps.status.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.timer.migrations.0001_initial",
        "description": "cla_backend.apps.timer.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"legalaid\", \"0001_initial\"), migrations.swappable_dependency(settings.AUTH_USER_MODEL)]\n    operations = [\n        migrations.CreateModel(\n            name=\"Timer\",\n            fields=[\n                (\"id\", models.AutoField(verbose_name=\"ID\", serialize=False, auto_created=True, primary_key=True)),\n                (\n                    \"created\",\n                    model_utils.fields.AutoCreatedField(",
        "detail": "cla_backend.apps.timer.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.timer.migrations.0002_only_1_running_constraint_20150127_1512",
        "description": "cla_backend.apps.timer.migrations.0002_only_1_running_constraint_20150127_1512",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"timer\", \"0001_initial\")]\n    operations = [migrations.RunSQL(sql)]",
        "detail": "cla_backend.apps.timer.migrations.0002_only_1_running_constraint_20150127_1512",
        "documentation": {}
    },
    {
        "label": "sql",
        "kind": 5,
        "importPath": "cla_backend.apps.timer.migrations.0002_only_1_running_constraint_20150127_1512",
        "description": "cla_backend.apps.timer.migrations.0002_only_1_running_constraint_20150127_1512",
        "peekOfCode": "sql = \"\"\"\nCREATE UNIQUE INDEX timer_single_running\n    ON timer_timer (created_by_id)\n    WHERE (cancelled = FALSE and stopped IS NULL);\n\"\"\"\nclass Migration(migrations.Migration):\n    dependencies = [(\"timer\", \"0001_initial\")]\n    operations = [migrations.RunSQL(sql)]",
        "detail": "cla_backend.apps.timer.migrations.0002_only_1_running_constraint_20150127_1512",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "cla_backend.apps.timer.migrations.0003_auto_20170410_1527",
        "description": "cla_backend.apps.timer.migrations.0003_auto_20170410_1527",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [(\"timer\", \"0002_only_1_running_constraint_20150127_1512\")]\n    operations = [\n        migrations.AlterField(\n            model_name=\"timer\",\n            name=\"created\",\n            field=timer.models.CurrentTimestampDateTimeField(\n                default=timer.models.postgres_now, verbose_name=\"created\", editable=False\n            ),\n            preserve_default=True,",
        "detail": "cla_backend.apps.timer.migrations.0003_auto_20170410_1527",
        "documentation": {}
    },
    {
        "label": "timer",
        "kind": 5,
        "importPath": "cla_backend.apps.timer.tests.mommy_recipes",
        "description": "cla_backend.apps.timer.tests.mommy_recipes",
        "peekOfCode": "timer = Recipe(Timer)",
        "detail": "cla_backend.apps.timer.tests.mommy_recipes",
        "documentation": {}
    },
    {
        "label": "RunningTimerManagerTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.timer.tests.test_managers",
        "description": "cla_backend.apps.timer.tests.test_managers",
        "peekOfCode": "class RunningTimerManagerTestCase(TestCase):\n    def test_query_set(self):\n        timer1 = make_recipe(\"timer.Timer\", stopped=None)\n        make_recipe(\"timer.Timer\", stopped=timezone.now())\n        timer3 = make_recipe(\"timer.Timer\", stopped=None)\n        make_recipe(\"timer.Timer\", cancelled=True)\n        timers = Timer.running_objects.all()\n        self.assertItemsEqual(timers, [timer1, timer3])\n    def test_get_by_user_fails_with_multiple_timers(self):\n        try:",
        "detail": "cla_backend.apps.timer.tests.test_managers",
        "documentation": {}
    },
    {
        "label": "TimerTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.timer.tests.test_models",
        "description": "cla_backend.apps.timer.tests.test_models",
        "peekOfCode": "class TimerTestCase(TestCase):\n    def test_start(self):\n        self.assertEqual(Timer.objects.count(), 0)\n        user = make_user()\n        timer = Timer.start(user)\n        self.assertEqual(Timer.objects.count(), 1)\n        self.assertEqual(Timer.objects.first(), timer)\n    def test_stop_fails_if_already_stopped(self):\n        timer = make_recipe(\"timer.Timer\", stopped=timezone.now())\n        self.assertRaises(ValueError, timer.stop)",
        "detail": "cla_backend.apps.timer.tests.test_models",
        "documentation": {}
    },
    {
        "label": "GetTimerTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.timer.tests.test_utils",
        "description": "cla_backend.apps.timer.tests.test_utils",
        "peekOfCode": "class GetTimerTestCase(TestCase):\n    def test_fails_without_authenticated_user(self):\n        user = mock.MagicMock()\n        user.is_authenticated.return_value = False\n        self.assertRaises(ValueError, get_timer, user)\n    def test_returns_None_wihout_timer_running(self):\n        user = mock.MagicMock(pk=-1)\n        self.assertEqual(get_timer(user), None)\n    def test_returns_timer_running(self):\n        timer = make_recipe(\"timer.Timer\")",
        "detail": "cla_backend.apps.timer.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "CreateTimerTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.timer.tests.test_utils",
        "description": "cla_backend.apps.timer.tests.test_utils",
        "peekOfCode": "class CreateTimerTestCase(TestCase):\n    def test_fails_with_another_timer_running(self):\n        user = mock.MagicMock(pk=-1)\n        self.assertRaises(ValueError, create_timer, user)\n    def test_creates_timer(self):\n        self.assertEqual(Timer.objects.count(), 0)\n        user = make_user()\n        timer = create_timer(user)\n        self.assertEqual(Timer.objects.count(), 1)\n        timer = Timer.objects.first()",
        "detail": "cla_backend.apps.timer.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "GetOrCreateTimerTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.timer.tests.test_utils",
        "description": "cla_backend.apps.timer.tests.test_utils",
        "peekOfCode": "class GetOrCreateTimerTestCase(TestCase):\n    def test_returns_get(self):\n        timer = make_recipe(\"timer.Timer\")\n        self.assertEqual(Timer.objects.count(), 1)\n        db_timer, created = get_or_create_timer(timer.created_by)\n        self.assertEqual(Timer.objects.count(), 1)\n        self.assertEqual(db_timer, timer)\n        self.assertEqual(created, False)\n    def test_returns_created(self):\n        self.assertEqual(Timer.objects.count(), 0)",
        "detail": "cla_backend.apps.timer.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "StopTimerTestCase",
        "kind": 6,
        "importPath": "cla_backend.apps.timer.tests.test_utils",
        "description": "cla_backend.apps.timer.tests.test_utils",
        "peekOfCode": "class StopTimerTestCase(TestCase):\n    def test_fails_without_running_timer(self):\n        user = mock.MagicMock(pk=-1)\n        self.assertRaises(ValueError, stop_timer, user)\n    def test_fails_without_log(self):\n        timer = make_recipe(\"timer.Timer\")\n        self.assertEqual(timer.stopped, None)\n        self.assertRaises(ValueError, stop_timer, timer.created_by)\n    def test_doesnt_fail_without_log_and_cancelled(self):\n        timer = make_recipe(\"timer.Timer\")",
        "detail": "cla_backend.apps.timer.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "TimerAPIMixin",
        "kind": 6,
        "importPath": "cla_backend.apps.timer.tests.test_views",
        "description": "cla_backend.apps.timer.tests.test_views",
        "peekOfCode": "class TimerAPIMixin(object):\n    def setUp(self):\n        super(TimerAPIMixin, self).setUp()\n        self.detail_url = reverse(\"%s:timer-detail\" % self.API_URL_NAMESPACE)\n    def test_methods_not_allowed(self):\n        self._test_patch_not_allowed(self.detail_url)\n        self._test_put_not_allowed(self.detail_url)\n    def test_methods_not_authorized(self):\n        self._test_get_not_authorized(self.detail_url, token=self.invalid_token)\n        self._test_post_not_authorized(self.detail_url, token=self.invalid_token)",
        "detail": "cla_backend.apps.timer.tests.test_views",
        "documentation": {}
    },
    {
        "label": "RunningTimerManager",
        "kind": 6,
        "importPath": "cla_backend.apps.timer.managers",
        "description": "cla_backend.apps.timer.managers",
        "peekOfCode": "class RunningTimerManager(models.Manager):\n    def get_queryset(self):\n        qs = super(RunningTimerManager, self).get_queryset()\n        return qs.filter(stopped__isnull=True, cancelled=False)\n    def get_by_user(self, user_pk):\n        timers = list(self.filter(created_by=user_pk))\n        if len(timers) > 1:\n            raise MultipleObjectsReturned()\n        return timers[0]",
        "detail": "cla_backend.apps.timer.managers",
        "documentation": {}
    },
    {
        "label": "CurrentTimestampDateTimeField",
        "kind": 6,
        "importPath": "cla_backend.apps.timer.models",
        "description": "cla_backend.apps.timer.models",
        "peekOfCode": "class CurrentTimestampDateTimeField(models.DateTimeField):\n    \"\"\"\n    Field class to allow using postgres NOW() function for setting a\n    field to a current timestamp\n    \"\"\"\n    def get_db_prep_value(self, value, connection, prepared=False):\n        return (\n            value\n            if value == DB_NOW\n            else super(CurrentTimestampDateTimeField, self).get_db_prep_value(value, connection, prepared=False)",
        "detail": "cla_backend.apps.timer.models",
        "documentation": {}
    },
    {
        "label": "Timer",
        "kind": 6,
        "importPath": "cla_backend.apps.timer.models",
        "description": "cla_backend.apps.timer.models",
        "peekOfCode": "class Timer(models.Model):\n    created_by = models.ForeignKey(settings.AUTH_USER_MODEL)\n    stopped = CurrentTimestampDateTimeField(blank=True, null=True)\n    linked_case = models.ForeignKey(Case, blank=True, null=True)\n    cancelled = models.BooleanField(default=False)\n    created = CurrentTimestampDateTimeField(_(\"created\"), default=postgres_now, editable=False)\n    modified = models.DateTimeField(_(\"modified\"), auto_now=True, editable=False)\n    objects = models.Manager()\n    running_objects = RunningTimerManager()\n    def __unicode__(self):",
        "detail": "cla_backend.apps.timer.models",
        "documentation": {}
    },
    {
        "label": "postgres_now",
        "kind": 2,
        "importPath": "cla_backend.apps.timer.models",
        "description": "cla_backend.apps.timer.models",
        "peekOfCode": "def postgres_now():\n    \"\"\"\n    Uses postgres NOW() function for setting value in the database\n    This is because on distributed system you can't guarantee that the\n    times across systems are the same. Because creates uses the\n    database time, so should the stoppet field to keep timings\n    consistent.\n    Previously there have been time missmatches where stopped was less\n    than created which resulted in negative time spent on case.\n    Function has been separated out for mocking in some of the tests.",
        "detail": "cla_backend.apps.timer.models",
        "documentation": {}
    },
    {
        "label": "DB_NOW",
        "kind": 5,
        "importPath": "cla_backend.apps.timer.models",
        "description": "cla_backend.apps.timer.models",
        "peekOfCode": "DB_NOW = \"NOW()\"\ndef postgres_now():\n    \"\"\"\n    Uses postgres NOW() function for setting value in the database\n    This is because on distributed system you can't guarantee that the\n    times across systems are the same. Because creates uses the\n    database time, so should the stoppet field to keep timings\n    consistent.\n    Previously there have been time missmatches where stopped was less\n    than created which resulted in negative time spent on case.",
        "detail": "cla_backend.apps.timer.models",
        "documentation": {}
    },
    {
        "label": "TimerSerializer",
        "kind": 6,
        "importPath": "cla_backend.apps.timer.serializers",
        "description": "cla_backend.apps.timer.serializers",
        "peekOfCode": "class TimerSerializer(ClaModelSerializer):\n    class Meta(object):\n        model = Timer\n        fields = (\"created\",)",
        "detail": "cla_backend.apps.timer.serializers",
        "documentation": {}
    },
    {
        "label": "get_timer",
        "kind": 2,
        "importPath": "cla_backend.apps.timer.utils",
        "description": "cla_backend.apps.timer.utils",
        "peekOfCode": "def get_timer(user):\n    if not user.is_authenticated():\n        raise ValueError(u\"User is not authenticated\")\n    try:\n        return Timer.running_objects.get_by_user(user.pk)\n    except IndexError:\n        pass\n    return None\ndef create_timer(user):\n    current_timer = get_timer(user)",
        "detail": "cla_backend.apps.timer.utils",
        "documentation": {}
    },
    {
        "label": "create_timer",
        "kind": 2,
        "importPath": "cla_backend.apps.timer.utils",
        "description": "cla_backend.apps.timer.utils",
        "peekOfCode": "def create_timer(user):\n    current_timer = get_timer(user)\n    if current_timer:\n        raise ValueError(u\"There is already a timer running. Stop that first.\")\n    return _create_timer(user)\ndef get_or_create_timer(user):\n    created = False\n    current_timer = get_timer(user)\n    if not current_timer:\n        current_timer = _create_timer(user)",
        "detail": "cla_backend.apps.timer.utils",
        "documentation": {}
    },
    {
        "label": "get_or_create_timer",
        "kind": 2,
        "importPath": "cla_backend.apps.timer.utils",
        "description": "cla_backend.apps.timer.utils",
        "peekOfCode": "def get_or_create_timer(user):\n    created = False\n    current_timer = get_timer(user)\n    if not current_timer:\n        current_timer = _create_timer(user)\n        created = True\n    return current_timer, created\ndef stop_timer(user):\n    current_timer = get_timer(user)\n    if not current_timer:",
        "detail": "cla_backend.apps.timer.utils",
        "documentation": {}
    },
    {
        "label": "stop_timer",
        "kind": 2,
        "importPath": "cla_backend.apps.timer.utils",
        "description": "cla_backend.apps.timer.utils",
        "peekOfCode": "def stop_timer(user):\n    current_timer = get_timer(user)\n    if not current_timer:\n        raise ValueError(u\"No timer found\")\n    current_timer.stop()",
        "detail": "cla_backend.apps.timer.utils",
        "documentation": {}
    },
    {
        "label": "BaseTimerViewSet",
        "kind": 6,
        "importPath": "cla_backend.apps.timer.views",
        "description": "cla_backend.apps.timer.views",
        "peekOfCode": "class BaseTimerViewSet(viewsets.ViewSetMixin, views.APIView):\n    \"\"\"\n    \"\"\"\n    serializer_class = TimerSerializer\n    def get_serializer(self, obj):\n        return self.serializer_class(obj).data\n    def create(self, request, *args, **kwargs):\n        return self.get_or_create(request, *args, **kwargs)\n    def get_or_create(self, request, *args, **kwargs):\n        try:",
        "detail": "cla_backend.apps.timer.views",
        "documentation": {}
    },
    {
        "label": "ClientError",
        "kind": 6,
        "importPath": "cla_backend.libs.aws.s3",
        "description": "cla_backend.libs.aws.s3",
        "peekOfCode": "class ClientError(ClientError):\n    pass\nclass StaticS3Storage(S3Boto3Storage):\n    default_acl = \"public-read\"\nclass ReportsS3:\n    @classmethod\n    def clean_name(cls, name):\n        return name.strip(\"/\")\n    @classmethod\n    def get_s3_connection(cls, bucket_name):",
        "detail": "cla_backend.libs.aws.s3",
        "documentation": {}
    },
    {
        "label": "StaticS3Storage",
        "kind": 6,
        "importPath": "cla_backend.libs.aws.s3",
        "description": "cla_backend.libs.aws.s3",
        "peekOfCode": "class StaticS3Storage(S3Boto3Storage):\n    default_acl = \"public-read\"\nclass ReportsS3:\n    @classmethod\n    def clean_name(cls, name):\n        return name.strip(\"/\")\n    @classmethod\n    def get_s3_connection(cls, bucket_name):\n        return S3Boto3Storage(bucket=bucket_name)\n    @classmethod",
        "detail": "cla_backend.libs.aws.s3",
        "documentation": {}
    },
    {
        "label": "ReportsS3",
        "kind": 6,
        "importPath": "cla_backend.libs.aws.s3",
        "description": "cla_backend.libs.aws.s3",
        "peekOfCode": "class ReportsS3:\n    @classmethod\n    def clean_name(cls, name):\n        return name.strip(\"/\")\n    @classmethod\n    def get_s3_connection(cls, bucket_name):\n        return S3Boto3Storage(bucket=bucket_name)\n    @classmethod\n    def download_file(cls, bucket_name, key):\n        try:",
        "detail": "cla_backend.libs.aws.s3",
        "documentation": {}
    },
    {
        "label": "MortgageCapRemovalMixin",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "description": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "peekOfCode": "class MortgageCapRemovalMixin(object):\n    def setUp(self):\n        super(MortgageCapRemovalMixin, self).setUp()\n        if CapitalCalculator.is_post_mortgage_cap_removal():\n            self.expected_results_key = \"post_mortgage_cap_removal\"\n        else:\n            self.expected_results_key = \"pre_mortgage_cap_removal\"\nclass TestCapitalCalculator(MortgageCapRemovalMixin, unittest.TestCase):\n    def _assert_calculations(self, expected_results, capital_calculator, capital):\n        self.assertEqual(capital, expected_results[\"capital\"])",
        "detail": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "documentation": {}
    },
    {
        "label": "TestCapitalCalculator",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "description": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "peekOfCode": "class TestCapitalCalculator(MortgageCapRemovalMixin, unittest.TestCase):\n    def _assert_calculations(self, expected_results, capital_calculator, capital):\n        self.assertEqual(capital, expected_results[\"capital\"])\n        if \"main_property_equity\" in expected_results:\n            self.assertEqual(capital_calculator.main_property[\"equity\"], expected_results[\"main_property_equity\"])\n        if \"other_properties_equity\" in expected_results:\n            self.assertEqual(\n                capital_calculator.other_properties[0][\"equity\"], expected_results[\"other_properties_equity\"]\n            )\n        self.assertDictEqual(capital_calculator.calcs, expected_results[\"calcs\"])",
        "detail": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "documentation": {}
    },
    {
        "label": "CalculatorTestBase",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "description": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "peekOfCode": "class CalculatorTestBase(MortgageCapRemovalMixin, unittest.TestCase):\n    def get_default_case_data(self, **kwargs):\n        \"\"\"\n        gives default case_data with each kwarg\n        overridden\n        :param kwargs: things to overwrite in the default case_data\n        :return: CaseData object with default values\n        \"\"\"\n        return CaseData(**fixtures.get_default_case_data(**kwargs))\nclass TestCalculator(CalculatorTestBase):",
        "detail": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "documentation": {}
    },
    {
        "label": "TestCalculator",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "description": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "peekOfCode": "class TestCalculator(CalculatorTestBase):\n    def setUp(self):\n        self.default_calculator = EligibilityChecker(self.get_default_case_data())\n    def test_gross_income_is_eligible(self):\n        too_little_money = constants.BASE_LIMIT - 1\n        case_data = self.get_default_case_data(you__income__earnings=too_little_money)\n        checker = EligibilityChecker(case_data)\n        self.assertTrue(checker.is_gross_income_eligible())\n        self.assertDictEqual(checker.calcs, {\"gross_income\": constants.BASE_LIMIT - 1})\n    def test_gross_income_is_ineligible(self):",
        "detail": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "documentation": {}
    },
    {
        "label": "TestApplicantOnBenefitsCalculator",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "description": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "peekOfCode": "class TestApplicantOnBenefitsCalculator(CalculatorTestBase):\n    \"\"\"\n    An applicant on passported benefits should be eligible\n    solely on their disposable capital income test.\n    They should not be asked income questions.\n    \"\"\"\n    def test_applicant_on_single_benefits_no_capital_is_eligible(self):\n        case_data = self.get_default_case_data(facts__on_passported_benefits=True)\n        checker = EligibilityChecker(case_data)\n        is_elig = checker.is_eligible()",
        "detail": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "documentation": {}
    },
    {
        "label": "TestApplicantPensionerCoupleOnBenefits",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "description": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "peekOfCode": "class TestApplicantPensionerCoupleOnBenefits(CalculatorTestBase):\n    def _test_pensioner_on_benefits(self, property_value, mortgage, other_assets):\n        case_data = self.get_default_case_data(\n            facts__on_passported_benefits=True,\n            facts__is_you_or_your_partner_over_60=True,\n            property_data=[\n                {\"value\": property_value, \"mortgage_left\": mortgage, \"share\": 100, \"disputed\": False, \"main\": True}\n            ],\n        )\n        case_data.you.savings.asset_balance = other_assets",
        "detail": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "documentation": {}
    },
    {
        "label": "TestApplicantSinglePensionerNotOnBenefits",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "description": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "peekOfCode": "class TestApplicantSinglePensionerNotOnBenefits(CalculatorTestBase):\n    def _test_pensioner(self, case_data):\n        checker = EligibilityChecker(case_data)\n        is_elig = checker.is_eligible()\n        return is_elig, checker\n    def test_pensioner_200k2p_house_100k1p_mort_800001_savings(self):\n        \"\"\"\n        if over 60 and on benefits, 300K.02 house with 100K.01 mortgage and\n        8000.01+.01+.01 of other assets should fail.\n        \"\"\"",
        "detail": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "documentation": {}
    },
    {
        "label": "GrossIncomeTestCase",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "description": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "peekOfCode": "class GrossIncomeTestCase(CalculatorTestBase):\n    def test_gross_income(self):\n        \"\"\"\n        TEST: Gross income == mocked total income\n        \"\"\"\n        case_data = mock.MagicMock(total_income=500)\n        ec = EligibilityChecker(case_data)\n        self.assertEqual(ec.gross_income, 500)\n    def test_on_passported_benefits_is_gross_income_eligible(self):\n        \"\"\"",
        "detail": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "documentation": {}
    },
    {
        "label": "DisposableIncomeTestCase",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "description": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "peekOfCode": "class DisposableIncomeTestCase(unittest.TestCase):\n    def test_disposable_income_with_children(self):\n        \"\"\"\n        TEST: with mocked gross_income,\n        has_partner = True\n        we check that\n        disposable capital returns gross_income minus\n        allowance for dependent children > 1,\n        income_tax_and_ni > 1,\n        maintainable > 1",
        "detail": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "documentation": {}
    },
    {
        "label": "DisposableCapitalTestCase",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "description": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "peekOfCode": "class DisposableCapitalTestCase(unittest.TestCase):\n    def test_disposable_capital_assets_subtracts_pensioner_disregard(self):\n        \"\"\"\n        TEST:\n            mocked liquid capital and property capital\n            not disputed partner\n            is_you_or_partner_over_60 = True\n            properties_value == mortgages left == 0\n            non_disputed_liquid_capital > pensioner_disregard\n        result:",
        "detail": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "documentation": {}
    },
    {
        "label": "IsEligibleTestCase",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "description": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "peekOfCode": "class IsEligibleTestCase(unittest.TestCase):\n    def create_a_dummy_citizen(\n        self,\n        is_category=False,\n        is_passported=None,\n        is_nass_benefits=None,\n        is_gross_income=None,\n        is_disposable_income=None,\n        is_disposable_capital=None,\n        has_passported_proceedings_letter=None,",
        "detail": "cla_backend.libs.eligibility_calculator.tests.test_calculator",
        "documentation": {}
    },
    {
        "label": "TestCaseData",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.tests.test_case_data",
        "description": "cla_backend.libs.eligibility_calculator.tests.test_case_data",
        "peekOfCode": "class TestCaseData(unittest.TestCase):\n    def test_total_income_calculation(self):\n        default_data = get_default_case_data(\n            you__income__earnings=0,\n            you__income__self_employment_drawings=0,\n            you__income__benefits=0,\n            you__income__tax_credits=0,\n            you__income__child_benefits=0,\n            you__income__maintenance_received=0,\n            you__income__pension=60,",
        "detail": "cla_backend.libs.eligibility_calculator.tests.test_case_data",
        "documentation": {}
    },
    {
        "label": "DisposableCapitalTestCase",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.tests.test_constants",
        "description": "cla_backend.libs.eligibility_calculator.tests.test_constants",
        "peekOfCode": "class DisposableCapitalTestCase(unittest.TestCase):\n    def test_get_limit_immigration(self):\n        self.assertEqual(constants.get_disposable_capital_limit(\"immigration\"), constants.LIMIT_IMMIGRATION)\n    def test_get_limit_debt(self):\n        self.assertEqual(constants.get_disposable_capital_limit(\"debt\"), constants.LIMIT_DEFAULT)\nclass GrossIncomeTestCase(unittest.TestCase):\n    def test_get_limit_no_dependants(self):\n        \"\"\"\n        No dependants => no extra relief\n        \"\"\"",
        "detail": "cla_backend.libs.eligibility_calculator.tests.test_constants",
        "documentation": {}
    },
    {
        "label": "GrossIncomeTestCase",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.tests.test_constants",
        "description": "cla_backend.libs.eligibility_calculator.tests.test_constants",
        "peekOfCode": "class GrossIncomeTestCase(unittest.TestCase):\n    def test_get_limit_no_dependants(self):\n        \"\"\"\n        No dependants => no extra relief\n        \"\"\"\n        self.assertEqual(constants.get_gross_income_limit(), constants.BASE_LIMIT)\n    def test_get_limit_4_dependants(self):\n        \"\"\"\n        No extra relief for the first 4 dependants\n        \"\"\"",
        "detail": "cla_backend.libs.eligibility_calculator.tests.test_constants",
        "documentation": {}
    },
    {
        "label": "BetweenDictTestCase",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.tests.test_util",
        "description": "cla_backend.libs.eligibility_calculator.tests.test_util",
        "peekOfCode": "class BetweenDictTestCase(unittest.TestCase):\n    def setUp(self):\n        self.bd = BetweenDict({(0, 6): 1, (6, 10): 2})\n    def test_direct_get(self):\n        for i in range(0, 6):\n            self.assertEqual(self.bd[i], 1, u\"get(%s) - %s != 1\" % (i, self.bd[i]))\n        for i in range(6, 10):\n            self.assertEqual(self.bd[i], 2, u\"get(%s) - %s != 2\" % (i, self.bd[i]))\n        self.assertRaises(KeyError, lambda: self.bd[10])\n        self.assertRaises(KeyError, lambda: self.bd[-1])",
        "detail": "cla_backend.libs.eligibility_calculator.tests.test_util",
        "documentation": {}
    },
    {
        "label": "cached_calcs_property",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.calculator",
        "description": "cla_backend.libs.eligibility_calculator.calculator",
        "peekOfCode": "class cached_calcs_property(object):\n    def __init__(self, func):\n        self.func = func\n    def _do_get(self, instance, type=None):\n        if instance is None:\n            return self\n        res = instance.__dict__[self.func.__name__] = self.func(instance)\n        return res\n    def __get__(self, instance, type=None):\n        res = self._do_get(instance, type)",
        "detail": "cla_backend.libs.eligibility_calculator.calculator",
        "documentation": {}
    },
    {
        "label": "CapitalCalculator",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.calculator",
        "description": "cla_backend.libs.eligibility_calculator.calculator",
        "peekOfCode": "class CapitalCalculator(object):\n    def __init__(self, properties=[], non_disputed_liquid_capital=0, disputed_liquid_capital=0, calcs={}):\n        self.properties = self._parse_props(properties)\n        self.non_disputed_liquid_capital = non_disputed_liquid_capital\n        self.disputed_liquid_capital = disputed_liquid_capital\n        self.calcs = calcs\n    def _parse_props(self, props):\n        result = []\n        for p in props or []:\n            # check property",
        "detail": "cla_backend.libs.eligibility_calculator.calculator",
        "documentation": {}
    },
    {
        "label": "EligibilityChecker",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.calculator",
        "description": "cla_backend.libs.eligibility_calculator.calculator",
        "peekOfCode": "class EligibilityChecker(object):\n    def __init__(self, case_data, calcs=None):\n        super(EligibilityChecker, self).__init__()\n        self.case_data = case_data\n        self.calcs = calcs or {}\n    @cached_calcs_property\n    def gross_income(self):\n        return self.case_data.total_income\n    @cached_calcs_property\n    def partner_allowance(self):",
        "detail": "cla_backend.libs.eligibility_calculator.calculator",
        "documentation": {}
    },
    {
        "label": "get_disposable_capital_limit",
        "kind": 2,
        "importPath": "cla_backend.libs.eligibility_calculator.constants",
        "description": "cla_backend.libs.eligibility_calculator.constants",
        "peekOfCode": "def get_disposable_capital_limit(category):\n    # TODO category:\n    #   * final codes\n    #   * no 800000 by default, return None in case of invalid codes\n    if category == \"immigration\":\n        return LIMIT_IMMIGRATION\n    return LIMIT_DEFAULT\nPENSIONER_DISREGARD_LIMIT_LEVELS = BetweenDict(\n    {\n        (0, 2501): 10000000,",
        "detail": "cla_backend.libs.eligibility_calculator.constants",
        "documentation": {}
    },
    {
        "label": "get_gross_income_limit",
        "kind": 2,
        "importPath": "cla_backend.libs.eligibility_calculator.constants",
        "description": "cla_backend.libs.eligibility_calculator.constants",
        "peekOfCode": "def get_gross_income_limit(dependant_children=0):\n    limit = BASE_LIMIT\n    limit += max(0, dependant_children - INCLUSIVE_CHILDREN_BASE) * EXTRA_CHILD_MODIFIER\n    return limit",
        "detail": "cla_backend.libs.eligibility_calculator.constants",
        "documentation": {}
    },
    {
        "label": "MORTGAGE_DISREGARD",
        "kind": 5,
        "importPath": "cla_backend.libs.eligibility_calculator.constants",
        "description": "cla_backend.libs.eligibility_calculator.constants",
        "peekOfCode": "MORTGAGE_DISREGARD = 10000000\nSMOD_DISREGARD = 10000000\nEQUITY_DISREGARD = 10000000\nLIMIT_IMMIGRATION = 300000\nLIMIT_DEFAULT = 800000\ndef get_disposable_capital_limit(category):\n    # TODO category:\n    #   * final codes\n    #   * no 800000 by default, return None in case of invalid codes\n    if category == \"immigration\":",
        "detail": "cla_backend.libs.eligibility_calculator.constants",
        "documentation": {}
    },
    {
        "label": "SMOD_DISREGARD",
        "kind": 5,
        "importPath": "cla_backend.libs.eligibility_calculator.constants",
        "description": "cla_backend.libs.eligibility_calculator.constants",
        "peekOfCode": "SMOD_DISREGARD = 10000000\nEQUITY_DISREGARD = 10000000\nLIMIT_IMMIGRATION = 300000\nLIMIT_DEFAULT = 800000\ndef get_disposable_capital_limit(category):\n    # TODO category:\n    #   * final codes\n    #   * no 800000 by default, return None in case of invalid codes\n    if category == \"immigration\":\n        return LIMIT_IMMIGRATION",
        "detail": "cla_backend.libs.eligibility_calculator.constants",
        "documentation": {}
    },
    {
        "label": "EQUITY_DISREGARD",
        "kind": 5,
        "importPath": "cla_backend.libs.eligibility_calculator.constants",
        "description": "cla_backend.libs.eligibility_calculator.constants",
        "peekOfCode": "EQUITY_DISREGARD = 10000000\nLIMIT_IMMIGRATION = 300000\nLIMIT_DEFAULT = 800000\ndef get_disposable_capital_limit(category):\n    # TODO category:\n    #   * final codes\n    #   * no 800000 by default, return None in case of invalid codes\n    if category == \"immigration\":\n        return LIMIT_IMMIGRATION\n    return LIMIT_DEFAULT",
        "detail": "cla_backend.libs.eligibility_calculator.constants",
        "documentation": {}
    },
    {
        "label": "LIMIT_IMMIGRATION",
        "kind": 5,
        "importPath": "cla_backend.libs.eligibility_calculator.constants",
        "description": "cla_backend.libs.eligibility_calculator.constants",
        "peekOfCode": "LIMIT_IMMIGRATION = 300000\nLIMIT_DEFAULT = 800000\ndef get_disposable_capital_limit(category):\n    # TODO category:\n    #   * final codes\n    #   * no 800000 by default, return None in case of invalid codes\n    if category == \"immigration\":\n        return LIMIT_IMMIGRATION\n    return LIMIT_DEFAULT\nPENSIONER_DISREGARD_LIMIT_LEVELS = BetweenDict(",
        "detail": "cla_backend.libs.eligibility_calculator.constants",
        "documentation": {}
    },
    {
        "label": "LIMIT_DEFAULT",
        "kind": 5,
        "importPath": "cla_backend.libs.eligibility_calculator.constants",
        "description": "cla_backend.libs.eligibility_calculator.constants",
        "peekOfCode": "LIMIT_DEFAULT = 800000\ndef get_disposable_capital_limit(category):\n    # TODO category:\n    #   * final codes\n    #   * no 800000 by default, return None in case of invalid codes\n    if category == \"immigration\":\n        return LIMIT_IMMIGRATION\n    return LIMIT_DEFAULT\nPENSIONER_DISREGARD_LIMIT_LEVELS = BetweenDict(\n    {",
        "detail": "cla_backend.libs.eligibility_calculator.constants",
        "documentation": {}
    },
    {
        "label": "PENSIONER_DISREGARD_LIMIT_LEVELS",
        "kind": 5,
        "importPath": "cla_backend.libs.eligibility_calculator.constants",
        "description": "cla_backend.libs.eligibility_calculator.constants",
        "peekOfCode": "PENSIONER_DISREGARD_LIMIT_LEVELS = BetweenDict(\n    {\n        (0, 2501): 10000000,\n        (2501, 5001): 9000000,\n        (5001, 7501): 8000000,\n        (7501, 10001): 7000000,\n        (10001, 12501): 6000000,\n        (12501, 15001): 5000000,\n        (15001, 17501): 4000000,\n        (17501, 20001): 3000000,",
        "detail": "cla_backend.libs.eligibility_calculator.constants",
        "documentation": {}
    },
    {
        "label": "LIMIT",
        "kind": 5,
        "importPath": "cla_backend.libs.eligibility_calculator.constants",
        "description": "cla_backend.libs.eligibility_calculator.constants",
        "peekOfCode": "LIMIT = 73300\nPARTNER_ALLOWANCE = 18446\nCHILD_ALLOWANCE = 29665\nCHILDLESS_HOUSING_CAP = 54500\nEMPLOYMENT_COSTS_ALLOWANCE = 4500\n# Gross income\nBASE_LIMIT = 265700\nINCLUSIVE_CHILDREN_BASE = 4\nEXTRA_CHILD_MODIFIER = 22200\ndef get_gross_income_limit(dependant_children=0):",
        "detail": "cla_backend.libs.eligibility_calculator.constants",
        "documentation": {}
    },
    {
        "label": "PARTNER_ALLOWANCE",
        "kind": 5,
        "importPath": "cla_backend.libs.eligibility_calculator.constants",
        "description": "cla_backend.libs.eligibility_calculator.constants",
        "peekOfCode": "PARTNER_ALLOWANCE = 18446\nCHILD_ALLOWANCE = 29665\nCHILDLESS_HOUSING_CAP = 54500\nEMPLOYMENT_COSTS_ALLOWANCE = 4500\n# Gross income\nBASE_LIMIT = 265700\nINCLUSIVE_CHILDREN_BASE = 4\nEXTRA_CHILD_MODIFIER = 22200\ndef get_gross_income_limit(dependant_children=0):\n    limit = BASE_LIMIT",
        "detail": "cla_backend.libs.eligibility_calculator.constants",
        "documentation": {}
    },
    {
        "label": "CHILD_ALLOWANCE",
        "kind": 5,
        "importPath": "cla_backend.libs.eligibility_calculator.constants",
        "description": "cla_backend.libs.eligibility_calculator.constants",
        "peekOfCode": "CHILD_ALLOWANCE = 29665\nCHILDLESS_HOUSING_CAP = 54500\nEMPLOYMENT_COSTS_ALLOWANCE = 4500\n# Gross income\nBASE_LIMIT = 265700\nINCLUSIVE_CHILDREN_BASE = 4\nEXTRA_CHILD_MODIFIER = 22200\ndef get_gross_income_limit(dependant_children=0):\n    limit = BASE_LIMIT\n    limit += max(0, dependant_children - INCLUSIVE_CHILDREN_BASE) * EXTRA_CHILD_MODIFIER",
        "detail": "cla_backend.libs.eligibility_calculator.constants",
        "documentation": {}
    },
    {
        "label": "CHILDLESS_HOUSING_CAP",
        "kind": 5,
        "importPath": "cla_backend.libs.eligibility_calculator.constants",
        "description": "cla_backend.libs.eligibility_calculator.constants",
        "peekOfCode": "CHILDLESS_HOUSING_CAP = 54500\nEMPLOYMENT_COSTS_ALLOWANCE = 4500\n# Gross income\nBASE_LIMIT = 265700\nINCLUSIVE_CHILDREN_BASE = 4\nEXTRA_CHILD_MODIFIER = 22200\ndef get_gross_income_limit(dependant_children=0):\n    limit = BASE_LIMIT\n    limit += max(0, dependant_children - INCLUSIVE_CHILDREN_BASE) * EXTRA_CHILD_MODIFIER\n    return limit",
        "detail": "cla_backend.libs.eligibility_calculator.constants",
        "documentation": {}
    },
    {
        "label": "EMPLOYMENT_COSTS_ALLOWANCE",
        "kind": 5,
        "importPath": "cla_backend.libs.eligibility_calculator.constants",
        "description": "cla_backend.libs.eligibility_calculator.constants",
        "peekOfCode": "EMPLOYMENT_COSTS_ALLOWANCE = 4500\n# Gross income\nBASE_LIMIT = 265700\nINCLUSIVE_CHILDREN_BASE = 4\nEXTRA_CHILD_MODIFIER = 22200\ndef get_gross_income_limit(dependant_children=0):\n    limit = BASE_LIMIT\n    limit += max(0, dependant_children - INCLUSIVE_CHILDREN_BASE) * EXTRA_CHILD_MODIFIER\n    return limit",
        "detail": "cla_backend.libs.eligibility_calculator.constants",
        "documentation": {}
    },
    {
        "label": "BASE_LIMIT",
        "kind": 5,
        "importPath": "cla_backend.libs.eligibility_calculator.constants",
        "description": "cla_backend.libs.eligibility_calculator.constants",
        "peekOfCode": "BASE_LIMIT = 265700\nINCLUSIVE_CHILDREN_BASE = 4\nEXTRA_CHILD_MODIFIER = 22200\ndef get_gross_income_limit(dependant_children=0):\n    limit = BASE_LIMIT\n    limit += max(0, dependant_children - INCLUSIVE_CHILDREN_BASE) * EXTRA_CHILD_MODIFIER\n    return limit",
        "detail": "cla_backend.libs.eligibility_calculator.constants",
        "documentation": {}
    },
    {
        "label": "INCLUSIVE_CHILDREN_BASE",
        "kind": 5,
        "importPath": "cla_backend.libs.eligibility_calculator.constants",
        "description": "cla_backend.libs.eligibility_calculator.constants",
        "peekOfCode": "INCLUSIVE_CHILDREN_BASE = 4\nEXTRA_CHILD_MODIFIER = 22200\ndef get_gross_income_limit(dependant_children=0):\n    limit = BASE_LIMIT\n    limit += max(0, dependant_children - INCLUSIVE_CHILDREN_BASE) * EXTRA_CHILD_MODIFIER\n    return limit",
        "detail": "cla_backend.libs.eligibility_calculator.constants",
        "documentation": {}
    },
    {
        "label": "EXTRA_CHILD_MODIFIER",
        "kind": 5,
        "importPath": "cla_backend.libs.eligibility_calculator.constants",
        "description": "cla_backend.libs.eligibility_calculator.constants",
        "peekOfCode": "EXTRA_CHILD_MODIFIER = 22200\ndef get_gross_income_limit(dependant_children=0):\n    limit = BASE_LIMIT\n    limit += max(0, dependant_children - INCLUSIVE_CHILDREN_BASE) * EXTRA_CHILD_MODIFIER\n    return limit",
        "detail": "cla_backend.libs.eligibility_calculator.constants",
        "documentation": {}
    },
    {
        "label": "PropertyExpectedException",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.exceptions",
        "description": "cla_backend.libs.eligibility_calculator.exceptions",
        "peekOfCode": "class PropertyExpectedException(Exception):\n    pass\nclass InvalidStateException(Exception):\n    pass",
        "detail": "cla_backend.libs.eligibility_calculator.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidStateException",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.exceptions",
        "description": "cla_backend.libs.eligibility_calculator.exceptions",
        "peekOfCode": "class InvalidStateException(Exception):\n    pass",
        "detail": "cla_backend.libs.eligibility_calculator.exceptions",
        "documentation": {}
    },
    {
        "label": "ModelMixin",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.models",
        "description": "cla_backend.libs.eligibility_calculator.models",
        "peekOfCode": "class ModelMixin(object):\n    PROPERTY_META = None\n    def __init__(self, *args, **kwargs):\n        for kw, v in kwargs.items():\n            if kw not in self.PROPERTY_META:\n                raise exceptions.PropertyExpectedException(\n                    \"'{kw}' is not a valid property for '{obj_name}'\".format(kw=kw, obj_name=self.__class__.__name__)\n                )\n            fk_clazz = self.PROPERTY_META.get(kw)\n            if fk_clazz:",
        "detail": "cla_backend.libs.eligibility_calculator.models",
        "documentation": {}
    },
    {
        "label": "Savings",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.models",
        "description": "cla_backend.libs.eligibility_calculator.models",
        "peekOfCode": "class Savings(ModelMixin, object):\n    PROPERTY_META = {\"bank_balance\": None, \"investment_balance\": None, \"credit_balance\": None, \"asset_balance\": None}\n    @property\n    def total(self):\n        return self.bank_balance + self.investment_balance + self.credit_balance + self.asset_balance\nclass Income(ModelMixin, object):\n    PROPERTY_META = {\n        \"earnings\": None,\n        \"self_employment_drawings\": None,\n        \"benefits\": None,",
        "detail": "cla_backend.libs.eligibility_calculator.models",
        "documentation": {}
    },
    {
        "label": "Income",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.models",
        "description": "cla_backend.libs.eligibility_calculator.models",
        "peekOfCode": "class Income(ModelMixin, object):\n    PROPERTY_META = {\n        \"earnings\": None,\n        \"self_employment_drawings\": None,\n        \"benefits\": None,\n        \"tax_credits\": None,\n        \"child_benefits\": None,\n        \"maintenance_received\": None,\n        \"pension\": None,\n        \"other_income\": None,",
        "detail": "cla_backend.libs.eligibility_calculator.models",
        "documentation": {}
    },
    {
        "label": "Deductions",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.models",
        "description": "cla_backend.libs.eligibility_calculator.models",
        "peekOfCode": "class Deductions(ModelMixin, object):\n    PROPERTY_META = {\n        \"income_tax\": None,\n        \"national_insurance\": None,\n        \"maintenance\": None,\n        \"childcare\": None,\n        \"mortgage\": None,\n        \"rent\": None,\n        \"criminal_legalaid_contributions\": None,\n    }",
        "detail": "cla_backend.libs.eligibility_calculator.models",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.models",
        "description": "cla_backend.libs.eligibility_calculator.models",
        "peekOfCode": "class Person(ModelMixin, object):\n    PROPERTY_META = {\"income\": Income, \"savings\": Savings, \"deductions\": Deductions}\nclass Facts(ModelMixin, object):\n    def __init__(self, *args, **kwargs):\n        kwargs.setdefault(\"has_passported_proceedings_letter\", None)\n        super(Facts, self).__init__(*args, **kwargs)\n    PROPERTY_META = {\n        \"is_you_or_your_partner_over_60\": None,\n        \"on_passported_benefits\": None,\n        \"on_nass_benefits\": None,",
        "detail": "cla_backend.libs.eligibility_calculator.models",
        "documentation": {}
    },
    {
        "label": "Facts",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.models",
        "description": "cla_backend.libs.eligibility_calculator.models",
        "peekOfCode": "class Facts(ModelMixin, object):\n    def __init__(self, *args, **kwargs):\n        kwargs.setdefault(\"has_passported_proceedings_letter\", None)\n        super(Facts, self).__init__(*args, **kwargs)\n    PROPERTY_META = {\n        \"is_you_or_your_partner_over_60\": None,\n        \"on_passported_benefits\": None,\n        \"on_nass_benefits\": None,\n        \"has_partner\": None,\n        \"is_partner_opponent\": None,",
        "detail": "cla_backend.libs.eligibility_calculator.models",
        "documentation": {}
    },
    {
        "label": "CaseData",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.models",
        "description": "cla_backend.libs.eligibility_calculator.models",
        "peekOfCode": "class CaseData(ModelMixin, object):\n    PROPERTY_META = {\n        \"category\": None,\n        \"facts\": Facts,\n        \"you\": Person,\n        \"partner\": Person,\n        \"property_data\": None,\n        \"disputed_savings\": Savings,\n    }\n    @property",
        "detail": "cla_backend.libs.eligibility_calculator.models",
        "documentation": {}
    },
    {
        "label": "BetweenDict",
        "kind": 6,
        "importPath": "cla_backend.libs.eligibility_calculator.util",
        "description": "cla_backend.libs.eligibility_calculator.util",
        "peekOfCode": "class BetweenDict(Mapping):\n    def __init__(self, d):\n        \"\"\"\n        :param d: dict to use as basis for transform dict.\n        It should have the form\n        BetweenDict({\n            (0, 10): 5,\n            (10, 15): 25\n        })\n        where:",
        "detail": "cla_backend.libs.eligibility_calculator.util",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "cla_backend.settings..example.local",
        "description": "cla_backend.settings..example.local",
        "peekOfCode": "DEBUG = True\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"filters\": {\"require_debug_false\": {\"()\": \"django.utils.log.RequireDebugFalse\"}},\n    \"handlers\": {\n        \"mail_admins\": {\n            \"level\": \"ERROR\",\n            \"filters\": [\"require_debug_false\"],\n            \"class\": \"django.utils.log.AdminEmailHandler\",",
        "detail": "cla_backend.settings..example.local",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "cla_backend.settings..example.local",
        "description": "cla_backend.settings..example.local",
        "peekOfCode": "LOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"filters\": {\"require_debug_false\": {\"()\": \"django.utils.log.RequireDebugFalse\"}},\n    \"handlers\": {\n        \"mail_admins\": {\n            \"level\": \"ERROR\",\n            \"filters\": [\"require_debug_false\"],\n            \"class\": \"django.utils.log.AdminEmailHandler\",\n        }",
        "detail": "cla_backend.settings..example.local",
        "documentation": {}
    },
    {
        "label": "DATABASES[\"default\"]",
        "kind": 5,
        "importPath": "cla_backend.settings..example.local",
        "description": "cla_backend.settings..example.local",
        "peekOfCode": "DATABASES[\"default\"] = {\n    \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\n    \"NAME\": os.environ.get(\"DB_NAME\", \"cla_backend\"),\n    \"USER\": os.environ.get(\"DB_USER\", \"postgres\"),\n    \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"\"),\n    \"HOST\": os.environ.get(\"DB_HOST\", \"\"),\n    \"PORT\": os.environ.get(\"DB_PORT\", \"\"),\n}\n# don't bother with celery locally\nCELERY_ALWAYS_EAGER = True",
        "detail": "cla_backend.settings..example.local",
        "documentation": {}
    },
    {
        "label": "CELERY_ALWAYS_EAGER",
        "kind": 5,
        "importPath": "cla_backend.settings..example.local",
        "description": "cla_backend.settings..example.local",
        "peekOfCode": "CELERY_ALWAYS_EAGER = True\nOBIEE_ZIP_PASSWORD = \"test\"",
        "detail": "cla_backend.settings..example.local",
        "documentation": {}
    },
    {
        "label": "OBIEE_ZIP_PASSWORD",
        "kind": 5,
        "importPath": "cla_backend.settings..example.local",
        "description": "cla_backend.settings..example.local",
        "peekOfCode": "OBIEE_ZIP_PASSWORD = \"test\"",
        "detail": "cla_backend.settings..example.local",
        "documentation": {}
    },
    {
        "label": "env_var_truthy_intention",
        "kind": 2,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "def env_var_truthy_intention(name):\n    '''Returns True if the env var is truthy and not the string \"False\"'''\n    value = os.environ.get(name, False)\n    return value and value != \"False\"\n# PATH vars\nhere = lambda *x: os.path.join(os.path.abspath(os.path.dirname(__file__)), *x)\nPROJECT_ROOT = here(\"..\")\nroot = lambda *x: os.path.join(os.path.abspath(PROJECT_ROOT), *x)\nsys.path.insert(0, root(\"apps\"))\nsys.path.insert(0, root(\"libs\"))",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "traces_sampler",
        "kind": 2,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "def traces_sampler(sampling_context):\n    try:\n        name = sampling_context[\"wsgi_environ\"].get(\"PATH_INFO\")\n    except Exception:\n        pass\n    else:\n        if name in LOW_SAMPLE_RATE_TRANSACTIONS:\n            return 0.0001\n    return 0.1\nif \"SENTRY_DSN\" in os.environ:",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "bank_holidays_cache_adapter_factory",
        "kind": 2,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "def bank_holidays_cache_adapter_factory():\n    from django.core.cache import cache\n    return cache\nCacheAdapter.set_adapter_factory(bank_holidays_cache_adapter_factory)\nMAINTENANCE_MODE = os.environ.get(\"MAINTENANCE_MODE\", \"False\") == \"True\"\n# Settings for django-session-security.\nDEFAULT_SESSION_SECURITY_WARN_AFTER = 60 * 25\nDEFAULT_SESSION_SECURITY_EXPIRE_AFTER = 60 * 30\nSESSION_EXPIRE_AT_BROWSER_CLOSE = True\nSESSION_SECURITY_WARN_AFTER = int(os.environ.get(\"SESSION_SECURITY_WARN_AFTER\", DEFAULT_SESSION_SECURITY_WARN_AFTER))",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "here",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "here = lambda *x: os.path.join(os.path.abspath(os.path.dirname(__file__)), *x)\nPROJECT_ROOT = here(\"..\")\nroot = lambda *x: os.path.join(os.path.abspath(PROJECT_ROOT), *x)\nsys.path.insert(0, root(\"apps\"))\nsys.path.insert(0, root(\"libs\"))\nSHOW_NEW_CB1 = os.environ.get(\"SHOW_NEW_CB1\", \"False\").lower() == \"true\"\nHEALTHCHECKS = [\"moj_irat.healthchecks.database_healthcheck\", \"status.healthchecks.check_disk\"]\nAUTODISCOVER_HEALTHCHECKS = True\nPING_JSON_KEYS = {\n    \"build_date_key\": \"APP_BUILD_DATE\",",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "PROJECT_ROOT",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "PROJECT_ROOT = here(\"..\")\nroot = lambda *x: os.path.join(os.path.abspath(PROJECT_ROOT), *x)\nsys.path.insert(0, root(\"apps\"))\nsys.path.insert(0, root(\"libs\"))\nSHOW_NEW_CB1 = os.environ.get(\"SHOW_NEW_CB1\", \"False\").lower() == \"true\"\nHEALTHCHECKS = [\"moj_irat.healthchecks.database_healthcheck\", \"status.healthchecks.check_disk\"]\nAUTODISCOVER_HEALTHCHECKS = True\nPING_JSON_KEYS = {\n    \"build_date_key\": \"APP_BUILD_DATE\",\n    \"commit_id_key\": \"APP_GIT_COMMIT\",",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "root = lambda *x: os.path.join(os.path.abspath(PROJECT_ROOT), *x)\nsys.path.insert(0, root(\"apps\"))\nsys.path.insert(0, root(\"libs\"))\nSHOW_NEW_CB1 = os.environ.get(\"SHOW_NEW_CB1\", \"False\").lower() == \"true\"\nHEALTHCHECKS = [\"moj_irat.healthchecks.database_healthcheck\", \"status.healthchecks.check_disk\"]\nAUTODISCOVER_HEALTHCHECKS = True\nPING_JSON_KEYS = {\n    \"build_date_key\": \"APP_BUILD_DATE\",\n    \"commit_id_key\": \"APP_GIT_COMMIT\",\n    \"version_number_key\": \"APPVERSION\",",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "SHOW_NEW_CB1",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "SHOW_NEW_CB1 = os.environ.get(\"SHOW_NEW_CB1\", \"False\").lower() == \"true\"\nHEALTHCHECKS = [\"moj_irat.healthchecks.database_healthcheck\", \"status.healthchecks.check_disk\"]\nAUTODISCOVER_HEALTHCHECKS = True\nPING_JSON_KEYS = {\n    \"build_date_key\": \"APP_BUILD_DATE\",\n    \"commit_id_key\": \"APP_GIT_COMMIT\",\n    \"version_number_key\": \"APPVERSION\",\n    \"build_tag_key\": \"APP_BUILD_TAG\",\n}\nDEBUG = os.environ.get(\"DEBUG\", \"False\").lower() == \"true\"",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "HEALTHCHECKS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "HEALTHCHECKS = [\"moj_irat.healthchecks.database_healthcheck\", \"status.healthchecks.check_disk\"]\nAUTODISCOVER_HEALTHCHECKS = True\nPING_JSON_KEYS = {\n    \"build_date_key\": \"APP_BUILD_DATE\",\n    \"commit_id_key\": \"APP_GIT_COMMIT\",\n    \"version_number_key\": \"APPVERSION\",\n    \"build_tag_key\": \"APP_BUILD_TAG\",\n}\nDEBUG = os.environ.get(\"DEBUG\", \"False\").lower() == \"true\"\nADMINS = ()",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "AUTODISCOVER_HEALTHCHECKS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "AUTODISCOVER_HEALTHCHECKS = True\nPING_JSON_KEYS = {\n    \"build_date_key\": \"APP_BUILD_DATE\",\n    \"commit_id_key\": \"APP_GIT_COMMIT\",\n    \"version_number_key\": \"APPVERSION\",\n    \"build_tag_key\": \"APP_BUILD_TAG\",\n}\nDEBUG = os.environ.get(\"DEBUG\", \"False\").lower() == \"true\"\nADMINS = ()\nMANAGERS = ADMINS",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "PING_JSON_KEYS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "PING_JSON_KEYS = {\n    \"build_date_key\": \"APP_BUILD_DATE\",\n    \"commit_id_key\": \"APP_GIT_COMMIT\",\n    \"version_number_key\": \"APPVERSION\",\n    \"build_tag_key\": \"APP_BUILD_TAG\",\n}\nDEBUG = os.environ.get(\"DEBUG\", \"False\").lower() == \"true\"\nADMINS = ()\nMANAGERS = ADMINS\nEMAIL_FROM_ADDRESS = \"no-reply@civillegaladvice.service.gov.uk\"",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "DEBUG = os.environ.get(\"DEBUG\", \"False\").lower() == \"true\"\nADMINS = ()\nMANAGERS = ADMINS\nEMAIL_FROM_ADDRESS = \"no-reply@civillegaladvice.service.gov.uk\"\nDEFAULT_EMAIL_TO = \"cla-alerts@digital.justice.gov.uk\"\nGOVUK_NOTIFY_API_KEY = os.environ.get(\"GOVUK_NOTIFY_API_KEY\")\nGOVUK_NOTIFY_TEMPLATES = {\n    \"LOG_OPERATOR_ACTION\": os.environ.get(\n        \"GOVUK_NOTIFY_TEMPLATE_LOG_OPERATOR_ACTION\", \"48ce3539-48f3-4b2d-9931-2a57f89a521f\"\n    ),",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "ADMINS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "ADMINS = ()\nMANAGERS = ADMINS\nEMAIL_FROM_ADDRESS = \"no-reply@civillegaladvice.service.gov.uk\"\nDEFAULT_EMAIL_TO = \"cla-alerts@digital.justice.gov.uk\"\nGOVUK_NOTIFY_API_KEY = os.environ.get(\"GOVUK_NOTIFY_API_KEY\")\nGOVUK_NOTIFY_TEMPLATES = {\n    \"LOG_OPERATOR_ACTION\": os.environ.get(\n        \"GOVUK_NOTIFY_TEMPLATE_LOG_OPERATOR_ACTION\", \"48ce3539-48f3-4b2d-9931-2a57f89a521f\"\n    ),\n    \"LOG_SPECIALIST_ACTION\": os.environ.get(",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "MANAGERS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "MANAGERS = ADMINS\nEMAIL_FROM_ADDRESS = \"no-reply@civillegaladvice.service.gov.uk\"\nDEFAULT_EMAIL_TO = \"cla-alerts@digital.justice.gov.uk\"\nGOVUK_NOTIFY_API_KEY = os.environ.get(\"GOVUK_NOTIFY_API_KEY\")\nGOVUK_NOTIFY_TEMPLATES = {\n    \"LOG_OPERATOR_ACTION\": os.environ.get(\n        \"GOVUK_NOTIFY_TEMPLATE_LOG_OPERATOR_ACTION\", \"48ce3539-48f3-4b2d-9931-2a57f89a521f\"\n    ),\n    \"LOG_SPECIALIST_ACTION\": os.environ.get(\n        \"GOVUK_NOTIFY_TEMPLATE_LOG_SPECIALIST_ACTION\", \"53c79e67-b2ae-4412-9f6f-4d2423fe96e6\"",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "EMAIL_FROM_ADDRESS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "EMAIL_FROM_ADDRESS = \"no-reply@civillegaladvice.service.gov.uk\"\nDEFAULT_EMAIL_TO = \"cla-alerts@digital.justice.gov.uk\"\nGOVUK_NOTIFY_API_KEY = os.environ.get(\"GOVUK_NOTIFY_API_KEY\")\nGOVUK_NOTIFY_TEMPLATES = {\n    \"LOG_OPERATOR_ACTION\": os.environ.get(\n        \"GOVUK_NOTIFY_TEMPLATE_LOG_OPERATOR_ACTION\", \"48ce3539-48f3-4b2d-9931-2a57f89a521f\"\n    ),\n    \"LOG_SPECIALIST_ACTION\": os.environ.get(\n        \"GOVUK_NOTIFY_TEMPLATE_LOG_SPECIALIST_ACTION\", \"53c79e67-b2ae-4412-9f6f-4d2423fe96e6\"\n    ),",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "DEFAULT_EMAIL_TO",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "DEFAULT_EMAIL_TO = \"cla-alerts@digital.justice.gov.uk\"\nGOVUK_NOTIFY_API_KEY = os.environ.get(\"GOVUK_NOTIFY_API_KEY\")\nGOVUK_NOTIFY_TEMPLATES = {\n    \"LOG_OPERATOR_ACTION\": os.environ.get(\n        \"GOVUK_NOTIFY_TEMPLATE_LOG_OPERATOR_ACTION\", \"48ce3539-48f3-4b2d-9931-2a57f89a521f\"\n    ),\n    \"LOG_SPECIALIST_ACTION\": os.environ.get(\n        \"GOVUK_NOTIFY_TEMPLATE_LOG_SPECIALIST_ACTION\", \"53c79e67-b2ae-4412-9f6f-4d2423fe96e6\"\n    ),\n    \"PROVIDER_CASE_ASSIGNED\": os.environ.get(",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "GOVUK_NOTIFY_API_KEY",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "GOVUK_NOTIFY_API_KEY = os.environ.get(\"GOVUK_NOTIFY_API_KEY\")\nGOVUK_NOTIFY_TEMPLATES = {\n    \"LOG_OPERATOR_ACTION\": os.environ.get(\n        \"GOVUK_NOTIFY_TEMPLATE_LOG_OPERATOR_ACTION\", \"48ce3539-48f3-4b2d-9931-2a57f89a521f\"\n    ),\n    \"LOG_SPECIALIST_ACTION\": os.environ.get(\n        \"GOVUK_NOTIFY_TEMPLATE_LOG_SPECIALIST_ACTION\", \"53c79e67-b2ae-4412-9f6f-4d2423fe96e6\"\n    ),\n    \"PROVIDER_CASE_ASSIGNED\": os.environ.get(\n        \"GOVUK_NOTIFY_TEMPLATE_PROVIDER_CASE_ASSIGNED\", \"ea19f5f7-ff65-40a1-9f01-4be5deda1079\"",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "GOVUK_NOTIFY_TEMPLATES",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "GOVUK_NOTIFY_TEMPLATES = {\n    \"LOG_OPERATOR_ACTION\": os.environ.get(\n        \"GOVUK_NOTIFY_TEMPLATE_LOG_OPERATOR_ACTION\", \"48ce3539-48f3-4b2d-9931-2a57f89a521f\"\n    ),\n    \"LOG_SPECIALIST_ACTION\": os.environ.get(\n        \"GOVUK_NOTIFY_TEMPLATE_LOG_SPECIALIST_ACTION\", \"53c79e67-b2ae-4412-9f6f-4d2423fe96e6\"\n    ),\n    \"PROVIDER_CASE_ASSIGNED\": os.environ.get(\n        \"GOVUK_NOTIFY_TEMPLATE_PROVIDER_CASE_ASSIGNED\", \"ea19f5f7-ff65-40a1-9f01-4be5deda1079\"\n    ),",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "OPERATOR_USER_ALERT_EMAILS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "OPERATOR_USER_ALERT_EMAILS = []\nSPECIALIST_USER_ALERT_EMAILS = []\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\n        \"NAME\": os.environ.get(\"DB_NAME\", \"cla_backend\"),\n        \"USER\": os.environ.get(\"DB_USER\", \"postgres\"),\n        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"\"),\n        \"HOST\": os.environ.get(\"DB_HOST\", \"\"),\n        \"PORT\": os.environ.get(\"DB_PORT\", \"\"),",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "SPECIALIST_USER_ALERT_EMAILS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "SPECIALIST_USER_ALERT_EMAILS = []\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\n        \"NAME\": os.environ.get(\"DB_NAME\", \"cla_backend\"),\n        \"USER\": os.environ.get(\"DB_USER\", \"postgres\"),\n        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"\"),\n        \"HOST\": os.environ.get(\"DB_HOST\", \"\"),\n        \"PORT\": os.environ.get(\"DB_PORT\", \"\"),\n    }",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\n        \"NAME\": os.environ.get(\"DB_NAME\", \"cla_backend\"),\n        \"USER\": os.environ.get(\"DB_USER\", \"postgres\"),\n        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"\"),\n        \"HOST\": os.environ.get(\"DB_HOST\", \"\"),\n        \"PORT\": os.environ.get(\"DB_PORT\", \"\"),\n    }\n}",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "TEMP_DIR",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "TEMP_DIR = root(\"tmp\")\nEXPORT_DIR = \"/exports/\"\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/1.11/howto/static-files/\nif os.environ.get(\"STATIC_FILES_BACKEND\") == \"s3\":\n    STATICFILES_STORAGE = \"cla_backend.libs.aws.s3.StaticS3Storage\"\nAWS_S3_REGION_NAME = os.environ.get(\"AWS_S3_REGION_NAME\", \"eu-west-1\")\nAWS_DEFAULT_ACL = None\nAWS_QUERYSTRING_AUTH = False\n# This bucket needs to a private bucket as it will contain sensitive reports",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "EXPORT_DIR",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "EXPORT_DIR = \"/exports/\"\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/1.11/howto/static-files/\nif os.environ.get(\"STATIC_FILES_BACKEND\") == \"s3\":\n    STATICFILES_STORAGE = \"cla_backend.libs.aws.s3.StaticS3Storage\"\nAWS_S3_REGION_NAME = os.environ.get(\"AWS_S3_REGION_NAME\", \"eu-west-1\")\nAWS_DEFAULT_ACL = None\nAWS_QUERYSTRING_AUTH = False\n# This bucket needs to a private bucket as it will contain sensitive reports\nAWS_REPORTS_STORAGE_BUCKET_NAME = os.environ.get(\"AWS_REPORTS_STORAGE_BUCKET_NAME\")",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "AWS_S3_REGION_NAME",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "AWS_S3_REGION_NAME = os.environ.get(\"AWS_S3_REGION_NAME\", \"eu-west-1\")\nAWS_DEFAULT_ACL = None\nAWS_QUERYSTRING_AUTH = False\n# This bucket needs to a private bucket as it will contain sensitive reports\nAWS_REPORTS_STORAGE_BUCKET_NAME = os.environ.get(\"AWS_REPORTS_STORAGE_BUCKET_NAME\")\n# This bucket needs to a public bucket as it will serve public assets such as css,images and js\nAWS_STORAGE_BUCKET_NAME = os.environ.get(\"AWS_STATIC_FILES_STORAGE_BUCKET_NAME\")\nAWS_DELETED_OBJECTS_BUCKET_NAME = os.environ.get(\"AWS_DELETED_OBJECTS_BUCKET_NAME\")\n# Hosts/domain names that are valid for this site; required if DEBUG is False\n# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "AWS_DEFAULT_ACL",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "AWS_DEFAULT_ACL = None\nAWS_QUERYSTRING_AUTH = False\n# This bucket needs to a private bucket as it will contain sensitive reports\nAWS_REPORTS_STORAGE_BUCKET_NAME = os.environ.get(\"AWS_REPORTS_STORAGE_BUCKET_NAME\")\n# This bucket needs to a public bucket as it will serve public assets such as css,images and js\nAWS_STORAGE_BUCKET_NAME = os.environ.get(\"AWS_STATIC_FILES_STORAGE_BUCKET_NAME\")\nAWS_DELETED_OBJECTS_BUCKET_NAME = os.environ.get(\"AWS_DELETED_OBJECTS_BUCKET_NAME\")\n# Hosts/domain names that are valid for this site; required if DEBUG is False\n# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts\nALLOWED_HOSTS = os.environ.get(\"ALLOWED_HOSTS\", \"\").split()",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "AWS_QUERYSTRING_AUTH",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "AWS_QUERYSTRING_AUTH = False\n# This bucket needs to a private bucket as it will contain sensitive reports\nAWS_REPORTS_STORAGE_BUCKET_NAME = os.environ.get(\"AWS_REPORTS_STORAGE_BUCKET_NAME\")\n# This bucket needs to a public bucket as it will serve public assets such as css,images and js\nAWS_STORAGE_BUCKET_NAME = os.environ.get(\"AWS_STATIC_FILES_STORAGE_BUCKET_NAME\")\nAWS_DELETED_OBJECTS_BUCKET_NAME = os.environ.get(\"AWS_DELETED_OBJECTS_BUCKET_NAME\")\n# Hosts/domain names that are valid for this site; required if DEBUG is False\n# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts\nALLOWED_HOSTS = os.environ.get(\"ALLOWED_HOSTS\", \"\").split()\n# Local time zone for this installation. Choices can be found here:",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "AWS_REPORTS_STORAGE_BUCKET_NAME",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "AWS_REPORTS_STORAGE_BUCKET_NAME = os.environ.get(\"AWS_REPORTS_STORAGE_BUCKET_NAME\")\n# This bucket needs to a public bucket as it will serve public assets such as css,images and js\nAWS_STORAGE_BUCKET_NAME = os.environ.get(\"AWS_STATIC_FILES_STORAGE_BUCKET_NAME\")\nAWS_DELETED_OBJECTS_BUCKET_NAME = os.environ.get(\"AWS_DELETED_OBJECTS_BUCKET_NAME\")\n# Hosts/domain names that are valid for this site; required if DEBUG is False\n# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts\nALLOWED_HOSTS = os.environ.get(\"ALLOWED_HOSTS\", \"\").split()\n# Local time zone for this installation. Choices can be found here:\n# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n# although not all choices may be available on all operating systems.",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "AWS_STORAGE_BUCKET_NAME",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "AWS_STORAGE_BUCKET_NAME = os.environ.get(\"AWS_STATIC_FILES_STORAGE_BUCKET_NAME\")\nAWS_DELETED_OBJECTS_BUCKET_NAME = os.environ.get(\"AWS_DELETED_OBJECTS_BUCKET_NAME\")\n# Hosts/domain names that are valid for this site; required if DEBUG is False\n# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts\nALLOWED_HOSTS = os.environ.get(\"ALLOWED_HOSTS\", \"\").split()\n# Local time zone for this installation. Choices can be found here:\n# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n# although not all choices may be available on all operating systems.\n# In a Windows environment this must be set to your system time zone.\nTIME_ZONE = \"Europe/London\"",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "AWS_DELETED_OBJECTS_BUCKET_NAME",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "AWS_DELETED_OBJECTS_BUCKET_NAME = os.environ.get(\"AWS_DELETED_OBJECTS_BUCKET_NAME\")\n# Hosts/domain names that are valid for this site; required if DEBUG is False\n# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts\nALLOWED_HOSTS = os.environ.get(\"ALLOWED_HOSTS\", \"\").split()\n# Local time zone for this installation. Choices can be found here:\n# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n# although not all choices may be available on all operating systems.\n# In a Windows environment this must be set to your system time zone.\nTIME_ZONE = \"Europe/London\"\n# Language code for this installation. All choices can be found here:",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "ALLOWED_HOSTS = os.environ.get(\"ALLOWED_HOSTS\", \"\").split()\n# Local time zone for this installation. Choices can be found here:\n# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n# although not all choices may be available on all operating systems.\n# In a Windows environment this must be set to your system time zone.\nTIME_ZONE = \"Europe/London\"\n# Language code for this installation. All choices can be found here:\n# http://www.i18nguy.com/unicode/language-identifiers.html\nLANGUAGE_CODE = \"en-gb\"\nLANGUAGES = ((\"en-gb\", \"English\"), (\"cy\", \"Cymraeg\"))",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "TIME_ZONE = \"Europe/London\"\n# Language code for this installation. All choices can be found here:\n# http://www.i18nguy.com/unicode/language-identifiers.html\nLANGUAGE_CODE = \"en-gb\"\nLANGUAGES = ((\"en-gb\", \"English\"), (\"cy\", \"Cymraeg\"))\nLOCALE_PATHS = (root(\"translations\"),)\n# If you set this to False, Django will make some optimizations so as not\n# to load the internationalization machinery.\nUSE_I18N = True\n# If you set this to False, Django will not format dates, numbers and",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "LANGUAGE_CODE = \"en-gb\"\nLANGUAGES = ((\"en-gb\", \"English\"), (\"cy\", \"Cymraeg\"))\nLOCALE_PATHS = (root(\"translations\"),)\n# If you set this to False, Django will make some optimizations so as not\n# to load the internationalization machinery.\nUSE_I18N = True\n# If you set this to False, Django will not format dates, numbers and\n# calendars according to the current locale.\nUSE_L10N = True\n# If you set this to False, Django will not use timezone-aware datetimes.",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "LANGUAGES",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "LANGUAGES = ((\"en-gb\", \"English\"), (\"cy\", \"Cymraeg\"))\nLOCALE_PATHS = (root(\"translations\"),)\n# If you set this to False, Django will make some optimizations so as not\n# to load the internationalization machinery.\nUSE_I18N = True\n# If you set this to False, Django will not format dates, numbers and\n# calendars according to the current locale.\nUSE_L10N = True\n# If you set this to False, Django will not use timezone-aware datetimes.\nUSE_TZ = True",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "LOCALE_PATHS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "LOCALE_PATHS = (root(\"translations\"),)\n# If you set this to False, Django will make some optimizations so as not\n# to load the internationalization machinery.\nUSE_I18N = True\n# If you set this to False, Django will not format dates, numbers and\n# calendars according to the current locale.\nUSE_L10N = True\n# If you set this to False, Django will not use timezone-aware datetimes.\nUSE_TZ = True\n# Absolute filesystem path to the directory that will hold user-uploaded files.",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "USE_I18N = True\n# If you set this to False, Django will not format dates, numbers and\n# calendars according to the current locale.\nUSE_L10N = True\n# If you set this to False, Django will not use timezone-aware datetimes.\nUSE_TZ = True\n# Absolute filesystem path to the directory that will hold user-uploaded files.\n# Example: \"/var/www/example.com/media/\"\nMEDIA_ROOT = root(\"assets\", \"uploads\")\n# URL that handles the media served from MEDIA_ROOT. Make sure to use a",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "USE_L10N = True\n# If you set this to False, Django will not use timezone-aware datetimes.\nUSE_TZ = True\n# Absolute filesystem path to the directory that will hold user-uploaded files.\n# Example: \"/var/www/example.com/media/\"\nMEDIA_ROOT = root(\"assets\", \"uploads\")\n# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n# trailing slash.\n# Examples: \"http://media.lawrence.com/media/\", \"http://example.com/media/\"\nMEDIA_URL = \"/media/\"",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "USE_TZ = True\n# Absolute filesystem path to the directory that will hold user-uploaded files.\n# Example: \"/var/www/example.com/media/\"\nMEDIA_ROOT = root(\"assets\", \"uploads\")\n# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n# trailing slash.\n# Examples: \"http://media.lawrence.com/media/\", \"http://example.com/media/\"\nMEDIA_URL = \"/media/\"\n# Absolute path to the directory static files should be collected to.\n# Don't put anything in this directory yourself; store your static files",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "MEDIA_ROOT = root(\"assets\", \"uploads\")\n# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n# trailing slash.\n# Examples: \"http://media.lawrence.com/media/\", \"http://example.com/media/\"\nMEDIA_URL = \"/media/\"\n# Absolute path to the directory static files should be collected to.\n# Don't put anything in this directory yourself; store your static files\n# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.\n# Example: \"/home/media/media.lawrence.com/static/\"\nSTATIC_ROOT = root(\"static\")",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "MEDIA_URL = \"/media/\"\n# Absolute path to the directory static files should be collected to.\n# Don't put anything in this directory yourself; store your static files\n# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.\n# Example: \"/home/media/media.lawrence.com/static/\"\nSTATIC_ROOT = root(\"static\")\n# URL prefix for static files.\n# Example: \"http://media.lawrence.com/static/\"\nSTATIC_URL = \"/static/\"\n# Additional locations of static files",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "STATIC_ROOT = root(\"static\")\n# URL prefix for static files.\n# Example: \"http://media.lawrence.com/static/\"\nSTATIC_URL = \"/static/\"\n# Additional locations of static files\nSTATICFILES_DIRS = (root(\"assets\"),)\n# List of finder classes that know how to find static files in\n# various locations.\nSTATICFILES_FINDERS = (\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "STATIC_URL = \"/static/\"\n# Additional locations of static files\nSTATICFILES_DIRS = (root(\"assets\"),)\n# List of finder classes that know how to find static files in\n# various locations.\nSTATICFILES_FINDERS = (\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",\n    \"django.contrib.staticfiles.finders.AppDirectoriesFinder\",\n)\n# Make this unique, and don't share it with anybody.",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "STATICFILES_DIRS = (root(\"assets\"),)\n# List of finder classes that know how to find static files in\n# various locations.\nSTATICFILES_FINDERS = (\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",\n    \"django.contrib.staticfiles.finders.AppDirectoriesFinder\",\n)\n# Make this unique, and don't share it with anybody.\nSECRET_KEY = os.environ.get(\"SECRET_KEY\", \"iia425u_J_pwntnEyqBuI1xBDqOX8nZ4uC73epGce_w\")\nMIDDLEWARE_CLASSES = (",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "STATICFILES_FINDERS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "STATICFILES_FINDERS = (\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",\n    \"django.contrib.staticfiles.finders.AppDirectoriesFinder\",\n)\n# Make this unique, and don't share it with anybody.\nSECRET_KEY = os.environ.get(\"SECRET_KEY\", \"iia425u_J_pwntnEyqBuI1xBDqOX8nZ4uC73epGce_w\")\nMIDDLEWARE_CLASSES = (\n    \"django.middleware.locale.LocaleMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "SECRET_KEY = os.environ.get(\"SECRET_KEY\", \"iia425u_J_pwntnEyqBuI1xBDqOX8nZ4uC73epGce_w\")\nMIDDLEWARE_CLASSES = (\n    \"django.middleware.locale.LocaleMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"core.admin.middleware.ClaSessionSecurityMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE_CLASSES",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "MIDDLEWARE_CLASSES = (\n    \"django.middleware.locale.LocaleMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"core.admin.middleware.ClaSessionSecurityMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"status.middleware.MaintenanceModeMiddleware\",",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "ROOT_URLCONF = \"cla_backend.urls\"\n# Python dotted path to the WSGI application used by Django's runserver.\nWSGI_APPLICATION = \"cla_backend.wsgi.application\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [root(\"templates\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "WSGI_APPLICATION = \"cla_backend.wsgi.application\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [root(\"templates\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.template.context_processors.debug\",",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [root(\"templates\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.i18n\",",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "BACKEND_ENABLED",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "BACKEND_ENABLED = os.environ.get(\"BACKEND_ENABLED\", \"True\") == \"True\"\nADMIN_ENABLED = os.environ.get(\"ADMIN_ENABLED\", \"True\") == \"True\"\nINSTALLED_APPS = (\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"djorm_pgfulltext\",\n    \"session_security\",",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "ADMIN_ENABLED",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "ADMIN_ENABLED = os.environ.get(\"ADMIN_ENABLED\", \"True\") == \"True\"\nINSTALLED_APPS = (\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"djorm_pgfulltext\",\n    \"session_security\",\n)",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "INSTALLED_APPS = (\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"djorm_pgfulltext\",\n    \"session_security\",\n)\nPROJECT_APPS = (",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "PROJECT_APPS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "PROJECT_APPS = (\n    \"core\",\n    \"legalaid\",\n    \"cla_butler\",\n    \"cla_provider\",\n    \"call_centre\",\n    \"cla_eventlog\",\n    \"knowledgebase\",\n    \"timer\",\n    \"diagnosis\",",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "OAUTH2_PROVIDER_APPLICATION_MODEL",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "OAUTH2_PROVIDER_APPLICATION_MODEL = \"oauth2_provider.Application\"\nINSTALLED_APPS += PROJECT_APPS\n# DIAGNOSIS\nDIAGNOSIS_FILE_NAME = \"graph.graphml\"\nCHECKER_DIAGNOSIS_FILE_NAME = \"checker-graph.graphml\"\nDIAGNOSES_USE_TEMPLATES = True\n# This is used in places where we want to refer to the front end externally like in emails\nFRONTEND_HOST_NAME = os.environ.get(\"FRONTEND_HOST_NAME\", \"http://127.0.0.1\")\n# Address of server to send notifications to frontend - used when contacting frontend internally\nEXPRESS_SERVER_HOST = os.environ.get(\"EXPRESS_SERVER_HOST\", \"http://127.0.0.1\")",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "DIAGNOSIS_FILE_NAME",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "DIAGNOSIS_FILE_NAME = \"graph.graphml\"\nCHECKER_DIAGNOSIS_FILE_NAME = \"checker-graph.graphml\"\nDIAGNOSES_USE_TEMPLATES = True\n# This is used in places where we want to refer to the front end externally like in emails\nFRONTEND_HOST_NAME = os.environ.get(\"FRONTEND_HOST_NAME\", \"http://127.0.0.1\")\n# Address of server to send notifications to frontend - used when contacting frontend internally\nEXPRESS_SERVER_HOST = os.environ.get(\"EXPRESS_SERVER_HOST\", \"http://127.0.0.1\")\nEXPRESS_SERVER_PORT = os.environ.get(\"EXPRESS_SERVER_PORT\", 8005)\n# A sample logging configuration. The only tangible logging\n# performed by this configuration is to send an email to",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "CHECKER_DIAGNOSIS_FILE_NAME",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "CHECKER_DIAGNOSIS_FILE_NAME = \"checker-graph.graphml\"\nDIAGNOSES_USE_TEMPLATES = True\n# This is used in places where we want to refer to the front end externally like in emails\nFRONTEND_HOST_NAME = os.environ.get(\"FRONTEND_HOST_NAME\", \"http://127.0.0.1\")\n# Address of server to send notifications to frontend - used when contacting frontend internally\nEXPRESS_SERVER_HOST = os.environ.get(\"EXPRESS_SERVER_HOST\", \"http://127.0.0.1\")\nEXPRESS_SERVER_PORT = os.environ.get(\"EXPRESS_SERVER_PORT\", 8005)\n# A sample logging configuration. The only tangible logging\n# performed by this configuration is to send an email to\n# the site admins on every HTTP 500 error when DEBUG=False.",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "DIAGNOSES_USE_TEMPLATES",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "DIAGNOSES_USE_TEMPLATES = True\n# This is used in places where we want to refer to the front end externally like in emails\nFRONTEND_HOST_NAME = os.environ.get(\"FRONTEND_HOST_NAME\", \"http://127.0.0.1\")\n# Address of server to send notifications to frontend - used when contacting frontend internally\nEXPRESS_SERVER_HOST = os.environ.get(\"EXPRESS_SERVER_HOST\", \"http://127.0.0.1\")\nEXPRESS_SERVER_PORT = os.environ.get(\"EXPRESS_SERVER_PORT\", 8005)\n# A sample logging configuration. The only tangible logging\n# performed by this configuration is to send an email to\n# the site admins on every HTTP 500 error when DEBUG=False.\n# See http://docs.djangoproject.com/en/dev/topics/logging for",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "FRONTEND_HOST_NAME",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "FRONTEND_HOST_NAME = os.environ.get(\"FRONTEND_HOST_NAME\", \"http://127.0.0.1\")\n# Address of server to send notifications to frontend - used when contacting frontend internally\nEXPRESS_SERVER_HOST = os.environ.get(\"EXPRESS_SERVER_HOST\", \"http://127.0.0.1\")\nEXPRESS_SERVER_PORT = os.environ.get(\"EXPRESS_SERVER_PORT\", 8005)\n# A sample logging configuration. The only tangible logging\n# performed by this configuration is to send an email to\n# the site admins on every HTTP 500 error when DEBUG=False.\n# See http://docs.djangoproject.com/en/dev/topics/logging for\n# more details on how to customize your logging configuration.\nLOGGING = {",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "EXPRESS_SERVER_HOST",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "EXPRESS_SERVER_HOST = os.environ.get(\"EXPRESS_SERVER_HOST\", \"http://127.0.0.1\")\nEXPRESS_SERVER_PORT = os.environ.get(\"EXPRESS_SERVER_PORT\", 8005)\n# A sample logging configuration. The only tangible logging\n# performed by this configuration is to send an email to\n# the site admins on every HTTP 500 error when DEBUG=False.\n# See http://docs.djangoproject.com/en/dev/topics/logging for\n# more details on how to customize your logging configuration.\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "EXPRESS_SERVER_PORT",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "EXPRESS_SERVER_PORT = os.environ.get(\"EXPRESS_SERVER_PORT\", 8005)\n# A sample logging configuration. The only tangible logging\n# performed by this configuration is to send an email to\n# the site admins on every HTTP 500 error when DEBUG=False.\n# See http://docs.djangoproject.com/en/dev/topics/logging for\n# more details on how to customize your logging configuration.\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "LOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {\n        \"verbose\": {\"format\": \"%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s\"},\n        \"simple\": {\"format\": \"%(levelname)s %(message)s\"},\n        \"logstash\": {\"()\": \"logstash_formatter.LogstashFormatter\"},\n    },\n    \"filters\": {\n        \"require_debug_false\": {\"()\": \"django.utils.log.RequireDebugFalse\"},",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "LOW_SAMPLE_RATE_TRANSACTIONS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "LOW_SAMPLE_RATE_TRANSACTIONS = [\"/status/\", \"/status\", \"/admin/\", \"/admin/login/\"]\ndef traces_sampler(sampling_context):\n    try:\n        name = sampling_context[\"wsgi_environ\"].get(\"PATH_INFO\")\n    except Exception:\n        pass\n    else:\n        if name in LOW_SAMPLE_RATE_TRANSACTIONS:\n            return 0.0001\n    return 0.1",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "LOGIN_FAILURE_LIMIT",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "LOGIN_FAILURE_LIMIT = 5\nLOGIN_FAILURE_COOLOFF_TIME = 60  # in minutes\n# Django rest-framework-overrides\nREST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\"oauth2_provider.ext.rest_framework.OAuth2Authentication\",),\n    \"DEFAULT_PERMISSION_CLASSES\": (\"core.permissions.AllowNone\",),\n    \"DEFAULT_RENDERER_CLASSES\": (\"rest_framework.renderers.JSONRenderer\",),\n    \"DEFAULT_THROTTLE_RATES\": {\"login\": \"10/sec\"},\n    # DRF3.0 on provides a default date time format, used to be none\n    \"DATETIME_FORMAT\": None,",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "LOGIN_FAILURE_COOLOFF_TIME",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "LOGIN_FAILURE_COOLOFF_TIME = 60  # in minutes\n# Django rest-framework-overrides\nREST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\"oauth2_provider.ext.rest_framework.OAuth2Authentication\",),\n    \"DEFAULT_PERMISSION_CLASSES\": (\"core.permissions.AllowNone\",),\n    \"DEFAULT_RENDERER_CLASSES\": (\"rest_framework.renderers.JSONRenderer\",),\n    \"DEFAULT_THROTTLE_RATES\": {\"login\": \"10/sec\"},\n    # DRF3.0 on provides a default date time format, used to be none\n    \"DATETIME_FORMAT\": None,\n    \"NON_FIELD_ERRORS_KEY\": \"__all__\",",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "REST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\"oauth2_provider.ext.rest_framework.OAuth2Authentication\",),\n    \"DEFAULT_PERMISSION_CLASSES\": (\"core.permissions.AllowNone\",),\n    \"DEFAULT_RENDERER_CLASSES\": (\"rest_framework.renderers.JSONRenderer\",),\n    \"DEFAULT_THROTTLE_RATES\": {\"login\": \"10/sec\"},\n    # DRF3.0 on provides a default date time format, used to be none\n    \"DATETIME_FORMAT\": None,\n    \"NON_FIELD_ERRORS_KEY\": \"__all__\",\n}\n# the start number of the LAA reference, must be 7 digit number and must",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "LAA_REFERENCE_SEED",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "LAA_REFERENCE_SEED = 3000000\nTEST_MODE = False\nEMAIL_TIMEOUT = 10\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\n# LGA-2236 Set rota hours start and end times using environment variables so can change without updating the code.\n# Want to alter start and end times via environment variables.\n# In case these are not set, default values are set here\nDEFAULT_NON_ROTA_START_TIME_HR = 8\nDEFAULT_NON_ROTA_END_TIME_HR = 17\nDEFAULT_ED_START_TIME_HR = 9",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "TEST_MODE",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "TEST_MODE = False\nEMAIL_TIMEOUT = 10\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\n# LGA-2236 Set rota hours start and end times using environment variables so can change without updating the code.\n# Want to alter start and end times via environment variables.\n# In case these are not set, default values are set here\nDEFAULT_NON_ROTA_START_TIME_HR = 8\nDEFAULT_NON_ROTA_END_TIME_HR = 17\nDEFAULT_ED_START_TIME_HR = 9\nDEFAULT_ED_END_TIME_HR = 17",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "EMAIL_TIMEOUT",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "EMAIL_TIMEOUT = 10\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\n# LGA-2236 Set rota hours start and end times using environment variables so can change without updating the code.\n# Want to alter start and end times via environment variables.\n# In case these are not set, default values are set here\nDEFAULT_NON_ROTA_START_TIME_HR = 8\nDEFAULT_NON_ROTA_END_TIME_HR = 17\nDEFAULT_ED_START_TIME_HR = 9\nDEFAULT_ED_END_TIME_HR = 17\nDEFAULT_DISCRIM_START_TIME_HR = 8",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "EMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\n# LGA-2236 Set rota hours start and end times using environment variables so can change without updating the code.\n# Want to alter start and end times via environment variables.\n# In case these are not set, default values are set here\nDEFAULT_NON_ROTA_START_TIME_HR = 8\nDEFAULT_NON_ROTA_END_TIME_HR = 17\nDEFAULT_ED_START_TIME_HR = 9\nDEFAULT_ED_END_TIME_HR = 17\nDEFAULT_DISCRIM_START_TIME_HR = 8\nDEFAULT_DISCRIM_END_TIME_HR = 18",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "DEFAULT_NON_ROTA_START_TIME_HR",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "DEFAULT_NON_ROTA_START_TIME_HR = 8\nDEFAULT_NON_ROTA_END_TIME_HR = 17\nDEFAULT_ED_START_TIME_HR = 9\nDEFAULT_ED_END_TIME_HR = 17\nDEFAULT_DISCRIM_START_TIME_HR = 8\nDEFAULT_DISCRIM_END_TIME_HR = 18\nNON_ROTA_START_TIME_HR = int(os.environ.get(\"NON_ROTA_START_TIME_HR\", DEFAULT_NON_ROTA_START_TIME_HR))\nNON_ROTA_END_TIME_HR = int(os.environ.get(\"NON_ROTA_END_TIME_HR\", DEFAULT_NON_ROTA_END_TIME_HR))\nEDUCATION_START_TIME_HR = int(os.environ.get(\"EDUCATION_START_TIME_HR\", DEFAULT_ED_START_TIME_HR))\nEDUCATION_END_TIME_HR = int(os.environ.get(\"EDUCATION_END_TIME_HR\", DEFAULT_ED_END_TIME_HR))",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "DEFAULT_NON_ROTA_END_TIME_HR",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "DEFAULT_NON_ROTA_END_TIME_HR = 17\nDEFAULT_ED_START_TIME_HR = 9\nDEFAULT_ED_END_TIME_HR = 17\nDEFAULT_DISCRIM_START_TIME_HR = 8\nDEFAULT_DISCRIM_END_TIME_HR = 18\nNON_ROTA_START_TIME_HR = int(os.environ.get(\"NON_ROTA_START_TIME_HR\", DEFAULT_NON_ROTA_START_TIME_HR))\nNON_ROTA_END_TIME_HR = int(os.environ.get(\"NON_ROTA_END_TIME_HR\", DEFAULT_NON_ROTA_END_TIME_HR))\nEDUCATION_START_TIME_HR = int(os.environ.get(\"EDUCATION_START_TIME_HR\", DEFAULT_ED_START_TIME_HR))\nEDUCATION_END_TIME_HR = int(os.environ.get(\"EDUCATION_END_TIME_HR\", DEFAULT_ED_END_TIME_HR))\nDISCRIMINATION_START_TIME_HR = int(os.environ.get(\"DISCRIMINATION_START_TIME_HR\", DEFAULT_DISCRIM_START_TIME_HR))",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "DEFAULT_ED_START_TIME_HR",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "DEFAULT_ED_START_TIME_HR = 9\nDEFAULT_ED_END_TIME_HR = 17\nDEFAULT_DISCRIM_START_TIME_HR = 8\nDEFAULT_DISCRIM_END_TIME_HR = 18\nNON_ROTA_START_TIME_HR = int(os.environ.get(\"NON_ROTA_START_TIME_HR\", DEFAULT_NON_ROTA_START_TIME_HR))\nNON_ROTA_END_TIME_HR = int(os.environ.get(\"NON_ROTA_END_TIME_HR\", DEFAULT_NON_ROTA_END_TIME_HR))\nEDUCATION_START_TIME_HR = int(os.environ.get(\"EDUCATION_START_TIME_HR\", DEFAULT_ED_START_TIME_HR))\nEDUCATION_END_TIME_HR = int(os.environ.get(\"EDUCATION_END_TIME_HR\", DEFAULT_ED_END_TIME_HR))\nDISCRIMINATION_START_TIME_HR = int(os.environ.get(\"DISCRIMINATION_START_TIME_HR\", DEFAULT_DISCRIM_START_TIME_HR))\nDISCRIMINATION_END_TIME_HR = int(os.environ.get(\"DISCRIMINATION_END_TIME_HR\", DEFAULT_DISCRIM_END_TIME_HR))",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "DEFAULT_ED_END_TIME_HR",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "DEFAULT_ED_END_TIME_HR = 17\nDEFAULT_DISCRIM_START_TIME_HR = 8\nDEFAULT_DISCRIM_END_TIME_HR = 18\nNON_ROTA_START_TIME_HR = int(os.environ.get(\"NON_ROTA_START_TIME_HR\", DEFAULT_NON_ROTA_START_TIME_HR))\nNON_ROTA_END_TIME_HR = int(os.environ.get(\"NON_ROTA_END_TIME_HR\", DEFAULT_NON_ROTA_END_TIME_HR))\nEDUCATION_START_TIME_HR = int(os.environ.get(\"EDUCATION_START_TIME_HR\", DEFAULT_ED_START_TIME_HR))\nEDUCATION_END_TIME_HR = int(os.environ.get(\"EDUCATION_END_TIME_HR\", DEFAULT_ED_END_TIME_HR))\nDISCRIMINATION_START_TIME_HR = int(os.environ.get(\"DISCRIMINATION_START_TIME_HR\", DEFAULT_DISCRIM_START_TIME_HR))\nDISCRIMINATION_END_TIME_HR = int(os.environ.get(\"DISCRIMINATION_END_TIME_HR\", DEFAULT_DISCRIM_END_TIME_HR))\nNON_ROTA_HOURS = {\"weekday\": (datetime.time(NON_ROTA_START_TIME_HR, 0), datetime.time(NON_ROTA_END_TIME_HR, 0))}",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DISCRIM_START_TIME_HR",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "DEFAULT_DISCRIM_START_TIME_HR = 8\nDEFAULT_DISCRIM_END_TIME_HR = 18\nNON_ROTA_START_TIME_HR = int(os.environ.get(\"NON_ROTA_START_TIME_HR\", DEFAULT_NON_ROTA_START_TIME_HR))\nNON_ROTA_END_TIME_HR = int(os.environ.get(\"NON_ROTA_END_TIME_HR\", DEFAULT_NON_ROTA_END_TIME_HR))\nEDUCATION_START_TIME_HR = int(os.environ.get(\"EDUCATION_START_TIME_HR\", DEFAULT_ED_START_TIME_HR))\nEDUCATION_END_TIME_HR = int(os.environ.get(\"EDUCATION_END_TIME_HR\", DEFAULT_ED_END_TIME_HR))\nDISCRIMINATION_START_TIME_HR = int(os.environ.get(\"DISCRIMINATION_START_TIME_HR\", DEFAULT_DISCRIM_START_TIME_HR))\nDISCRIMINATION_END_TIME_HR = int(os.environ.get(\"DISCRIMINATION_END_TIME_HR\", DEFAULT_DISCRIM_END_TIME_HR))\nNON_ROTA_HOURS = {\"weekday\": (datetime.time(NON_ROTA_START_TIME_HR, 0), datetime.time(NON_ROTA_END_TIME_HR, 0))}\nEDUCATION_DAILY_HOURS = (datetime.time(EDUCATION_START_TIME_HR, 0), datetime.time(EDUCATION_END_TIME_HR, 0))",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DISCRIM_END_TIME_HR",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "DEFAULT_DISCRIM_END_TIME_HR = 18\nNON_ROTA_START_TIME_HR = int(os.environ.get(\"NON_ROTA_START_TIME_HR\", DEFAULT_NON_ROTA_START_TIME_HR))\nNON_ROTA_END_TIME_HR = int(os.environ.get(\"NON_ROTA_END_TIME_HR\", DEFAULT_NON_ROTA_END_TIME_HR))\nEDUCATION_START_TIME_HR = int(os.environ.get(\"EDUCATION_START_TIME_HR\", DEFAULT_ED_START_TIME_HR))\nEDUCATION_END_TIME_HR = int(os.environ.get(\"EDUCATION_END_TIME_HR\", DEFAULT_ED_END_TIME_HR))\nDISCRIMINATION_START_TIME_HR = int(os.environ.get(\"DISCRIMINATION_START_TIME_HR\", DEFAULT_DISCRIM_START_TIME_HR))\nDISCRIMINATION_END_TIME_HR = int(os.environ.get(\"DISCRIMINATION_END_TIME_HR\", DEFAULT_DISCRIM_END_TIME_HR))\nNON_ROTA_HOURS = {\"weekday\": (datetime.time(NON_ROTA_START_TIME_HR, 0), datetime.time(NON_ROTA_END_TIME_HR, 0))}\nEDUCATION_DAILY_HOURS = (datetime.time(EDUCATION_START_TIME_HR, 0), datetime.time(EDUCATION_END_TIME_HR, 0))\nDISCRIMINATION_NON_ROTA_HOURS = {",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "NON_ROTA_START_TIME_HR",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "NON_ROTA_START_TIME_HR = int(os.environ.get(\"NON_ROTA_START_TIME_HR\", DEFAULT_NON_ROTA_START_TIME_HR))\nNON_ROTA_END_TIME_HR = int(os.environ.get(\"NON_ROTA_END_TIME_HR\", DEFAULT_NON_ROTA_END_TIME_HR))\nEDUCATION_START_TIME_HR = int(os.environ.get(\"EDUCATION_START_TIME_HR\", DEFAULT_ED_START_TIME_HR))\nEDUCATION_END_TIME_HR = int(os.environ.get(\"EDUCATION_END_TIME_HR\", DEFAULT_ED_END_TIME_HR))\nDISCRIMINATION_START_TIME_HR = int(os.environ.get(\"DISCRIMINATION_START_TIME_HR\", DEFAULT_DISCRIM_START_TIME_HR))\nDISCRIMINATION_END_TIME_HR = int(os.environ.get(\"DISCRIMINATION_END_TIME_HR\", DEFAULT_DISCRIM_END_TIME_HR))\nNON_ROTA_HOURS = {\"weekday\": (datetime.time(NON_ROTA_START_TIME_HR, 0), datetime.time(NON_ROTA_END_TIME_HR, 0))}\nEDUCATION_DAILY_HOURS = (datetime.time(EDUCATION_START_TIME_HR, 0), datetime.time(EDUCATION_END_TIME_HR, 0))\nDISCRIMINATION_NON_ROTA_HOURS = {\n    \"weekday\": (datetime.time(DISCRIMINATION_START_TIME_HR, 0), datetime.time(DISCRIMINATION_END_TIME_HR, 0))",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "NON_ROTA_END_TIME_HR",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "NON_ROTA_END_TIME_HR = int(os.environ.get(\"NON_ROTA_END_TIME_HR\", DEFAULT_NON_ROTA_END_TIME_HR))\nEDUCATION_START_TIME_HR = int(os.environ.get(\"EDUCATION_START_TIME_HR\", DEFAULT_ED_START_TIME_HR))\nEDUCATION_END_TIME_HR = int(os.environ.get(\"EDUCATION_END_TIME_HR\", DEFAULT_ED_END_TIME_HR))\nDISCRIMINATION_START_TIME_HR = int(os.environ.get(\"DISCRIMINATION_START_TIME_HR\", DEFAULT_DISCRIM_START_TIME_HR))\nDISCRIMINATION_END_TIME_HR = int(os.environ.get(\"DISCRIMINATION_END_TIME_HR\", DEFAULT_DISCRIM_END_TIME_HR))\nNON_ROTA_HOURS = {\"weekday\": (datetime.time(NON_ROTA_START_TIME_HR, 0), datetime.time(NON_ROTA_END_TIME_HR, 0))}\nEDUCATION_DAILY_HOURS = (datetime.time(EDUCATION_START_TIME_HR, 0), datetime.time(EDUCATION_END_TIME_HR, 0))\nDISCRIMINATION_NON_ROTA_HOURS = {\n    \"weekday\": (datetime.time(DISCRIMINATION_START_TIME_HR, 0), datetime.time(DISCRIMINATION_END_TIME_HR, 0))\n}",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "EDUCATION_START_TIME_HR",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "EDUCATION_START_TIME_HR = int(os.environ.get(\"EDUCATION_START_TIME_HR\", DEFAULT_ED_START_TIME_HR))\nEDUCATION_END_TIME_HR = int(os.environ.get(\"EDUCATION_END_TIME_HR\", DEFAULT_ED_END_TIME_HR))\nDISCRIMINATION_START_TIME_HR = int(os.environ.get(\"DISCRIMINATION_START_TIME_HR\", DEFAULT_DISCRIM_START_TIME_HR))\nDISCRIMINATION_END_TIME_HR = int(os.environ.get(\"DISCRIMINATION_END_TIME_HR\", DEFAULT_DISCRIM_END_TIME_HR))\nNON_ROTA_HOURS = {\"weekday\": (datetime.time(NON_ROTA_START_TIME_HR, 0), datetime.time(NON_ROTA_END_TIME_HR, 0))}\nEDUCATION_DAILY_HOURS = (datetime.time(EDUCATION_START_TIME_HR, 0), datetime.time(EDUCATION_END_TIME_HR, 0))\nDISCRIMINATION_NON_ROTA_HOURS = {\n    \"weekday\": (datetime.time(DISCRIMINATION_START_TIME_HR, 0), datetime.time(DISCRIMINATION_END_TIME_HR, 0))\n}\nEDUCATION_NON_ROTA_HOURS = {",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "EDUCATION_END_TIME_HR",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "EDUCATION_END_TIME_HR = int(os.environ.get(\"EDUCATION_END_TIME_HR\", DEFAULT_ED_END_TIME_HR))\nDISCRIMINATION_START_TIME_HR = int(os.environ.get(\"DISCRIMINATION_START_TIME_HR\", DEFAULT_DISCRIM_START_TIME_HR))\nDISCRIMINATION_END_TIME_HR = int(os.environ.get(\"DISCRIMINATION_END_TIME_HR\", DEFAULT_DISCRIM_END_TIME_HR))\nNON_ROTA_HOURS = {\"weekday\": (datetime.time(NON_ROTA_START_TIME_HR, 0), datetime.time(NON_ROTA_END_TIME_HR, 0))}\nEDUCATION_DAILY_HOURS = (datetime.time(EDUCATION_START_TIME_HR, 0), datetime.time(EDUCATION_END_TIME_HR, 0))\nDISCRIMINATION_NON_ROTA_HOURS = {\n    \"weekday\": (datetime.time(DISCRIMINATION_START_TIME_HR, 0), datetime.time(DISCRIMINATION_END_TIME_HR, 0))\n}\nEDUCATION_NON_ROTA_HOURS = {\n    \"monday\": EDUCATION_DAILY_HOURS,",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "DISCRIMINATION_START_TIME_HR",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "DISCRIMINATION_START_TIME_HR = int(os.environ.get(\"DISCRIMINATION_START_TIME_HR\", DEFAULT_DISCRIM_START_TIME_HR))\nDISCRIMINATION_END_TIME_HR = int(os.environ.get(\"DISCRIMINATION_END_TIME_HR\", DEFAULT_DISCRIM_END_TIME_HR))\nNON_ROTA_HOURS = {\"weekday\": (datetime.time(NON_ROTA_START_TIME_HR, 0), datetime.time(NON_ROTA_END_TIME_HR, 0))}\nEDUCATION_DAILY_HOURS = (datetime.time(EDUCATION_START_TIME_HR, 0), datetime.time(EDUCATION_END_TIME_HR, 0))\nDISCRIMINATION_NON_ROTA_HOURS = {\n    \"weekday\": (datetime.time(DISCRIMINATION_START_TIME_HR, 0), datetime.time(DISCRIMINATION_END_TIME_HR, 0))\n}\nEDUCATION_NON_ROTA_HOURS = {\n    \"monday\": EDUCATION_DAILY_HOURS,\n    \"tuesday\": EDUCATION_DAILY_HOURS,",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "DISCRIMINATION_END_TIME_HR",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "DISCRIMINATION_END_TIME_HR = int(os.environ.get(\"DISCRIMINATION_END_TIME_HR\", DEFAULT_DISCRIM_END_TIME_HR))\nNON_ROTA_HOURS = {\"weekday\": (datetime.time(NON_ROTA_START_TIME_HR, 0), datetime.time(NON_ROTA_END_TIME_HR, 0))}\nEDUCATION_DAILY_HOURS = (datetime.time(EDUCATION_START_TIME_HR, 0), datetime.time(EDUCATION_END_TIME_HR, 0))\nDISCRIMINATION_NON_ROTA_HOURS = {\n    \"weekday\": (datetime.time(DISCRIMINATION_START_TIME_HR, 0), datetime.time(DISCRIMINATION_END_TIME_HR, 0))\n}\nEDUCATION_NON_ROTA_HOURS = {\n    \"monday\": EDUCATION_DAILY_HOURS,\n    \"tuesday\": EDUCATION_DAILY_HOURS,\n    \"wednesday\": EDUCATION_DAILY_HOURS,",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "NON_ROTA_HOURS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "NON_ROTA_HOURS = {\"weekday\": (datetime.time(NON_ROTA_START_TIME_HR, 0), datetime.time(NON_ROTA_END_TIME_HR, 0))}\nEDUCATION_DAILY_HOURS = (datetime.time(EDUCATION_START_TIME_HR, 0), datetime.time(EDUCATION_END_TIME_HR, 0))\nDISCRIMINATION_NON_ROTA_HOURS = {\n    \"weekday\": (datetime.time(DISCRIMINATION_START_TIME_HR, 0), datetime.time(DISCRIMINATION_END_TIME_HR, 0))\n}\nEDUCATION_NON_ROTA_HOURS = {\n    \"monday\": EDUCATION_DAILY_HOURS,\n    \"tuesday\": EDUCATION_DAILY_HOURS,\n    \"wednesday\": EDUCATION_DAILY_HOURS,\n    \"thursday\": EDUCATION_DAILY_HOURS,",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "EDUCATION_DAILY_HOURS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "EDUCATION_DAILY_HOURS = (datetime.time(EDUCATION_START_TIME_HR, 0), datetime.time(EDUCATION_END_TIME_HR, 0))\nDISCRIMINATION_NON_ROTA_HOURS = {\n    \"weekday\": (datetime.time(DISCRIMINATION_START_TIME_HR, 0), datetime.time(DISCRIMINATION_END_TIME_HR, 0))\n}\nEDUCATION_NON_ROTA_HOURS = {\n    \"monday\": EDUCATION_DAILY_HOURS,\n    \"tuesday\": EDUCATION_DAILY_HOURS,\n    \"wednesday\": EDUCATION_DAILY_HOURS,\n    \"thursday\": EDUCATION_DAILY_HOURS,\n}",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "DISCRIMINATION_NON_ROTA_HOURS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "DISCRIMINATION_NON_ROTA_HOURS = {\n    \"weekday\": (datetime.time(DISCRIMINATION_START_TIME_HR, 0), datetime.time(DISCRIMINATION_END_TIME_HR, 0))\n}\nEDUCATION_NON_ROTA_HOURS = {\n    \"monday\": EDUCATION_DAILY_HOURS,\n    \"tuesday\": EDUCATION_DAILY_HOURS,\n    \"wednesday\": EDUCATION_DAILY_HOURS,\n    \"thursday\": EDUCATION_DAILY_HOURS,\n}\n# If an unknown or empty is used to get from NON_ROTA_OPENING_HOURS then it will default to a basic NON_ROTA_HOURS",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "EDUCATION_NON_ROTA_HOURS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "EDUCATION_NON_ROTA_HOURS = {\n    \"monday\": EDUCATION_DAILY_HOURS,\n    \"tuesday\": EDUCATION_DAILY_HOURS,\n    \"wednesday\": EDUCATION_DAILY_HOURS,\n    \"thursday\": EDUCATION_DAILY_HOURS,\n}\n# If an unknown or empty is used to get from NON_ROTA_OPENING_HOURS then it will default to a basic NON_ROTA_HOURS\nNON_ROTA_OPENING_HOURS = defaultdict(lambda: OpeningHours(**NON_ROTA_HOURS))\n# If provider types have different opening hours they will need to be added here, with the category they service as the key.\nNON_ROTA_OPENING_HOURS[\"discrimination\"] = OpeningHours(**DISCRIMINATION_NON_ROTA_HOURS)",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "NON_ROTA_OPENING_HOURS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "NON_ROTA_OPENING_HOURS = defaultdict(lambda: OpeningHours(**NON_ROTA_HOURS))\n# If provider types have different opening hours they will need to be added here, with the category they service as the key.\nNON_ROTA_OPENING_HOURS[\"discrimination\"] = OpeningHours(**DISCRIMINATION_NON_ROTA_HOURS)\nNON_ROTA_OPENING_HOURS[\"education\"] = OpeningHours(**EDUCATION_NON_ROTA_HOURS)\nOBIEE_IP_PERMISSIONS = (\"*\",)\nOBIEE_EMAIL_TO = os.environ.get(\"OBIEE_EMAIL_TO\", DEFAULT_EMAIL_TO)\nOBIEE_ZIP_PASSWORD = os.environ.get(\"OBIEE_ZIP_PASSWORD\")\nCLA_ENV = os.environ.get(\"CLA_ENV\", \"local\")\nBROKER_TRANSPORT_OPTIONS = {\n    \"polling_interval\": 10,",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "NON_ROTA_OPENING_HOURS[\"discrimination\"]",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "NON_ROTA_OPENING_HOURS[\"discrimination\"] = OpeningHours(**DISCRIMINATION_NON_ROTA_HOURS)\nNON_ROTA_OPENING_HOURS[\"education\"] = OpeningHours(**EDUCATION_NON_ROTA_HOURS)\nOBIEE_IP_PERMISSIONS = (\"*\",)\nOBIEE_EMAIL_TO = os.environ.get(\"OBIEE_EMAIL_TO\", DEFAULT_EMAIL_TO)\nOBIEE_ZIP_PASSWORD = os.environ.get(\"OBIEE_ZIP_PASSWORD\")\nCLA_ENV = os.environ.get(\"CLA_ENV\", \"local\")\nBROKER_TRANSPORT_OPTIONS = {\n    \"polling_interval\": 10,\n    \"region\": os.environ.get(\"SQS_REGION\", \"eu-west-2\"),\n    \"wait_time_seconds\": 20,",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "NON_ROTA_OPENING_HOURS[\"education\"]",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "NON_ROTA_OPENING_HOURS[\"education\"] = OpeningHours(**EDUCATION_NON_ROTA_HOURS)\nOBIEE_IP_PERMISSIONS = (\"*\",)\nOBIEE_EMAIL_TO = os.environ.get(\"OBIEE_EMAIL_TO\", DEFAULT_EMAIL_TO)\nOBIEE_ZIP_PASSWORD = os.environ.get(\"OBIEE_ZIP_PASSWORD\")\nCLA_ENV = os.environ.get(\"CLA_ENV\", \"local\")\nBROKER_TRANSPORT_OPTIONS = {\n    \"polling_interval\": 10,\n    \"region\": os.environ.get(\"SQS_REGION\", \"eu-west-2\"),\n    \"wait_time_seconds\": 20,\n}",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "OBIEE_IP_PERMISSIONS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "OBIEE_IP_PERMISSIONS = (\"*\",)\nOBIEE_EMAIL_TO = os.environ.get(\"OBIEE_EMAIL_TO\", DEFAULT_EMAIL_TO)\nOBIEE_ZIP_PASSWORD = os.environ.get(\"OBIEE_ZIP_PASSWORD\")\nCLA_ENV = os.environ.get(\"CLA_ENV\", \"local\")\nBROKER_TRANSPORT_OPTIONS = {\n    \"polling_interval\": 10,\n    \"region\": os.environ.get(\"SQS_REGION\", \"eu-west-2\"),\n    \"wait_time_seconds\": 20,\n}\nif os.environ.get(\"CELERY_PREDEFINED_QUEUE_URL\"):",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "OBIEE_EMAIL_TO",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "OBIEE_EMAIL_TO = os.environ.get(\"OBIEE_EMAIL_TO\", DEFAULT_EMAIL_TO)\nOBIEE_ZIP_PASSWORD = os.environ.get(\"OBIEE_ZIP_PASSWORD\")\nCLA_ENV = os.environ.get(\"CLA_ENV\", \"local\")\nBROKER_TRANSPORT_OPTIONS = {\n    \"polling_interval\": 10,\n    \"region\": os.environ.get(\"SQS_REGION\", \"eu-west-2\"),\n    \"wait_time_seconds\": 20,\n}\nif os.environ.get(\"CELERY_PREDEFINED_QUEUE_URL\"):\n    # Monkey patch the SQS transport channel to use our channel",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "OBIEE_ZIP_PASSWORD",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "OBIEE_ZIP_PASSWORD = os.environ.get(\"OBIEE_ZIP_PASSWORD\")\nCLA_ENV = os.environ.get(\"CLA_ENV\", \"local\")\nBROKER_TRANSPORT_OPTIONS = {\n    \"polling_interval\": 10,\n    \"region\": os.environ.get(\"SQS_REGION\", \"eu-west-2\"),\n    \"wait_time_seconds\": 20,\n}\nif os.environ.get(\"CELERY_PREDEFINED_QUEUE_URL\"):\n    # Monkey patch the SQS transport channel to use our channel\n    # This is to stop actions such as ListQueues being triggered",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "CLA_ENV",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "CLA_ENV = os.environ.get(\"CLA_ENV\", \"local\")\nBROKER_TRANSPORT_OPTIONS = {\n    \"polling_interval\": 10,\n    \"region\": os.environ.get(\"SQS_REGION\", \"eu-west-2\"),\n    \"wait_time_seconds\": 20,\n}\nif os.environ.get(\"CELERY_PREDEFINED_QUEUE_URL\"):\n    # Monkey patch the SQS transport channel to use our channel\n    # This is to stop actions such as ListQueues being triggered\n    # which we do not have on the cloud platform environments",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "BROKER_TRANSPORT_OPTIONS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "BROKER_TRANSPORT_OPTIONS = {\n    \"polling_interval\": 10,\n    \"region\": os.environ.get(\"SQS_REGION\", \"eu-west-2\"),\n    \"wait_time_seconds\": 20,\n}\nif os.environ.get(\"CELERY_PREDEFINED_QUEUE_URL\"):\n    # Monkey patch the SQS transport channel to use our channel\n    # This is to stop actions such as ListQueues being triggered\n    # which we do not have on the cloud platform environments\n    transport.SQS.Transport.Channel = CLASQSChannel",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_ACCEPT_CONTENT",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "CELERY_ACCEPT_CONTENT = [\"yaml\"]  # because json serializer doesn't support dates\nCELERY_TASK_SERIALIZER = \"yaml\"  # for consistency\nCELERY_RESULT_SERIALIZER = \"yaml\"  # as above but not actually used\nCELERY_ENABLE_UTC = True  # I think this is the default now anyway\nCELERY_RESULT_BACKEND = None  # SQS doesn't support it\nCELERY_IGNORE_RESULT = True  # SQS doesn't support it\nCELERY_MESSAGE_COMPRESSION = \"gzip\"  # got to look after the pennies\nCELERY_DISABLE_RATE_LIMITS = True  # they don't work with SQS\nCELERY_ENABLE_REMOTE_CONTROL = False  # doesn't work well under docker\nCELERY_TIMEZONE = \"UTC\"",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_SERIALIZER",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "CELERY_TASK_SERIALIZER = \"yaml\"  # for consistency\nCELERY_RESULT_SERIALIZER = \"yaml\"  # as above but not actually used\nCELERY_ENABLE_UTC = True  # I think this is the default now anyway\nCELERY_RESULT_BACKEND = None  # SQS doesn't support it\nCELERY_IGNORE_RESULT = True  # SQS doesn't support it\nCELERY_MESSAGE_COMPRESSION = \"gzip\"  # got to look after the pennies\nCELERY_DISABLE_RATE_LIMITS = True  # they don't work with SQS\nCELERY_ENABLE_REMOTE_CONTROL = False  # doesn't work well under docker\nCELERY_TIMEZONE = \"UTC\"\n# apps with celery tasks",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_SERIALIZER",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "CELERY_RESULT_SERIALIZER = \"yaml\"  # as above but not actually used\nCELERY_ENABLE_UTC = True  # I think this is the default now anyway\nCELERY_RESULT_BACKEND = None  # SQS doesn't support it\nCELERY_IGNORE_RESULT = True  # SQS doesn't support it\nCELERY_MESSAGE_COMPRESSION = \"gzip\"  # got to look after the pennies\nCELERY_DISABLE_RATE_LIMITS = True  # they don't work with SQS\nCELERY_ENABLE_REMOTE_CONTROL = False  # doesn't work well under docker\nCELERY_TIMEZONE = \"UTC\"\n# apps with celery tasks\nCELERY_IMPORTS = [\"reports.tasks\", \"notifications.tasks\"]",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_ENABLE_UTC",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "CELERY_ENABLE_UTC = True  # I think this is the default now anyway\nCELERY_RESULT_BACKEND = None  # SQS doesn't support it\nCELERY_IGNORE_RESULT = True  # SQS doesn't support it\nCELERY_MESSAGE_COMPRESSION = \"gzip\"  # got to look after the pennies\nCELERY_DISABLE_RATE_LIMITS = True  # they don't work with SQS\nCELERY_ENABLE_REMOTE_CONTROL = False  # doesn't work well under docker\nCELERY_TIMEZONE = \"UTC\"\n# apps with celery tasks\nCELERY_IMPORTS = [\"reports.tasks\", \"notifications.tasks\"]\nCELERY_TASK_PROTOCOL = 1",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_BACKEND",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "CELERY_RESULT_BACKEND = None  # SQS doesn't support it\nCELERY_IGNORE_RESULT = True  # SQS doesn't support it\nCELERY_MESSAGE_COMPRESSION = \"gzip\"  # got to look after the pennies\nCELERY_DISABLE_RATE_LIMITS = True  # they don't work with SQS\nCELERY_ENABLE_REMOTE_CONTROL = False  # doesn't work well under docker\nCELERY_TIMEZONE = \"UTC\"\n# apps with celery tasks\nCELERY_IMPORTS = [\"reports.tasks\", \"notifications.tasks\"]\nCELERY_TASK_PROTOCOL = 1\nCONTRACT_2018_ENABLED = os.environ.get(\"CONTRACT_2018_ENABLED\", \"True\") == \"True\"",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_IGNORE_RESULT",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "CELERY_IGNORE_RESULT = True  # SQS doesn't support it\nCELERY_MESSAGE_COMPRESSION = \"gzip\"  # got to look after the pennies\nCELERY_DISABLE_RATE_LIMITS = True  # they don't work with SQS\nCELERY_ENABLE_REMOTE_CONTROL = False  # doesn't work well under docker\nCELERY_TIMEZONE = \"UTC\"\n# apps with celery tasks\nCELERY_IMPORTS = [\"reports.tasks\", \"notifications.tasks\"]\nCELERY_TASK_PROTOCOL = 1\nCONTRACT_2018_ENABLED = os.environ.get(\"CONTRACT_2018_ENABLED\", \"True\") == \"True\"\nPING_JSON_KEYS[\"CONTRACT_2018_ENABLED_key\"] = \"CONTRACT_2018_ENABLED\"",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_MESSAGE_COMPRESSION",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "CELERY_MESSAGE_COMPRESSION = \"gzip\"  # got to look after the pennies\nCELERY_DISABLE_RATE_LIMITS = True  # they don't work with SQS\nCELERY_ENABLE_REMOTE_CONTROL = False  # doesn't work well under docker\nCELERY_TIMEZONE = \"UTC\"\n# apps with celery tasks\nCELERY_IMPORTS = [\"reports.tasks\", \"notifications.tasks\"]\nCELERY_TASK_PROTOCOL = 1\nCONTRACT_2018_ENABLED = os.environ.get(\"CONTRACT_2018_ENABLED\", \"True\") == \"True\"\nPING_JSON_KEYS[\"CONTRACT_2018_ENABLED_key\"] = \"CONTRACT_2018_ENABLED\"\nmortgage_cap_removal_date = os.environ.get(\"MORTGAGE_CAP_REMOVAL_DATE\", \"2021-01-28 00:00\")",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_DISABLE_RATE_LIMITS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "CELERY_DISABLE_RATE_LIMITS = True  # they don't work with SQS\nCELERY_ENABLE_REMOTE_CONTROL = False  # doesn't work well under docker\nCELERY_TIMEZONE = \"UTC\"\n# apps with celery tasks\nCELERY_IMPORTS = [\"reports.tasks\", \"notifications.tasks\"]\nCELERY_TASK_PROTOCOL = 1\nCONTRACT_2018_ENABLED = os.environ.get(\"CONTRACT_2018_ENABLED\", \"True\") == \"True\"\nPING_JSON_KEYS[\"CONTRACT_2018_ENABLED_key\"] = \"CONTRACT_2018_ENABLED\"\nmortgage_cap_removal_date = os.environ.get(\"MORTGAGE_CAP_REMOVAL_DATE\", \"2021-01-28 00:00\")\nMORTGAGE_CAP_REMOVAL_DATE = datetime.datetime.strptime(mortgage_cap_removal_date, \"%Y-%m-%d %H:%M\")",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_ENABLE_REMOTE_CONTROL",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "CELERY_ENABLE_REMOTE_CONTROL = False  # doesn't work well under docker\nCELERY_TIMEZONE = \"UTC\"\n# apps with celery tasks\nCELERY_IMPORTS = [\"reports.tasks\", \"notifications.tasks\"]\nCELERY_TASK_PROTOCOL = 1\nCONTRACT_2018_ENABLED = os.environ.get(\"CONTRACT_2018_ENABLED\", \"True\") == \"True\"\nPING_JSON_KEYS[\"CONTRACT_2018_ENABLED_key\"] = \"CONTRACT_2018_ENABLED\"\nmortgage_cap_removal_date = os.environ.get(\"MORTGAGE_CAP_REMOVAL_DATE\", \"2021-01-28 00:00\")\nMORTGAGE_CAP_REMOVAL_DATE = datetime.datetime.strptime(mortgage_cap_removal_date, \"%Y-%m-%d %H:%M\")\ndef bank_holidays_cache_adapter_factory():",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_TIMEZONE",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "CELERY_TIMEZONE = \"UTC\"\n# apps with celery tasks\nCELERY_IMPORTS = [\"reports.tasks\", \"notifications.tasks\"]\nCELERY_TASK_PROTOCOL = 1\nCONTRACT_2018_ENABLED = os.environ.get(\"CONTRACT_2018_ENABLED\", \"True\") == \"True\"\nPING_JSON_KEYS[\"CONTRACT_2018_ENABLED_key\"] = \"CONTRACT_2018_ENABLED\"\nmortgage_cap_removal_date = os.environ.get(\"MORTGAGE_CAP_REMOVAL_DATE\", \"2021-01-28 00:00\")\nMORTGAGE_CAP_REMOVAL_DATE = datetime.datetime.strptime(mortgage_cap_removal_date, \"%Y-%m-%d %H:%M\")\ndef bank_holidays_cache_adapter_factory():\n    from django.core.cache import cache",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_IMPORTS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "CELERY_IMPORTS = [\"reports.tasks\", \"notifications.tasks\"]\nCELERY_TASK_PROTOCOL = 1\nCONTRACT_2018_ENABLED = os.environ.get(\"CONTRACT_2018_ENABLED\", \"True\") == \"True\"\nPING_JSON_KEYS[\"CONTRACT_2018_ENABLED_key\"] = \"CONTRACT_2018_ENABLED\"\nmortgage_cap_removal_date = os.environ.get(\"MORTGAGE_CAP_REMOVAL_DATE\", \"2021-01-28 00:00\")\nMORTGAGE_CAP_REMOVAL_DATE = datetime.datetime.strptime(mortgage_cap_removal_date, \"%Y-%m-%d %H:%M\")\ndef bank_holidays_cache_adapter_factory():\n    from django.core.cache import cache\n    return cache\nCacheAdapter.set_adapter_factory(bank_holidays_cache_adapter_factory)",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_PROTOCOL",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "CELERY_TASK_PROTOCOL = 1\nCONTRACT_2018_ENABLED = os.environ.get(\"CONTRACT_2018_ENABLED\", \"True\") == \"True\"\nPING_JSON_KEYS[\"CONTRACT_2018_ENABLED_key\"] = \"CONTRACT_2018_ENABLED\"\nmortgage_cap_removal_date = os.environ.get(\"MORTGAGE_CAP_REMOVAL_DATE\", \"2021-01-28 00:00\")\nMORTGAGE_CAP_REMOVAL_DATE = datetime.datetime.strptime(mortgage_cap_removal_date, \"%Y-%m-%d %H:%M\")\ndef bank_holidays_cache_adapter_factory():\n    from django.core.cache import cache\n    return cache\nCacheAdapter.set_adapter_factory(bank_holidays_cache_adapter_factory)\nMAINTENANCE_MODE = os.environ.get(\"MAINTENANCE_MODE\", \"False\") == \"True\"",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "CONTRACT_2018_ENABLED",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "CONTRACT_2018_ENABLED = os.environ.get(\"CONTRACT_2018_ENABLED\", \"True\") == \"True\"\nPING_JSON_KEYS[\"CONTRACT_2018_ENABLED_key\"] = \"CONTRACT_2018_ENABLED\"\nmortgage_cap_removal_date = os.environ.get(\"MORTGAGE_CAP_REMOVAL_DATE\", \"2021-01-28 00:00\")\nMORTGAGE_CAP_REMOVAL_DATE = datetime.datetime.strptime(mortgage_cap_removal_date, \"%Y-%m-%d %H:%M\")\ndef bank_holidays_cache_adapter_factory():\n    from django.core.cache import cache\n    return cache\nCacheAdapter.set_adapter_factory(bank_holidays_cache_adapter_factory)\nMAINTENANCE_MODE = os.environ.get(\"MAINTENANCE_MODE\", \"False\") == \"True\"\n# Settings for django-session-security.",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "PING_JSON_KEYS[\"CONTRACT_2018_ENABLED_key\"]",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "PING_JSON_KEYS[\"CONTRACT_2018_ENABLED_key\"] = \"CONTRACT_2018_ENABLED\"\nmortgage_cap_removal_date = os.environ.get(\"MORTGAGE_CAP_REMOVAL_DATE\", \"2021-01-28 00:00\")\nMORTGAGE_CAP_REMOVAL_DATE = datetime.datetime.strptime(mortgage_cap_removal_date, \"%Y-%m-%d %H:%M\")\ndef bank_holidays_cache_adapter_factory():\n    from django.core.cache import cache\n    return cache\nCacheAdapter.set_adapter_factory(bank_holidays_cache_adapter_factory)\nMAINTENANCE_MODE = os.environ.get(\"MAINTENANCE_MODE\", \"False\") == \"True\"\n# Settings for django-session-security.\nDEFAULT_SESSION_SECURITY_WARN_AFTER = 60 * 25",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "mortgage_cap_removal_date",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "mortgage_cap_removal_date = os.environ.get(\"MORTGAGE_CAP_REMOVAL_DATE\", \"2021-01-28 00:00\")\nMORTGAGE_CAP_REMOVAL_DATE = datetime.datetime.strptime(mortgage_cap_removal_date, \"%Y-%m-%d %H:%M\")\ndef bank_holidays_cache_adapter_factory():\n    from django.core.cache import cache\n    return cache\nCacheAdapter.set_adapter_factory(bank_holidays_cache_adapter_factory)\nMAINTENANCE_MODE = os.environ.get(\"MAINTENANCE_MODE\", \"False\") == \"True\"\n# Settings for django-session-security.\nDEFAULT_SESSION_SECURITY_WARN_AFTER = 60 * 25\nDEFAULT_SESSION_SECURITY_EXPIRE_AFTER = 60 * 30",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "MORTGAGE_CAP_REMOVAL_DATE",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "MORTGAGE_CAP_REMOVAL_DATE = datetime.datetime.strptime(mortgage_cap_removal_date, \"%Y-%m-%d %H:%M\")\ndef bank_holidays_cache_adapter_factory():\n    from django.core.cache import cache\n    return cache\nCacheAdapter.set_adapter_factory(bank_holidays_cache_adapter_factory)\nMAINTENANCE_MODE = os.environ.get(\"MAINTENANCE_MODE\", \"False\") == \"True\"\n# Settings for django-session-security.\nDEFAULT_SESSION_SECURITY_WARN_AFTER = 60 * 25\nDEFAULT_SESSION_SECURITY_EXPIRE_AFTER = 60 * 30\nSESSION_EXPIRE_AT_BROWSER_CLOSE = True",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "MAINTENANCE_MODE",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "MAINTENANCE_MODE = os.environ.get(\"MAINTENANCE_MODE\", \"False\") == \"True\"\n# Settings for django-session-security.\nDEFAULT_SESSION_SECURITY_WARN_AFTER = 60 * 25\nDEFAULT_SESSION_SECURITY_EXPIRE_AFTER = 60 * 30\nSESSION_EXPIRE_AT_BROWSER_CLOSE = True\nSESSION_SECURITY_WARN_AFTER = int(os.environ.get(\"SESSION_SECURITY_WARN_AFTER\", DEFAULT_SESSION_SECURITY_WARN_AFTER))\nSESSION_SECURITY_EXPIRE_AFTER = int(\n    os.environ.get(\"SESSION_SECURITY_EXPIRE_AFTER\", DEFAULT_SESSION_SECURITY_EXPIRE_AFTER)\n)\n# Set all non-admin urls to passive.",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SESSION_SECURITY_WARN_AFTER",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "DEFAULT_SESSION_SECURITY_WARN_AFTER = 60 * 25\nDEFAULT_SESSION_SECURITY_EXPIRE_AFTER = 60 * 30\nSESSION_EXPIRE_AT_BROWSER_CLOSE = True\nSESSION_SECURITY_WARN_AFTER = int(os.environ.get(\"SESSION_SECURITY_WARN_AFTER\", DEFAULT_SESSION_SECURITY_WARN_AFTER))\nSESSION_SECURITY_EXPIRE_AFTER = int(\n    os.environ.get(\"SESSION_SECURITY_EXPIRE_AFTER\", DEFAULT_SESSION_SECURITY_EXPIRE_AFTER)\n)\n# Set all non-admin urls to passive.\n# Session security for non-admin urls is handled in the calling applications.\nPASSIVE_URL_REGEX_LIST = [r\"^(?!\\/admin\\/).*\", r\"^(\\/admin\\/).*\\/exports/$\"]",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SESSION_SECURITY_EXPIRE_AFTER",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "DEFAULT_SESSION_SECURITY_EXPIRE_AFTER = 60 * 30\nSESSION_EXPIRE_AT_BROWSER_CLOSE = True\nSESSION_SECURITY_WARN_AFTER = int(os.environ.get(\"SESSION_SECURITY_WARN_AFTER\", DEFAULT_SESSION_SECURITY_WARN_AFTER))\nSESSION_SECURITY_EXPIRE_AFTER = int(\n    os.environ.get(\"SESSION_SECURITY_EXPIRE_AFTER\", DEFAULT_SESSION_SECURITY_EXPIRE_AFTER)\n)\n# Set all non-admin urls to passive.\n# Session security for non-admin urls is handled in the calling applications.\nPASSIVE_URL_REGEX_LIST = [r\"^(?!\\/admin\\/).*\", r\"^(\\/admin\\/).*\\/exports/$\"]\nSESSION_SECURITY_PASSIVE_URLS = []",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "SESSION_EXPIRE_AT_BROWSER_CLOSE",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "SESSION_EXPIRE_AT_BROWSER_CLOSE = True\nSESSION_SECURITY_WARN_AFTER = int(os.environ.get(\"SESSION_SECURITY_WARN_AFTER\", DEFAULT_SESSION_SECURITY_WARN_AFTER))\nSESSION_SECURITY_EXPIRE_AFTER = int(\n    os.environ.get(\"SESSION_SECURITY_EXPIRE_AFTER\", DEFAULT_SESSION_SECURITY_EXPIRE_AFTER)\n)\n# Set all non-admin urls to passive.\n# Session security for non-admin urls is handled in the calling applications.\nPASSIVE_URL_REGEX_LIST = [r\"^(?!\\/admin\\/).*\", r\"^(\\/admin\\/).*\\/exports/$\"]\nSESSION_SECURITY_PASSIVE_URLS = []\nEMAIL_ORCHESTRATOR_URL = os.environ.get(\"EMAIL_ORCHESTRATOR_URL\")",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "SESSION_SECURITY_WARN_AFTER",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "SESSION_SECURITY_WARN_AFTER = int(os.environ.get(\"SESSION_SECURITY_WARN_AFTER\", DEFAULT_SESSION_SECURITY_WARN_AFTER))\nSESSION_SECURITY_EXPIRE_AFTER = int(\n    os.environ.get(\"SESSION_SECURITY_EXPIRE_AFTER\", DEFAULT_SESSION_SECURITY_EXPIRE_AFTER)\n)\n# Set all non-admin urls to passive.\n# Session security for non-admin urls is handled in the calling applications.\nPASSIVE_URL_REGEX_LIST = [r\"^(?!\\/admin\\/).*\", r\"^(\\/admin\\/).*\\/exports/$\"]\nSESSION_SECURITY_PASSIVE_URLS = []\nEMAIL_ORCHESTRATOR_URL = os.environ.get(\"EMAIL_ORCHESTRATOR_URL\")\nUSE_EMAIL_ORCHESTRATOR_FLAG = os.environ.get(\"USE_EMAIL_ORCHESTRATOR_FLAG\", \"False\") == \"True\"",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "SESSION_SECURITY_EXPIRE_AFTER",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "SESSION_SECURITY_EXPIRE_AFTER = int(\n    os.environ.get(\"SESSION_SECURITY_EXPIRE_AFTER\", DEFAULT_SESSION_SECURITY_EXPIRE_AFTER)\n)\n# Set all non-admin urls to passive.\n# Session security for non-admin urls is handled in the calling applications.\nPASSIVE_URL_REGEX_LIST = [r\"^(?!\\/admin\\/).*\", r\"^(\\/admin\\/).*\\/exports/$\"]\nSESSION_SECURITY_PASSIVE_URLS = []\nEMAIL_ORCHESTRATOR_URL = os.environ.get(\"EMAIL_ORCHESTRATOR_URL\")\nUSE_EMAIL_ORCHESTRATOR_FLAG = os.environ.get(\"USE_EMAIL_ORCHESTRATOR_FLAG\", \"False\") == \"True\"\n# .local.py overrides all the common settings.",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "PASSIVE_URL_REGEX_LIST",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "PASSIVE_URL_REGEX_LIST = [r\"^(?!\\/admin\\/).*\", r\"^(\\/admin\\/).*\\/exports/$\"]\nSESSION_SECURITY_PASSIVE_URLS = []\nEMAIL_ORCHESTRATOR_URL = os.environ.get(\"EMAIL_ORCHESTRATOR_URL\")\nUSE_EMAIL_ORCHESTRATOR_FLAG = os.environ.get(\"USE_EMAIL_ORCHESTRATOR_FLAG\", \"False\") == \"True\"\n# .local.py overrides all the common settings.\ntry:\n    from .local import *\nexcept ImportError:\n    pass\n# importing test settings file if necessary (TODO chould be done better)",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "SESSION_SECURITY_PASSIVE_URLS",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "SESSION_SECURITY_PASSIVE_URLS = []\nEMAIL_ORCHESTRATOR_URL = os.environ.get(\"EMAIL_ORCHESTRATOR_URL\")\nUSE_EMAIL_ORCHESTRATOR_FLAG = os.environ.get(\"USE_EMAIL_ORCHESTRATOR_FLAG\", \"False\") == \"True\"\n# .local.py overrides all the common settings.\ntry:\n    from .local import *\nexcept ImportError:\n    pass\n# importing test settings file if necessary (TODO chould be done better)\nif len(sys.argv) > 1 and \"test\" == sys.argv[1]:",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "EMAIL_ORCHESTRATOR_URL",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "EMAIL_ORCHESTRATOR_URL = os.environ.get(\"EMAIL_ORCHESTRATOR_URL\")\nUSE_EMAIL_ORCHESTRATOR_FLAG = os.environ.get(\"USE_EMAIL_ORCHESTRATOR_FLAG\", \"False\") == \"True\"\n# .local.py overrides all the common settings.\ntry:\n    from .local import *\nexcept ImportError:\n    pass\n# importing test settings file if necessary (TODO chould be done better)\nif len(sys.argv) > 1 and \"test\" == sys.argv[1]:\n    from .testing import *",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "USE_EMAIL_ORCHESTRATOR_FLAG",
        "kind": 5,
        "importPath": "cla_backend.settings.base",
        "description": "cla_backend.settings.base",
        "peekOfCode": "USE_EMAIL_ORCHESTRATOR_FLAG = os.environ.get(\"USE_EMAIL_ORCHESTRATOR_FLAG\", \"False\") == \"True\"\n# .local.py overrides all the common settings.\ntry:\n    from .local import *\nexcept ImportError:\n    pass\n# importing test settings file if necessary (TODO chould be done better)\nif len(sys.argv) > 1 and \"test\" == sys.argv[1]:\n    from .testing import *",
        "detail": "cla_backend.settings.base",
        "documentation": {}
    },
    {
        "label": "ADMINS",
        "kind": 5,
        "importPath": "cla_backend.settings.circle",
        "description": "cla_backend.settings.circle",
        "peekOfCode": "ADMINS = ((\"CLA\", \"cla-alerts@digital.justice.gov.uk\"),)\nMANAGERS = ADMINS\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"cla_backend.apps.reports.db.backend\",\n        \"NAME\": os.environ.get(\"DB_NAME\", \"circle_test\"),\n        \"USER\": os.environ.get(\"DB_USER\", \"root\"),\n        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"\"),\n        \"HOST\": os.environ.get(\"DB_HOST\", \"localhost\"),\n        \"PORT\": os.environ.get(\"DB_PORT\", \"\"),",
        "detail": "cla_backend.settings.circle",
        "documentation": {}
    },
    {
        "label": "MANAGERS",
        "kind": 5,
        "importPath": "cla_backend.settings.circle",
        "description": "cla_backend.settings.circle",
        "peekOfCode": "MANAGERS = ADMINS\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"cla_backend.apps.reports.db.backend\",\n        \"NAME\": os.environ.get(\"DB_NAME\", \"circle_test\"),\n        \"USER\": os.environ.get(\"DB_USER\", \"root\"),\n        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"\"),\n        \"HOST\": os.environ.get(\"DB_HOST\", \"localhost\"),\n        \"PORT\": os.environ.get(\"DB_PORT\", \"\"),\n    }",
        "detail": "cla_backend.settings.circle",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "cla_backend.settings.circle",
        "description": "cla_backend.settings.circle",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"cla_backend.apps.reports.db.backend\",\n        \"NAME\": os.environ.get(\"DB_NAME\", \"circle_test\"),\n        \"USER\": os.environ.get(\"DB_USER\", \"root\"),\n        \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"\"),\n        \"HOST\": os.environ.get(\"DB_HOST\", \"localhost\"),\n        \"PORT\": os.environ.get(\"DB_PORT\", \"\"),\n    }\n}",
        "detail": "cla_backend.settings.circle",
        "documentation": {}
    },
    {
        "label": "TEST_OUTPUT_DIR",
        "kind": 5,
        "importPath": "cla_backend.settings.circle",
        "description": "cla_backend.settings.circle",
        "peekOfCode": "TEST_OUTPUT_DIR = \"test-reports\"",
        "detail": "cla_backend.settings.circle",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "cla_backend.settings.integration",
        "description": "cla_backend.settings.integration",
        "peekOfCode": "DEBUG = True\nTEMPLATE_DEBUG = DEBUG\nADMINS = ((\"CLA\", \"cla-alerts@digital.justice.gov.uk\"),)\nMANAGERS = ADMINS\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\n        \"NAME\": \"cla_backend\",\n        \"USER\": \"\",\n        \"PASSWORD\": \"\",",
        "detail": "cla_backend.settings.integration",
        "documentation": {}
    },
    {
        "label": "TEMPLATE_DEBUG",
        "kind": 5,
        "importPath": "cla_backend.settings.integration",
        "description": "cla_backend.settings.integration",
        "peekOfCode": "TEMPLATE_DEBUG = DEBUG\nADMINS = ((\"CLA\", \"cla-alerts@digital.justice.gov.uk\"),)\nMANAGERS = ADMINS\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\n        \"NAME\": \"cla_backend\",\n        \"USER\": \"\",\n        \"PASSWORD\": \"\",\n        \"HOST\": \"\",  # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.",
        "detail": "cla_backend.settings.integration",
        "documentation": {}
    },
    {
        "label": "ADMINS",
        "kind": 5,
        "importPath": "cla_backend.settings.integration",
        "description": "cla_backend.settings.integration",
        "peekOfCode": "ADMINS = ((\"CLA\", \"cla-alerts@digital.justice.gov.uk\"),)\nMANAGERS = ADMINS\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\n        \"NAME\": \"cla_backend\",\n        \"USER\": \"\",\n        \"PASSWORD\": \"\",\n        \"HOST\": \"\",  # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.\n        \"PORT\": \"\",  # Set to empty string for default.",
        "detail": "cla_backend.settings.integration",
        "documentation": {}
    },
    {
        "label": "MANAGERS",
        "kind": 5,
        "importPath": "cla_backend.settings.integration",
        "description": "cla_backend.settings.integration",
        "peekOfCode": "MANAGERS = ADMINS\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\n        \"NAME\": \"cla_backend\",\n        \"USER\": \"\",\n        \"PASSWORD\": \"\",\n        \"HOST\": \"\",  # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.\n        \"PORT\": \"\",  # Set to empty string for default.\n    }",
        "detail": "cla_backend.settings.integration",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "cla_backend.settings.integration",
        "description": "cla_backend.settings.integration",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\n        \"NAME\": \"cla_backend\",\n        \"USER\": \"\",\n        \"PASSWORD\": \"\",\n        \"HOST\": \"\",  # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.\n        \"PORT\": \"\",  # Set to empty string for default.\n    }\n}",
        "detail": "cla_backend.settings.integration",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "cla_backend.settings.local",
        "description": "cla_backend.settings.local",
        "peekOfCode": "DEBUG = True\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"filters\": {\"require_debug_false\": {\"()\": \"django.utils.log.RequireDebugFalse\"}},\n    \"handlers\": {\n        \"mail_admins\": {\n            \"level\": \"ERROR\",\n            \"filters\": [\"require_debug_false\"],\n            \"class\": \"django.utils.log.AdminEmailHandler\",",
        "detail": "cla_backend.settings.local",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "cla_backend.settings.local",
        "description": "cla_backend.settings.local",
        "peekOfCode": "LOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"filters\": {\"require_debug_false\": {\"()\": \"django.utils.log.RequireDebugFalse\"}},\n    \"handlers\": {\n        \"mail_admins\": {\n            \"level\": \"ERROR\",\n            \"filters\": [\"require_debug_false\"],\n            \"class\": \"django.utils.log.AdminEmailHandler\",\n        }",
        "detail": "cla_backend.settings.local",
        "documentation": {}
    },
    {
        "label": "DATABASES[\"default\"]",
        "kind": 5,
        "importPath": "cla_backend.settings.local",
        "description": "cla_backend.settings.local",
        "peekOfCode": "DATABASES[\"default\"] = {\n    \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\n    \"NAME\": os.environ.get(\"DB_NAME\", \"cla_backend\"),\n    \"USER\": os.environ.get(\"DB_USER\", \"postgres\"),\n    \"PASSWORD\": os.environ.get(\"DB_PASSWORD\", \"postgres\"),\n    \"HOST\": os.environ.get(\"DB_HOST\", \"localhost\"),\n    \"PORT\": os.environ.get(\"DB_PORT\", \"5433\"),\n}\n# don't bother with celery locally\nCELERY_ALWAYS_EAGER = True",
        "detail": "cla_backend.settings.local",
        "documentation": {}
    },
    {
        "label": "CELERY_ALWAYS_EAGER",
        "kind": 5,
        "importPath": "cla_backend.settings.local",
        "description": "cla_backend.settings.local",
        "peekOfCode": "CELERY_ALWAYS_EAGER = True\nOBIEE_ZIP_PASSWORD = \"test\"",
        "detail": "cla_backend.settings.local",
        "documentation": {}
    },
    {
        "label": "OBIEE_ZIP_PASSWORD",
        "kind": 5,
        "importPath": "cla_backend.settings.local",
        "description": "cla_backend.settings.local",
        "peekOfCode": "OBIEE_ZIP_PASSWORD = \"test\"",
        "detail": "cla_backend.settings.local",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "cla_backend.settings.production",
        "description": "cla_backend.settings.production",
        "peekOfCode": "DEBUG = True\nTEMPLATE_DEBUG = DEBUG\nADMINS = ((\"MoJ\", \"Your email\"),)\nMANAGERS = ADMINS\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\n        \"NAME\": \"cla_backend\",\n        \"USER\": \"\",\n        \"PASSWORD\": \"\",",
        "detail": "cla_backend.settings.production",
        "documentation": {}
    },
    {
        "label": "TEMPLATE_DEBUG",
        "kind": 5,
        "importPath": "cla_backend.settings.production",
        "description": "cla_backend.settings.production",
        "peekOfCode": "TEMPLATE_DEBUG = DEBUG\nADMINS = ((\"MoJ\", \"Your email\"),)\nMANAGERS = ADMINS\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\n        \"NAME\": \"cla_backend\",\n        \"USER\": \"\",\n        \"PASSWORD\": \"\",\n        \"HOST\": \"\",",
        "detail": "cla_backend.settings.production",
        "documentation": {}
    },
    {
        "label": "ADMINS",
        "kind": 5,
        "importPath": "cla_backend.settings.production",
        "description": "cla_backend.settings.production",
        "peekOfCode": "ADMINS = ((\"MoJ\", \"Your email\"),)\nMANAGERS = ADMINS\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\n        \"NAME\": \"cla_backend\",\n        \"USER\": \"\",\n        \"PASSWORD\": \"\",\n        \"HOST\": \"\",\n        \"PORT\": \"\",",
        "detail": "cla_backend.settings.production",
        "documentation": {}
    },
    {
        "label": "MANAGERS",
        "kind": 5,
        "importPath": "cla_backend.settings.production",
        "description": "cla_backend.settings.production",
        "peekOfCode": "MANAGERS = ADMINS\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\n        \"NAME\": \"cla_backend\",\n        \"USER\": \"\",\n        \"PASSWORD\": \"\",\n        \"HOST\": \"\",\n        \"PORT\": \"\",\n    }",
        "detail": "cla_backend.settings.production",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "cla_backend.settings.production",
        "description": "cla_backend.settings.production",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\n        \"NAME\": \"cla_backend\",\n        \"USER\": \"\",\n        \"PASSWORD\": \"\",\n        \"HOST\": \"\",\n        \"PORT\": \"\",\n    }\n}",
        "detail": "cla_backend.settings.production",
        "documentation": {}
    },
    {
        "label": "DisableMigrations",
        "kind": 6,
        "importPath": "cla_backend.settings.testing",
        "description": "cla_backend.settings.testing",
        "peekOfCode": "class DisableMigrations(object):\n    def __contains__(self, item):\n        return True\n    def __getitem__(self, item):\n        return \"notmigrations\"\nMIGRATION_MODULES = DisableMigrations()\nSESSION_SECURITY_WARN_AFTER = 5\nSESSION_SECURITY_EXPIRE_AFTER = 10",
        "detail": "cla_backend.settings.testing",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "cla_backend.settings.testing",
        "description": "cla_backend.settings.testing",
        "peekOfCode": "DEBUG = False\nTEMPLATE_DEBUG = DEBUG\nTEST_APPS = (\"django_pdb\",)\nTEST_MODE = True\nOBIEE_ZIP_PASSWORD = \"test\"\nREST_FRAMEWORK[\"DEFAULT_THROTTLE_RATES\"][\"login\"] = \"10000000000/sec\"\nTEST_RUNNER = \"core.testing.CLADiscoverRunner\"\nDATABASES[\"default\"][\"ENGINE\"] = \"cla_backend.apps.reports.db.backend\"\nALLOWED_HOSTS = [\"*\"]\nTEST_OUTPUT_DIR = \"test-reports\"",
        "detail": "cla_backend.settings.testing",
        "documentation": {}
    },
    {
        "label": "TEMPLATE_DEBUG",
        "kind": 5,
        "importPath": "cla_backend.settings.testing",
        "description": "cla_backend.settings.testing",
        "peekOfCode": "TEMPLATE_DEBUG = DEBUG\nTEST_APPS = (\"django_pdb\",)\nTEST_MODE = True\nOBIEE_ZIP_PASSWORD = \"test\"\nREST_FRAMEWORK[\"DEFAULT_THROTTLE_RATES\"][\"login\"] = \"10000000000/sec\"\nTEST_RUNNER = \"core.testing.CLADiscoverRunner\"\nDATABASES[\"default\"][\"ENGINE\"] = \"cla_backend.apps.reports.db.backend\"\nALLOWED_HOSTS = [\"*\"]\nTEST_OUTPUT_DIR = \"test-reports\"\nOPERATOR_HOURS = {\"weekday\": (time(9, 0), time(20, 0)), \"saturday\": (time(9, 0), time(12, 30))}",
        "detail": "cla_backend.settings.testing",
        "documentation": {}
    },
    {
        "label": "TEST_APPS",
        "kind": 5,
        "importPath": "cla_backend.settings.testing",
        "description": "cla_backend.settings.testing",
        "peekOfCode": "TEST_APPS = (\"django_pdb\",)\nTEST_MODE = True\nOBIEE_ZIP_PASSWORD = \"test\"\nREST_FRAMEWORK[\"DEFAULT_THROTTLE_RATES\"][\"login\"] = \"10000000000/sec\"\nTEST_RUNNER = \"core.testing.CLADiscoverRunner\"\nDATABASES[\"default\"][\"ENGINE\"] = \"cla_backend.apps.reports.db.backend\"\nALLOWED_HOSTS = [\"*\"]\nTEST_OUTPUT_DIR = \"test-reports\"\nOPERATOR_HOURS = {\"weekday\": (time(9, 0), time(20, 0)), \"saturday\": (time(9, 0), time(12, 30))}\nclass DisableMigrations(object):",
        "detail": "cla_backend.settings.testing",
        "documentation": {}
    },
    {
        "label": "TEST_MODE",
        "kind": 5,
        "importPath": "cla_backend.settings.testing",
        "description": "cla_backend.settings.testing",
        "peekOfCode": "TEST_MODE = True\nOBIEE_ZIP_PASSWORD = \"test\"\nREST_FRAMEWORK[\"DEFAULT_THROTTLE_RATES\"][\"login\"] = \"10000000000/sec\"\nTEST_RUNNER = \"core.testing.CLADiscoverRunner\"\nDATABASES[\"default\"][\"ENGINE\"] = \"cla_backend.apps.reports.db.backend\"\nALLOWED_HOSTS = [\"*\"]\nTEST_OUTPUT_DIR = \"test-reports\"\nOPERATOR_HOURS = {\"weekday\": (time(9, 0), time(20, 0)), \"saturday\": (time(9, 0), time(12, 30))}\nclass DisableMigrations(object):\n    def __contains__(self, item):",
        "detail": "cla_backend.settings.testing",
        "documentation": {}
    },
    {
        "label": "OBIEE_ZIP_PASSWORD",
        "kind": 5,
        "importPath": "cla_backend.settings.testing",
        "description": "cla_backend.settings.testing",
        "peekOfCode": "OBIEE_ZIP_PASSWORD = \"test\"\nREST_FRAMEWORK[\"DEFAULT_THROTTLE_RATES\"][\"login\"] = \"10000000000/sec\"\nTEST_RUNNER = \"core.testing.CLADiscoverRunner\"\nDATABASES[\"default\"][\"ENGINE\"] = \"cla_backend.apps.reports.db.backend\"\nALLOWED_HOSTS = [\"*\"]\nTEST_OUTPUT_DIR = \"test-reports\"\nOPERATOR_HOURS = {\"weekday\": (time(9, 0), time(20, 0)), \"saturday\": (time(9, 0), time(12, 30))}\nclass DisableMigrations(object):\n    def __contains__(self, item):\n        return True",
        "detail": "cla_backend.settings.testing",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK[\"DEFAULT_THROTTLE_RATES\"][\"login\"]",
        "kind": 5,
        "importPath": "cla_backend.settings.testing",
        "description": "cla_backend.settings.testing",
        "peekOfCode": "REST_FRAMEWORK[\"DEFAULT_THROTTLE_RATES\"][\"login\"] = \"10000000000/sec\"\nTEST_RUNNER = \"core.testing.CLADiscoverRunner\"\nDATABASES[\"default\"][\"ENGINE\"] = \"cla_backend.apps.reports.db.backend\"\nALLOWED_HOSTS = [\"*\"]\nTEST_OUTPUT_DIR = \"test-reports\"\nOPERATOR_HOURS = {\"weekday\": (time(9, 0), time(20, 0)), \"saturday\": (time(9, 0), time(12, 30))}\nclass DisableMigrations(object):\n    def __contains__(self, item):\n        return True\n    def __getitem__(self, item):",
        "detail": "cla_backend.settings.testing",
        "documentation": {}
    },
    {
        "label": "TEST_RUNNER",
        "kind": 5,
        "importPath": "cla_backend.settings.testing",
        "description": "cla_backend.settings.testing",
        "peekOfCode": "TEST_RUNNER = \"core.testing.CLADiscoverRunner\"\nDATABASES[\"default\"][\"ENGINE\"] = \"cla_backend.apps.reports.db.backend\"\nALLOWED_HOSTS = [\"*\"]\nTEST_OUTPUT_DIR = \"test-reports\"\nOPERATOR_HOURS = {\"weekday\": (time(9, 0), time(20, 0)), \"saturday\": (time(9, 0), time(12, 30))}\nclass DisableMigrations(object):\n    def __contains__(self, item):\n        return True\n    def __getitem__(self, item):\n        return \"notmigrations\"",
        "detail": "cla_backend.settings.testing",
        "documentation": {}
    },
    {
        "label": "DATABASES[\"default\"][\"ENGINE\"]",
        "kind": 5,
        "importPath": "cla_backend.settings.testing",
        "description": "cla_backend.settings.testing",
        "peekOfCode": "DATABASES[\"default\"][\"ENGINE\"] = \"cla_backend.apps.reports.db.backend\"\nALLOWED_HOSTS = [\"*\"]\nTEST_OUTPUT_DIR = \"test-reports\"\nOPERATOR_HOURS = {\"weekday\": (time(9, 0), time(20, 0)), \"saturday\": (time(9, 0), time(12, 30))}\nclass DisableMigrations(object):\n    def __contains__(self, item):\n        return True\n    def __getitem__(self, item):\n        return \"notmigrations\"\nMIGRATION_MODULES = DisableMigrations()",
        "detail": "cla_backend.settings.testing",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "cla_backend.settings.testing",
        "description": "cla_backend.settings.testing",
        "peekOfCode": "ALLOWED_HOSTS = [\"*\"]\nTEST_OUTPUT_DIR = \"test-reports\"\nOPERATOR_HOURS = {\"weekday\": (time(9, 0), time(20, 0)), \"saturday\": (time(9, 0), time(12, 30))}\nclass DisableMigrations(object):\n    def __contains__(self, item):\n        return True\n    def __getitem__(self, item):\n        return \"notmigrations\"\nMIGRATION_MODULES = DisableMigrations()\nSESSION_SECURITY_WARN_AFTER = 5",
        "detail": "cla_backend.settings.testing",
        "documentation": {}
    },
    {
        "label": "TEST_OUTPUT_DIR",
        "kind": 5,
        "importPath": "cla_backend.settings.testing",
        "description": "cla_backend.settings.testing",
        "peekOfCode": "TEST_OUTPUT_DIR = \"test-reports\"\nOPERATOR_HOURS = {\"weekday\": (time(9, 0), time(20, 0)), \"saturday\": (time(9, 0), time(12, 30))}\nclass DisableMigrations(object):\n    def __contains__(self, item):\n        return True\n    def __getitem__(self, item):\n        return \"notmigrations\"\nMIGRATION_MODULES = DisableMigrations()\nSESSION_SECURITY_WARN_AFTER = 5\nSESSION_SECURITY_EXPIRE_AFTER = 10",
        "detail": "cla_backend.settings.testing",
        "documentation": {}
    },
    {
        "label": "OPERATOR_HOURS",
        "kind": 5,
        "importPath": "cla_backend.settings.testing",
        "description": "cla_backend.settings.testing",
        "peekOfCode": "OPERATOR_HOURS = {\"weekday\": (time(9, 0), time(20, 0)), \"saturday\": (time(9, 0), time(12, 30))}\nclass DisableMigrations(object):\n    def __contains__(self, item):\n        return True\n    def __getitem__(self, item):\n        return \"notmigrations\"\nMIGRATION_MODULES = DisableMigrations()\nSESSION_SECURITY_WARN_AFTER = 5\nSESSION_SECURITY_EXPIRE_AFTER = 10",
        "detail": "cla_backend.settings.testing",
        "documentation": {}
    },
    {
        "label": "MIGRATION_MODULES",
        "kind": 5,
        "importPath": "cla_backend.settings.testing",
        "description": "cla_backend.settings.testing",
        "peekOfCode": "MIGRATION_MODULES = DisableMigrations()\nSESSION_SECURITY_WARN_AFTER = 5\nSESSION_SECURITY_EXPIRE_AFTER = 10",
        "detail": "cla_backend.settings.testing",
        "documentation": {}
    },
    {
        "label": "SESSION_SECURITY_WARN_AFTER",
        "kind": 5,
        "importPath": "cla_backend.settings.testing",
        "description": "cla_backend.settings.testing",
        "peekOfCode": "SESSION_SECURITY_WARN_AFTER = 5\nSESSION_SECURITY_EXPIRE_AFTER = 10",
        "detail": "cla_backend.settings.testing",
        "documentation": {}
    },
    {
        "label": "SESSION_SECURITY_EXPIRE_AFTER",
        "kind": 5,
        "importPath": "cla_backend.settings.testing",
        "description": "cla_backend.settings.testing",
        "peekOfCode": "SESSION_SECURITY_EXPIRE_AFTER = 10",
        "detail": "cla_backend.settings.testing",
        "documentation": {}
    },
    {
        "label": "debug_task",
        "kind": 2,
        "importPath": "cla_backend.celery",
        "description": "cla_backend.celery",
        "peekOfCode": "def debug_task(self):\n    print(\"Request: {0!r}\".format(self.request))\n@app.on_after_finalize.connect\ndef setup_periodic_tasks(sender, **kwargs):\n    from notifications.periodic_tasks import setup_periodic_tasks as notifications_setup_periodic_tasks\n    notifications_setup_periodic_tasks(sender, **kwargs)",
        "detail": "cla_backend.celery",
        "documentation": {}
    },
    {
        "label": "setup_periodic_tasks",
        "kind": 2,
        "importPath": "cla_backend.celery",
        "description": "cla_backend.celery",
        "peekOfCode": "def setup_periodic_tasks(sender, **kwargs):\n    from notifications.periodic_tasks import setup_periodic_tasks as notifications_setup_periodic_tasks\n    notifications_setup_periodic_tasks(sender, **kwargs)",
        "detail": "cla_backend.celery",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "cla_backend.celery",
        "description": "cla_backend.celery",
        "peekOfCode": "app = Celery(\"cla_backend\")\n# Using a string here means the worker will not have to\n# pickle the object when using Windows.\napp.config_from_object(\"django.conf:settings\")\napp.autodiscover_tasks(lambda: settings.INSTALLED_APPS)\n@app.task(bind=True)\ndef debug_task(self):\n    print(\"Request: {0!r}\".format(self.request))\n@app.on_after_finalize.connect\ndef setup_periodic_tasks(sender, **kwargs):",
        "detail": "cla_backend.celery",
        "documentation": {}
    },
    {
        "label": "CLASQSChannel",
        "kind": 6,
        "importPath": "cla_backend.sqs",
        "description": "cla_backend.sqs",
        "peekOfCode": "class CLASQSChannel(Channel):\n    def _update_queue_cache(self, queue_name_prefix):\n        url = self.transport_options.get(\"predefined_queue_url\", None)\n        queue_name = url.split(\"/\")[-1]\n        self._queue_cache[queue_name] = url\n    def _new_queue(self, queue, **kwargs):\n        # Translate to SQS name for consistency with initial\n        # _queue_cache population.\n        queue = self.entity_name(self.queue_name_prefix + queue)\n        # We don't want to create a queue if it does not exist, instead return None",
        "detail": "cla_backend.sqs",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "cla_backend.urls",
        "description": "cla_backend.urls",
        "peekOfCode": "urlpatterns = static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n# STATIC_ROOT required to allow static files to be generated in docker builds\nurlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\nhandler404 = \"core.views.page_not_found\"\nif settings.ADMIN_ENABLED:\n    # Uncomment the next two lines to enable the admin:\n    from django.contrib import admin\n    from core.forms import CLALoginForm\n    admin.site.login_form = CLALoginForm\n    admin.autodiscover()",
        "detail": "cla_backend.urls",
        "documentation": {}
    },
    {
        "label": "handler404",
        "kind": 5,
        "importPath": "cla_backend.urls",
        "description": "cla_backend.urls",
        "peekOfCode": "handler404 = \"core.views.page_not_found\"\nif settings.ADMIN_ENABLED:\n    # Uncomment the next two lines to enable the admin:\n    from django.contrib import admin\n    from core.forms import CLALoginForm\n    admin.site.login_form = CLALoginForm\n    admin.autodiscover()\n    urlpatterns += patterns(\n        \"\",\n        url(r\"^maintenance$\", view=MaintenanceModeView.as_view(), name=\"maintenance_page\"),",
        "detail": "cla_backend.urls",
        "documentation": {}
    },
    {
        "label": "SITE_ROOT",
        "kind": 5,
        "importPath": "cla_backend.wsgi",
        "description": "cla_backend.wsgi",
        "peekOfCode": "SITE_ROOT = dirname(dirname(abspath(__file__)))\npath.append(SITE_ROOT)\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"cla_backend.settings\")\napplication = get_wsgi_application()",
        "detail": "cla_backend.wsgi",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "cla_backend.wsgi",
        "description": "cla_backend.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "cla_backend.wsgi",
        "documentation": {}
    },
    {
        "label": "get_website",
        "kind": 2,
        "importPath": "docker.container_check",
        "description": "docker.container_check",
        "peekOfCode": "def get_website(url):\n    return requests.get(url)\nif __name__ == \"__main__\":\n    response = get_website(\"http://localhost:8000/admin\")\n    if response.status_code == 200:\n        print(\"The container is up and the app returned HTTP Status Code: OK\")\n    else:\n        print(\"Error: The container returned an unexpected HTTP Status Code %d\" % (response.status_code))\n        exit(1)",
        "detail": "docker.container_check",
        "documentation": {}
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "project = u\"Civil Legal Aid Backend (API Server)\"\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\n# The full version, including alpha/beta/rc tags.\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n# language = None",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "exclude_patterns",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "exclude_patterns = [\"_build\"]",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "AutoAPIDoc",
        "kind": 6,
        "importPath": "docs.swag",
        "description": "docs.swag",
        "peekOfCode": "class AutoAPIDoc(sphinx.util.compat.Directive):\n    required_arguments = 1\n    optional_arguments = 0\n    final_argument_whitespace = True\n    has_content = True\n    def format_response_class(self, response_class_name):\n        ret = n.container()\n        ret += addnodes.desc_returns(text=response_class_name)\n        model = self.models.get(response_class_name)\n        props = addnodes.desc_parameterlist()",
        "detail": "docs.swag",
        "documentation": {}
    },
    {
        "label": "import_urls",
        "kind": 2,
        "importPath": "docs.swag",
        "description": "docs.swag",
        "peekOfCode": "def import_urls():\n    module = None\n    attempts = 0\n    while not module:\n        try:\n            module = __import__(settings.ROOT_URLCONF)\n        except ImproperlyConfigured as e:\n            if attempts > 3:\n                raise e\n            attempts += 1",
        "detail": "docs.swag",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "docs.swag",
        "description": "docs.swag",
        "peekOfCode": "def setup(Sphinx):\n    Sphinx.add_directive(\"autoapidoc\", AutoAPIDoc)",
        "detail": "docs.swag",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python2.7/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python2.7/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python2.7/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python2.7/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python2.7/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "env.bin.activate_this",
        "description": "env.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "env.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "env.bin.jp",
        "description": "env.bin.jp",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('expression')\n    parser.add_argument('-f', '--filename',\n                        help=('The filename containing the input data.  '\n                              'If a filename is not given then data is '\n                              'read from stdin.'))\n    parser.add_argument('--ast', action='store_true',\n                        help=('Pretty print the AST, do not search the data.'))\n    args = parser.parse_args()",
        "detail": "env.bin.jp",
        "documentation": {}
    },
    {
        "label": "cmd_doc",
        "kind": 5,
        "importPath": "env.bin.runxlrd",
        "description": "env.bin.runxlrd",
        "peekOfCode": "cmd_doc = \"\"\"\nCommands:\n2rows           Print the contents of first and last row in each sheet\n3rows           Print the contents of first, second and last row in each sheet\nbench           Same as \"show\", but doesn't print -- for profiling\nbiff_count[1]   Print a count of each type of BIFF record in the file\nbiff_dump[1]    Print a dump (char and hex) of the BIFF records in the file\nfonts           hdr + print a dump of all font objects\nhdr             Mini-overview of file (no per-sheet information)\nhotshot         Do a hotshot profile run e.g. ... -f1 hotshot bench bigfile*.xls",
        "detail": "env.bin.runxlrd",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "env.bin.runxlrd",
        "description": "env.bin.runxlrd",
        "peekOfCode": "options = None\nif __name__ == \"__main__\":\n    import xlrd\n    import sys\n    import time\n    import glob\n    import traceback\n    import gc\n    from xlrd.timemachine import xrange, REPR\n    class LogHandler(object):",
        "detail": "env.bin.runxlrd",
        "documentation": {}
    },
    {
        "label": "makedirs",
        "kind": 2,
        "importPath": "env.lib.python2.7.os",
        "description": "env.lib.python2.7.os",
        "peekOfCode": "def makedirs(name, mode=0777):\n    \"\"\"makedirs(path [, mode=0777])\n    Super-mkdir; create a leaf directory and all intermediate ones.\n    Works like mkdir, except that any intermediate path segment (not\n    just the rightmost) will be created if it does not exist.  This is\n    recursive.\n    \"\"\"\n    head, tail = path.split(name)\n    if not tail:\n        head, tail = path.split(head)",
        "detail": "env.lib.python2.7.os",
        "documentation": {}
    },
    {
        "label": "removedirs",
        "kind": 2,
        "importPath": "env.lib.python2.7.os",
        "description": "env.lib.python2.7.os",
        "peekOfCode": "def removedirs(name):\n    \"\"\"removedirs(path)\n    Super-rmdir; remove a leaf directory and all empty intermediate\n    ones.  Works like rmdir except that, if the leaf directory is\n    successfully removed, directories corresponding to rightmost path\n    segments will be pruned away until either the whole path is\n    consumed or an error occurs.  Errors during this latter phase are\n    ignored -- they generally mean that a directory was not empty.\n    \"\"\"\n    rmdir(name)",
        "detail": "env.lib.python2.7.os",
        "documentation": {}
    },
    {
        "label": "renames",
        "kind": 2,
        "importPath": "env.lib.python2.7.os",
        "description": "env.lib.python2.7.os",
        "peekOfCode": "def renames(old, new):\n    \"\"\"renames(old, new)\n    Super-rename; create directories as necessary and delete any left\n    empty.  Works like rename, except creation of any intermediate\n    directories needed to make the new pathname good is attempted\n    first.  After the rename, directories corresponding to rightmost\n    path segments of the old name will be pruned until either the\n    whole path is consumed or a nonempty directory is found.\n    Note: this function can fail with the new directory structure made\n    if you lack permissions needed to unlink the leaf directory or",
        "detail": "env.lib.python2.7.os",
        "documentation": {}
    },
    {
        "label": "walk",
        "kind": 2,
        "importPath": "env.lib.python2.7.os",
        "description": "env.lib.python2.7.os",
        "peekOfCode": "def walk(top, topdown=True, onerror=None, followlinks=False):\n    \"\"\"Directory tree generator.\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding '.' and '..'), yields a 3-tuple\n        dirpath, dirnames, filenames\n    dirpath is a string, the path to the directory.  dirnames is a list of\n    the names of the subdirectories in dirpath (excluding '.' and '..').\n    filenames is a list of the names of the non-directory files in dirpath.\n    Note that the names in the lists are just names, with no path components.\n    To get a full path (which begins with top) to a file or directory in",
        "detail": "env.lib.python2.7.os",
        "documentation": {}
    },
    {
        "label": "execl",
        "kind": 2,
        "importPath": "env.lib.python2.7.os",
        "description": "env.lib.python2.7.os",
        "peekOfCode": "def execl(file, *args):\n    \"\"\"execl(file, *args)\n    Execute the executable file with argument list args, replacing the\n    current process. \"\"\"\n    execv(file, args)\ndef execle(file, *args):\n    \"\"\"execle(file, *args, env)\n    Execute the executable file with argument list args and\n    environment env, replacing the current process. \"\"\"\n    env = args[-1]",
        "detail": "env.lib.python2.7.os",
        "documentation": {}
    },
    {
        "label": "execle",
        "kind": 2,
        "importPath": "env.lib.python2.7.os",
        "description": "env.lib.python2.7.os",
        "peekOfCode": "def execle(file, *args):\n    \"\"\"execle(file, *args, env)\n    Execute the executable file with argument list args and\n    environment env, replacing the current process. \"\"\"\n    env = args[-1]\n    execve(file, args[:-1], env)\ndef execlp(file, *args):\n    \"\"\"execlp(file, *args)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process. \"\"\"",
        "detail": "env.lib.python2.7.os",
        "documentation": {}
    },
    {
        "label": "execlp",
        "kind": 2,
        "importPath": "env.lib.python2.7.os",
        "description": "env.lib.python2.7.os",
        "peekOfCode": "def execlp(file, *args):\n    \"\"\"execlp(file, *args)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process. \"\"\"\n    execvp(file, args)\ndef execlpe(file, *args):\n    \"\"\"execlpe(file, *args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the current\n    process. \"\"\"",
        "detail": "env.lib.python2.7.os",
        "documentation": {}
    },
    {
        "label": "execlpe",
        "kind": 2,
        "importPath": "env.lib.python2.7.os",
        "description": "env.lib.python2.7.os",
        "peekOfCode": "def execlpe(file, *args):\n    \"\"\"execlpe(file, *args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the current\n    process. \"\"\"\n    env = args[-1]\n    execvpe(file, args[:-1], env)\ndef execvp(file, args):\n    \"\"\"execvp(file, args)\n    Execute the executable file (which is searched for along $PATH)",
        "detail": "env.lib.python2.7.os",
        "documentation": {}
    },
    {
        "label": "execvp",
        "kind": 2,
        "importPath": "env.lib.python2.7.os",
        "description": "env.lib.python2.7.os",
        "peekOfCode": "def execvp(file, args):\n    \"\"\"execvp(file, args)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process.\n    args may be a list or tuple of strings. \"\"\"\n    _execvpe(file, args)\ndef execvpe(file, args, env):\n    \"\"\"execvpe(file, args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env , replacing the",
        "detail": "env.lib.python2.7.os",
        "documentation": {}
    },
    {
        "label": "execvpe",
        "kind": 2,
        "importPath": "env.lib.python2.7.os",
        "description": "env.lib.python2.7.os",
        "peekOfCode": "def execvpe(file, args, env):\n    \"\"\"execvpe(file, args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env , replacing the\n    current process.\n    args may be a list or tuple of strings. \"\"\"\n    _execvpe(file, args, env)\n__all__.extend([\"execl\",\"execle\",\"execlp\",\"execlpe\",\"execvp\",\"execvpe\"])\ndef _execvpe(file, args, env=None):\n    if env is not None:",
        "detail": "env.lib.python2.7.os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "kind": 2,
        "importPath": "env.lib.python2.7.os",
        "description": "env.lib.python2.7.os",
        "peekOfCode": "def getenv(key, default=None):\n    \"\"\"Get an environment variable, return None if it doesn't exist.\n    The optional second argument can specify an alternate default.\"\"\"\n    return environ.get(key, default)\n__all__.append(\"getenv\")\ndef _exists(name):\n    return name in globals()\n# Supply spawn*() (probably only for Unix)\nif _exists(\"fork\") and not _exists(\"spawnv\") and _exists(\"execv\"):\n    P_WAIT = 0",
        "detail": "env.lib.python2.7.os",
        "documentation": {}
    },
    {
        "label": "_names",
        "kind": 5,
        "importPath": "env.lib.python2.7.os",
        "description": "env.lib.python2.7.os",
        "peekOfCode": "_names = sys.builtin_module_names\n# Note:  more names are added to __all__ later.\n__all__ = [\"altsep\", \"curdir\", \"pardir\", \"sep\", \"extsep\", \"pathsep\", \"linesep\",\n           \"defpath\", \"name\", \"path\", \"devnull\",\n           \"SEEK_SET\", \"SEEK_CUR\", \"SEEK_END\"]\ndef _get_exports_list(module):\n    try:\n        return list(module.__all__)\n    except AttributeError:\n        return [n for n in dir(module) if n[0] != '_']",
        "detail": "env.lib.python2.7.os",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "env.lib.python2.7.os",
        "description": "env.lib.python2.7.os",
        "peekOfCode": "__all__ = [\"altsep\", \"curdir\", \"pardir\", \"sep\", \"extsep\", \"pathsep\", \"linesep\",\n           \"defpath\", \"name\", \"path\", \"devnull\",\n           \"SEEK_SET\", \"SEEK_CUR\", \"SEEK_END\"]\ndef _get_exports_list(module):\n    try:\n        return list(module.__all__)\n    except AttributeError:\n        return [n for n in dir(module) if n[0] != '_']\nif 'posix' in _names:\n    name = 'posix'",
        "detail": "env.lib.python2.7.os",
        "documentation": {}
    },
    {
        "label": "sys.modules['os.path']",
        "kind": 5,
        "importPath": "env.lib.python2.7.os",
        "description": "env.lib.python2.7.os",
        "peekOfCode": "sys.modules['os.path'] = path\nfrom os.path import (curdir, pardir, sep, pathsep, defpath, extsep, altsep,\n    devnull)\ndel _names\n# Python uses fixed values for the SEEK_ constants; they are mapped\n# to native constants if necessary in posixmodule.c\nSEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n#'",
        "detail": "env.lib.python2.7.os",
        "documentation": {}
    },
    {
        "label": "SEEK_SET",
        "kind": 5,
        "importPath": "env.lib.python2.7.os",
        "description": "env.lib.python2.7.os",
        "peekOfCode": "SEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n#'\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\ndef makedirs(name, mode=0777):\n    \"\"\"makedirs(path [, mode=0777])\n    Super-mkdir; create a leaf directory and all intermediate ones.\n    Works like mkdir, except that any intermediate path segment (not",
        "detail": "env.lib.python2.7.os",
        "documentation": {}
    },
    {
        "label": "SEEK_CUR",
        "kind": 5,
        "importPath": "env.lib.python2.7.os",
        "description": "env.lib.python2.7.os",
        "peekOfCode": "SEEK_CUR = 1\nSEEK_END = 2\n#'\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\ndef makedirs(name, mode=0777):\n    \"\"\"makedirs(path [, mode=0777])\n    Super-mkdir; create a leaf directory and all intermediate ones.\n    Works like mkdir, except that any intermediate path segment (not\n    just the rightmost) will be created if it does not exist.  This is",
        "detail": "env.lib.python2.7.os",
        "documentation": {}
    },
    {
        "label": "SEEK_END",
        "kind": 5,
        "importPath": "env.lib.python2.7.os",
        "description": "env.lib.python2.7.os",
        "peekOfCode": "SEEK_END = 2\n#'\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\ndef makedirs(name, mode=0777):\n    \"\"\"makedirs(path [, mode=0777])\n    Super-mkdir; create a leaf directory and all intermediate ones.\n    Works like mkdir, except that any intermediate path segment (not\n    just the rightmost) will be created if it does not exist.  This is\n    recursive.",
        "detail": "env.lib.python2.7.os",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "env.lib.python2.7.site",
        "description": "env.lib.python2.7.site",
        "peekOfCode": "def main():\n    \"\"\"Patch what needed, and invoke the original site.py\"\"\"\n    here = __file__  # the distutils.install patterns will be injected relative to this site.py, save it here\n    config = read_pyvenv()\n    sys.real_prefix = sys.base_prefix = config[\"base-prefix\"]\n    sys.base_exec_prefix = config[\"base-exec-prefix\"]\n    sys.base_executable = config[\"base-executable\"]\n    global_site_package_enabled = config.get(\"include-system-site-packages\", False) == \"true\"\n    rewrite_standard_library_sys_path()\n    disable_user_site_package()",
        "detail": "env.lib.python2.7.site",
        "documentation": {}
    },
    {
        "label": "load_host_site",
        "kind": 2,
        "importPath": "env.lib.python2.7.site",
        "description": "env.lib.python2.7.site",
        "peekOfCode": "def load_host_site(here):\n    \"\"\"trigger reload of site.py - now it will use the standard library instance that will take care of init\"\"\"\n    # we have a duality here, we generate the platform and pure library path based on what distutils.install specifies\n    # because this is what pip will be using; the host site.py though may contain it's own pattern for where the\n    # platform and pure library paths should exist\n    # notably on Ubuntu there's a patch for getsitepackages to point to\n    # - prefix + local/lib/pythonx.y/dist-packages\n    # - prefix + lib/pythonx.y/dist-packages\n    # while distutils.install.cmd still points both of these to\n    # - prefix + lib/python2.7/site-packages",
        "detail": "env.lib.python2.7.site",
        "documentation": {}
    },
    {
        "label": "get_site_packages_dirs",
        "kind": 2,
        "importPath": "env.lib.python2.7.site",
        "description": "env.lib.python2.7.site",
        "peekOfCode": "def get_site_packages_dirs(here):\n    import json\n    import os\n    site_packages = r\"\"\"\n    [\"../site-packages\"]\n    \"\"\"\n    for path in json.loads(site_packages):\n        yield os.path.abspath(os.path.join(here, path.encode(\"utf-8\")))\nsep = \"\\\\\" if sys.platform == \"win32\" else \"/\"  # no os module here yet - poor mans version\ndef read_pyvenv():",
        "detail": "env.lib.python2.7.site",
        "documentation": {}
    },
    {
        "label": "read_pyvenv",
        "kind": 2,
        "importPath": "env.lib.python2.7.site",
        "description": "env.lib.python2.7.site",
        "peekOfCode": "def read_pyvenv():\n    \"\"\"read pyvenv.cfg\"\"\"\n    config_file = \"{}{}pyvenv.cfg\".format(sys.prefix, sep)\n    with open(config_file) as file_handler:\n        lines = file_handler.readlines()\n    config = {}\n    for line in lines:\n        try:\n            split_at = line.index(\"=\")\n        except ValueError:",
        "detail": "env.lib.python2.7.site",
        "documentation": {}
    },
    {
        "label": "rewrite_standard_library_sys_path",
        "kind": 2,
        "importPath": "env.lib.python2.7.site",
        "description": "env.lib.python2.7.site",
        "peekOfCode": "def rewrite_standard_library_sys_path():\n    \"\"\"Once this site file is loaded the standard library paths have already been set, fix them up\"\"\"\n    exe, prefix, exec_prefix = get_exe_prefixes(base=False)\n    base_exe, base_prefix, base_exec = get_exe_prefixes(base=True)\n    exe_dir = exe[: exe.rfind(sep)]\n    for at, path in enumerate(sys.path):\n        path = abs_path(path)  # replace old sys prefix path starts with new\n        skip_rewrite = path == exe_dir  # don't fix the current executable location, notably on Windows this gets added\n        skip_rewrite = skip_rewrite  \n        if not skip_rewrite:",
        "detail": "env.lib.python2.7.site",
        "documentation": {}
    },
    {
        "label": "get_exe_prefixes",
        "kind": 2,
        "importPath": "env.lib.python2.7.site",
        "description": "env.lib.python2.7.site",
        "peekOfCode": "def get_exe_prefixes(base=False):\n    return tuple(abs_path(getattr(sys, (\"base_\" if base else \"\") + i)) for i in (\"executable\", \"prefix\", \"exec_prefix\"))\ndef abs_path(value):\n    values, keep = value.split(sep), []\n    at = len(values) - 1\n    while at >= 0:\n        if values[at] == \"..\":\n            at -= 1\n        else:\n            keep.append(values[at])",
        "detail": "env.lib.python2.7.site",
        "documentation": {}
    },
    {
        "label": "abs_path",
        "kind": 2,
        "importPath": "env.lib.python2.7.site",
        "description": "env.lib.python2.7.site",
        "peekOfCode": "def abs_path(value):\n    values, keep = value.split(sep), []\n    at = len(values) - 1\n    while at >= 0:\n        if values[at] == \"..\":\n            at -= 1\n        else:\n            keep.append(values[at])\n        at -= 1\n    return sep.join(keep[::-1])",
        "detail": "env.lib.python2.7.site",
        "documentation": {}
    },
    {
        "label": "map_path",
        "kind": 2,
        "importPath": "env.lib.python2.7.site",
        "description": "env.lib.python2.7.site",
        "peekOfCode": "def map_path(path, base_executable, exe_dir, exec_prefix, base_prefix, prefix, base_exec_prefix):\n    if path_starts_with(path, exe_dir):\n        # content inside the exe folder needs to remap to original executables folder\n        orig_exe_folder = base_executable[: base_executable.rfind(sep)]\n        return \"{}{}\".format(orig_exe_folder, path[len(exe_dir) :])\n    elif path_starts_with(path, prefix):\n        return \"{}{}\".format(base_prefix, path[len(prefix) :])\n    elif path_starts_with(path, exec_prefix):\n        return \"{}{}\".format(base_exec_prefix, path[len(exec_prefix) :])\n    return path",
        "detail": "env.lib.python2.7.site",
        "documentation": {}
    },
    {
        "label": "path_starts_with",
        "kind": 2,
        "importPath": "env.lib.python2.7.site",
        "description": "env.lib.python2.7.site",
        "peekOfCode": "def path_starts_with(directory, value):\n    return directory.startswith(value if value[-1] == sep else value + sep)\ndef disable_user_site_package():\n    \"\"\"Flip the switch on enable user site package\"\"\"\n    # sys.flags is a c-extension type, so we cannot monkeypatch it, replace it with a python class to flip it\n    sys.original_flags = sys.flags\n    class Flags(object):\n        def __init__(self):\n            self.__dict__ = {key: getattr(sys.flags, key) for key in dir(sys.flags) if not key.startswith(\"_\")}\n    sys.flags = Flags()",
        "detail": "env.lib.python2.7.site",
        "documentation": {}
    },
    {
        "label": "disable_user_site_package",
        "kind": 2,
        "importPath": "env.lib.python2.7.site",
        "description": "env.lib.python2.7.site",
        "peekOfCode": "def disable_user_site_package():\n    \"\"\"Flip the switch on enable user site package\"\"\"\n    # sys.flags is a c-extension type, so we cannot monkeypatch it, replace it with a python class to flip it\n    sys.original_flags = sys.flags\n    class Flags(object):\n        def __init__(self):\n            self.__dict__ = {key: getattr(sys.flags, key) for key in dir(sys.flags) if not key.startswith(\"_\")}\n    sys.flags = Flags()\n    sys.flags.no_user_site = 1\ndef add_global_site_package():",
        "detail": "env.lib.python2.7.site",
        "documentation": {}
    },
    {
        "label": "add_global_site_package",
        "kind": 2,
        "importPath": "env.lib.python2.7.site",
        "description": "env.lib.python2.7.site",
        "peekOfCode": "def add_global_site_package():\n    \"\"\"add the global site package\"\"\"\n    import site\n    # add user site package\n    sys.flags = sys.original_flags  # restore original\n    site.ENABLE_USER_SITE = None  # reset user site check\n    # add the global site package to the path - use new prefix and delegate to site.py\n    orig_prefixes = None\n    try:\n        orig_prefixes = site.PREFIXES",
        "detail": "env.lib.python2.7.site",
        "documentation": {}
    },
    {
        "label": "rewrite_getsitepackages",
        "kind": 2,
        "importPath": "env.lib.python2.7.site",
        "description": "env.lib.python2.7.site",
        "peekOfCode": "def rewrite_getsitepackages(here):\n    site = sys.modules[\"site\"]\n    site_package_dirs = get_site_packages_dirs(here)\n    orig_getsitepackages = site.getsitepackages\n    def getsitepackages():\n        sitepackages = orig_getsitepackages()\n        if sys.prefix not in site.PREFIXES or sys.exec_prefix not in site.PREFIXES:\n            # Someone messed with the prefixes, so we stop patching\n            return sitepackages\n        for path in site_package_dirs:",
        "detail": "env.lib.python2.7.site",
        "documentation": {}
    },
    {
        "label": "sep",
        "kind": 5,
        "importPath": "env.lib.python2.7.site",
        "description": "env.lib.python2.7.site",
        "peekOfCode": "sep = \"\\\\\" if sys.platform == \"win32\" else \"/\"  # no os module here yet - poor mans version\ndef read_pyvenv():\n    \"\"\"read pyvenv.cfg\"\"\"\n    config_file = \"{}{}pyvenv.cfg\".format(sys.prefix, sep)\n    with open(config_file) as file_handler:\n        lines = file_handler.readlines()\n    config = {}\n    for line in lines:\n        try:\n            split_at = line.index(\"=\")",
        "detail": "env.lib.python2.7.site",
        "documentation": {}
    },
    {
        "label": "pts",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.3d_drawing.mayavi2_spring",
        "description": "env.share.doc.networkx-1.9.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pts = mlab.points3d(xyz[:,0], xyz[:,1], xyz[:,2], \n                    scalars,\n                    scale_factor=0.1,\n                    scale_mode='none',\n                    colormap='Blues',\n                    resolution=20) \npts.mlab_source.dataset.lines = np.array(G.edges())\ntube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.savefig('mayavi2_spring.png')",
        "detail": "env.share.doc.networkx-1.9.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pts.mlab_source.dataset.lines",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.3d_drawing.mayavi2_spring",
        "description": "env.share.doc.networkx-1.9.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pts.mlab_source.dataset.lines = np.array(G.edges())\ntube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.savefig('mayavi2_spring.png')\n# mlab.show() # interactive window",
        "detail": "env.share.doc.networkx-1.9.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "tube",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.3d_drawing.mayavi2_spring",
        "description": "env.share.doc.networkx-1.9.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "tube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.savefig('mayavi2_spring.png')\n# mlab.show() # interactive window",
        "detail": "env.share.doc.networkx-1.9.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.advanced.eigenvalues",
        "description": "env.share.doc.networkx-1.9.1.examples.advanced.eigenvalues",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n__credits__ = \"\"\"\"\"\"\n#    Copyright (C) 2004-2006 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nfrom networkx import *\ntry:",
        "detail": "env.share.doc.networkx-1.9.1.examples.advanced.eigenvalues",
        "documentation": {}
    },
    {
        "label": "__credits__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.advanced.eigenvalues",
        "description": "env.share.doc.networkx-1.9.1.examples.advanced.eigenvalues",
        "peekOfCode": "__credits__ = \"\"\"\"\"\"\n#    Copyright (C) 2004-2006 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nfrom networkx import *\ntry:\n    import numpy.linalg",
        "detail": "env.share.doc.networkx-1.9.1.examples.advanced.eigenvalues",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.advanced.heavy_metal_umlaut",
        "description": "env.share.doc.networkx-1.9.1.examples.advanced.heavy_metal_umlaut",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n__date__ = \"\"\n__credits__ = \"\"\"\"\"\"\n__revision__ = \"\"\n#    Copyright (C) 2006 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.",
        "detail": "env.share.doc.networkx-1.9.1.examples.advanced.heavy_metal_umlaut",
        "documentation": {}
    },
    {
        "label": "__date__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.advanced.heavy_metal_umlaut",
        "description": "env.share.doc.networkx-1.9.1.examples.advanced.heavy_metal_umlaut",
        "peekOfCode": "__date__ = \"\"\n__credits__ = \"\"\"\"\"\"\n__revision__ = \"\"\n#    Copyright (C) 2006 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nimport networkx as NX",
        "detail": "env.share.doc.networkx-1.9.1.examples.advanced.heavy_metal_umlaut",
        "documentation": {}
    },
    {
        "label": "__credits__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.advanced.heavy_metal_umlaut",
        "description": "env.share.doc.networkx-1.9.1.examples.advanced.heavy_metal_umlaut",
        "peekOfCode": "__credits__ = \"\"\"\"\"\"\n__revision__ = \"\"\n#    Copyright (C) 2006 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nimport networkx as NX\ntry:",
        "detail": "env.share.doc.networkx-1.9.1.examples.advanced.heavy_metal_umlaut",
        "documentation": {}
    },
    {
        "label": "__revision__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.advanced.heavy_metal_umlaut",
        "description": "env.share.doc.networkx-1.9.1.examples.advanced.heavy_metal_umlaut",
        "peekOfCode": "__revision__ = \"\"\n#    Copyright (C) 2006 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nimport networkx as NX\ntry:\n    import pylab as P",
        "detail": "env.share.doc.networkx-1.9.1.examples.advanced.heavy_metal_umlaut",
        "documentation": {}
    },
    {
        "label": "digitsrep",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "description": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "peekOfCode": "def digitsrep(n,b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    # very inefficient if you only work with base 10\n    dlist=[]\n    if n<=0:\n        return [0]\n    maxpow=int(floor( log(n)/log(b) + mach_eps ))\n    pow=maxpow\n    while pow>=0:",
        "detail": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "powersum",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "description": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "peekOfCode": "def powersum(n,p,b=10):\n    \"\"\"Return sum of digits of n (in base b) raised to the power p.\"\"\"\n    dlist=digitsrep(n,b)\n    sum=0\n    for k in dlist:\n        sum+=k**p\n    return sum\ndef attractor153_graph(n,p,multiple=3,b=10):\n    \"\"\"Return digraph of iterations of powersum(n,3,10).\"\"\"\n    G=DiGraph()",
        "detail": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "attractor153_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "description": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "peekOfCode": "def attractor153_graph(n,p,multiple=3,b=10):\n    \"\"\"Return digraph of iterations of powersum(n,3,10).\"\"\"\n    G=DiGraph()\n    for k in range(1,n+1):\n        if k%multiple==0 and k not in G:\n            k1=k\n            knext=powersum(k1,p,b)\n            while k1!=knext:\n                G.add_edge(k1,knext)\n                k1=knext",
        "detail": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "squaring_cycle_graph_old",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "description": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "peekOfCode": "def squaring_cycle_graph_old(n,b=10):\n    \"\"\"Return digraph of iterations of powersum(n,2,10).\"\"\"\n    G=DiGraph()\n    for k in range(1,n+1):\n        k1=k\n        G.add_node(k1) # case k1==knext, at least add node\n        knext=powersum(k1,2,b)\n        G.add_edge(k1,knext)\n        while k1!=knext: # stop if fixed point \n             k1=knext",
        "detail": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "sum_of_digits_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "description": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "peekOfCode": "def sum_of_digits_graph(nmax,b=10):\n    def f(n): return powersum(n,1,b)\n    return discrete_dynamics_digraph(nmax,f)\ndef squaring_cycle_digraph(nmax,b=10):\n    def f(n): return powersum(n,2,b)\n    return discrete_dynamics_digraph(nmax,f)\ndef cubing_153_digraph(nmax):\n    def f(n): return powersum(n,3,10)\n    return discrete_dynamics_digraph(nmax,f)\ndef discrete_dynamics_digraph(nmax,f,itermax=50000):",
        "detail": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "squaring_cycle_digraph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "description": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "peekOfCode": "def squaring_cycle_digraph(nmax,b=10):\n    def f(n): return powersum(n,2,b)\n    return discrete_dynamics_digraph(nmax,f)\ndef cubing_153_digraph(nmax):\n    def f(n): return powersum(n,3,10)\n    return discrete_dynamics_digraph(nmax,f)\ndef discrete_dynamics_digraph(nmax,f,itermax=50000):\n    G=DiGraph()\n    for k in range(1,nmax+1):\n        kold=k",
        "detail": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "cubing_153_digraph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "description": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "peekOfCode": "def cubing_153_digraph(nmax):\n    def f(n): return powersum(n,3,10)\n    return discrete_dynamics_digraph(nmax,f)\ndef discrete_dynamics_digraph(nmax,f,itermax=50000):\n    G=DiGraph()\n    for k in range(1,nmax+1):\n        kold=k\n        G.add_node(kold)\n        knew=f(kold)\n        G.add_edge(kold,knew)",
        "detail": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "discrete_dynamics_digraph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "description": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "peekOfCode": "def discrete_dynamics_digraph(nmax,f,itermax=50000):\n    G=DiGraph()\n    for k in range(1,nmax+1):\n        kold=k\n        G.add_node(kold)\n        knew=f(kold)\n        G.add_edge(kold,knew)\n        while kold!=knew and kold<<itermax: \n        # iterate until fixed point reached or itermax is exceeded\n            kold=knew",
        "detail": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "collatz_problem_digraph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "description": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "peekOfCode": "def collatz_problem_digraph(nmax):\n    def f(n):\n        if n%2==0:\n            return n // 2\n        else:\n            return 3*n+1\n    return discrete_dynamics_digraph(nmax,f)\ndef fixed_points(G):\n    \"\"\"Return a list of fixed points for the discrete dynamical \n    system represented by the digraph G.",
        "detail": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "fixed_points",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "description": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "peekOfCode": "def fixed_points(G):\n    \"\"\"Return a list of fixed points for the discrete dynamical \n    system represented by the digraph G.\n    \"\"\"\n    return [n for n in G if G.out_degree(n)==0]\nif __name__ == \"__main__\":\n    nmax=10000\n    print(\"Building cubing_153_digraph(%d)\"% nmax)\n    G=cubing_153_digraph(nmax)\n    print(\"Resulting digraph has\", len(G), \"nodes and\",",
        "detail": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "f(108)",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "description": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "peekOfCode": "f(108) = 1**3 + 0**3 + 8**3 = 513\nand\nf(513) = 5**3 + 1**3 + 3**3 = 153\nSo, starting at 108 we reach 153 in two iterations,\nrepresented as:\n108->513->153\nComputing all orbits of 3N up to 10**5 reveals that the attractor\n153 is reached in a maximum of 14 iterations. In this code we\nshow that 13 cycles is the maximum required for all integers (in 3N)\nless than 10,000.",
        "detail": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "f(513)",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "description": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "peekOfCode": "f(513) = 5**3 + 1**3 + 3**3 = 153\nSo, starting at 108 we reach 153 in two iterations,\nrepresented as:\n108->513->153\nComputing all orbits of 3N up to 10**5 reveals that the attractor\n153 is reached in a maximum of 14 iterations. In this code we\nshow that 13 cycles is the maximum required for all integers (in 3N)\nless than 10,000.\nThe smallest number that requires 13 iterations to reach 153, is 177, i.e.,\n177->687->1071->345->216->225->141->66->432->99->1458->702->351->153",
        "detail": "env.share.doc.networkx-1.9.1.examples.advanced.iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "chunks",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.advanced.parallel_betweenness",
        "description": "env.share.doc.networkx-1.9.1.examples.advanced.parallel_betweenness",
        "peekOfCode": "def chunks(l, n):\n    \"\"\"Divide a list of nodes `l` in `n` chunks\"\"\"\n    l_c = iter(l)\n    while 1:\n        x = tuple(itertools.islice(l_c, n))\n        if not x:\n            return\n        yield x\ndef _betmap(G_normalized_weight_sources_tuple):\n    \"\"\"Pool for multiprocess only accepts functions with one argument.",
        "detail": "env.share.doc.networkx-1.9.1.examples.advanced.parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "betweenness_centrality_parallel",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.advanced.parallel_betweenness",
        "description": "env.share.doc.networkx-1.9.1.examples.advanced.parallel_betweenness",
        "peekOfCode": "def betweenness_centrality_parallel(G, processes=None):\n    \"\"\"Parallel betweenness centrality  function\"\"\"\n    p = Pool(processes=processes)\n    node_divisor = len(p._pool)*4\n    node_chunks = list(chunks(G.nodes(), int(G.order()/node_divisor)))\n    num_chunks = len(node_chunks)\n    bt_sc = p.map(_betmap,\n                  zip([G]*num_chunks,\n                      [True]*num_chunks,\n                      [None]*num_chunks,",
        "detail": "env.share.doc.networkx-1.9.1.examples.advanced.parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "create_hc",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "peekOfCode": "def create_hc(G):\n    \"\"\"Creates hierarchical cluster of graph G from distance matrix\"\"\"\n    path_length=nx.all_pairs_shortest_path_length(G)\n    distances=numpy.zeros((len(G),len(G)))\n    for u,p in path_length.items():\n        for v,d in p.items():\n            distances[u][v]=d\n    # Create hierarchical cluster\n    Y=distance.squareform(distances)\n    Z=hierarchy.complete(Y)  # Creates HC using farthest point linkage",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "documentation": {}
    },
    {
        "label": "\ttitle",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "peekOfCode": "\ttitle = {Social Networks of Drug Users in {High-Risk} Sites: Finding the Connections},\n\tvolume = {6},\n\tshorttitle = {Social Networks of Drug Users in {High-Risk} Sites},\n\turl = {http://dx.doi.org/10.1023/A:1015457400897},\n\tdoi = {10.1023/A:1015457400897},\n\tnumber = {2},\n\tjournal = {{AIDS} and Behavior},\n\tauthor = {Margaret R. Weeks and Scott Clair and Stephen P. Borgatti and Kim Radda and Jean J. Schensul},\n\tmonth = jun,\n\tyear = {2002},",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "documentation": {}
    },
    {
        "label": "\tvolume",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "peekOfCode": "\tvolume = {6},\n\tshorttitle = {Social Networks of Drug Users in {High-Risk} Sites},\n\turl = {http://dx.doi.org/10.1023/A:1015457400897},\n\tdoi = {10.1023/A:1015457400897},\n\tnumber = {2},\n\tjournal = {{AIDS} and Behavior},\n\tauthor = {Margaret R. Weeks and Scott Clair and Stephen P. Borgatti and Kim Radda and Jean J. Schensul},\n\tmonth = jun,\n\tyear = {2002},\n\tpages = {193--206}",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "documentation": {}
    },
    {
        "label": "\tshorttitle",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "peekOfCode": "\tshorttitle = {Social Networks of Drug Users in {High-Risk} Sites},\n\turl = {http://dx.doi.org/10.1023/A:1015457400897},\n\tdoi = {10.1023/A:1015457400897},\n\tnumber = {2},\n\tjournal = {{AIDS} and Behavior},\n\tauthor = {Margaret R. Weeks and Scott Clair and Stephen P. Borgatti and Kim Radda and Jean J. Schensul},\n\tmonth = jun,\n\tyear = {2002},\n\tpages = {193--206}\n}",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "documentation": {}
    },
    {
        "label": "\turl",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "peekOfCode": "\turl = {http://dx.doi.org/10.1023/A:1015457400897},\n\tdoi = {10.1023/A:1015457400897},\n\tnumber = {2},\n\tjournal = {{AIDS} and Behavior},\n\tauthor = {Margaret R. Weeks and Scott Clair and Stephen P. Borgatti and Kim Radda and Jean J. Schensul},\n\tmonth = jun,\n\tyear = {2002},\n\tpages = {193--206}\n}\n\"\"\"",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "documentation": {}
    },
    {
        "label": "\tdoi",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "peekOfCode": "\tdoi = {10.1023/A:1015457400897},\n\tnumber = {2},\n\tjournal = {{AIDS} and Behavior},\n\tauthor = {Margaret R. Weeks and Scott Clair and Stephen P. Borgatti and Kim Radda and Jean J. Schensul},\n\tmonth = jun,\n\tyear = {2002},\n\tpages = {193--206}\n}\n\"\"\"\n__author__ = \"\"\"\\n\"\"\".join(['Drew Conway <drew.conway@nyu.edu>',",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "documentation": {}
    },
    {
        "label": "\tnumber",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "peekOfCode": "\tnumber = {2},\n\tjournal = {{AIDS} and Behavior},\n\tauthor = {Margaret R. Weeks and Scott Clair and Stephen P. Borgatti and Kim Radda and Jean J. Schensul},\n\tmonth = jun,\n\tyear = {2002},\n\tpages = {193--206}\n}\n\"\"\"\n__author__ = \"\"\"\\n\"\"\".join(['Drew Conway <drew.conway@nyu.edu>',\n                            'Aric Hagberg <hagberg@lanl.gov>'])",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "documentation": {}
    },
    {
        "label": "\tjournal",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "peekOfCode": "\tjournal = {{AIDS} and Behavior},\n\tauthor = {Margaret R. Weeks and Scott Clair and Stephen P. Borgatti and Kim Radda and Jean J. Schensul},\n\tmonth = jun,\n\tyear = {2002},\n\tpages = {193--206}\n}\n\"\"\"\n__author__ = \"\"\"\\n\"\"\".join(['Drew Conway <drew.conway@nyu.edu>',\n                            'Aric Hagberg <hagberg@lanl.gov>'])\nfrom collections import defaultdict",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "documentation": {}
    },
    {
        "label": "\tauthor",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "peekOfCode": "\tauthor = {Margaret R. Weeks and Scott Clair and Stephen P. Borgatti and Kim Radda and Jean J. Schensul},\n\tmonth = jun,\n\tyear = {2002},\n\tpages = {193--206}\n}\n\"\"\"\n__author__ = \"\"\"\\n\"\"\".join(['Drew Conway <drew.conway@nyu.edu>',\n                            'Aric Hagberg <hagberg@lanl.gov>'])\nfrom collections import defaultdict\nimport networkx as nx",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "documentation": {}
    },
    {
        "label": "\tmonth",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "peekOfCode": "\tmonth = jun,\n\tyear = {2002},\n\tpages = {193--206}\n}\n\"\"\"\n__author__ = \"\"\"\\n\"\"\".join(['Drew Conway <drew.conway@nyu.edu>',\n                            'Aric Hagberg <hagberg@lanl.gov>'])\nfrom collections import defaultdict\nimport networkx as nx\nimport numpy",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "documentation": {}
    },
    {
        "label": "\tyear",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "peekOfCode": "\tyear = {2002},\n\tpages = {193--206}\n}\n\"\"\"\n__author__ = \"\"\"\\n\"\"\".join(['Drew Conway <drew.conway@nyu.edu>',\n                            'Aric Hagberg <hagberg@lanl.gov>'])\nfrom collections import defaultdict\nimport networkx as nx\nimport numpy\nfrom scipy.cluster import hierarchy",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "documentation": {}
    },
    {
        "label": "\tpages",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "peekOfCode": "\tpages = {193--206}\n}\n\"\"\"\n__author__ = \"\"\"\\n\"\"\".join(['Drew Conway <drew.conway@nyu.edu>',\n                            'Aric Hagberg <hagberg@lanl.gov>'])\nfrom collections import defaultdict\nimport networkx as nx\nimport numpy\nfrom scipy.cluster import hierarchy\nfrom scipy.spatial import distance",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "peekOfCode": "__author__ = \"\"\"\\n\"\"\".join(['Drew Conway <drew.conway@nyu.edu>',\n                            'Aric Hagberg <hagberg@lanl.gov>'])\nfrom collections import defaultdict\nimport networkx as nx\nimport numpy\nfrom scipy.cluster import hierarchy\nfrom scipy.spatial import distance\nimport matplotlib.pyplot as plt\ndef create_hc(G):\n    \"\"\"Creates hierarchical cluster of graph G from distance matrix\"\"\"",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.blockmodel",
        "documentation": {}
    },
    {
        "label": "davis_club_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.davis_club",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.davis_club",
        "peekOfCode": "def davis_club_graph(create_using=None, **kwds):\n    nwomen=14\n    nclubs=18\n    G=nx.generators.empty_graph(nwomen+nclubs,create_using=create_using,**kwds)\n    G.clear()\n    G.name=\"Davis Southern Club Women\"\n    women=\"\"\"\\\nEVELYN\nLAURA\nTHERESA",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.davis_club",
        "documentation": {}
    },
    {
        "label": "project",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.davis_club",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.davis_club",
        "peekOfCode": "def project(B,pv,result=False,**kwds):\n    \"\"\"\n    Returns a graph that is the unipartite projection of the\n    bipartite graph B onto the set of nodes given in list pv.\n    The nodes retain their names and are connected if they share a\n    common node in the vertex set of {B not pv}.\n    No attempt is made to verify that the input graph B is bipartite.\n    \"\"\"\n    if result:\n        G=result",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.davis_club",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.davis_club",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.davis_club",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n__date__ = \"$Date: 2005-05-12 14:33:11 -0600 (Thu, 12 May 2005) $\"\n__credits__ = \"\"\"\"\"\"\n__revision__ = \"$Revision: 998 $\"\n#    Copyright (C) 2004 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.davis_club",
        "documentation": {}
    },
    {
        "label": "__date__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.davis_club",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.davis_club",
        "peekOfCode": "__date__ = \"$Date: 2005-05-12 14:33:11 -0600 (Thu, 12 May 2005) $\"\n__credits__ = \"\"\"\"\"\"\n__revision__ = \"$Revision: 998 $\"\n#    Copyright (C) 2004 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nimport string",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.davis_club",
        "documentation": {}
    },
    {
        "label": "__credits__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.davis_club",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.davis_club",
        "peekOfCode": "__credits__ = \"\"\"\"\"\"\n__revision__ = \"$Revision: 998 $\"\n#    Copyright (C) 2004 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nimport string\nimport networkx as nx",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.davis_club",
        "documentation": {}
    },
    {
        "label": "__revision__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.davis_club",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.davis_club",
        "peekOfCode": "__revision__ = \"$Revision: 998 $\"\n#    Copyright (C) 2004 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nimport string\nimport networkx as nx\ndef davis_club_graph(create_using=None, **kwds):",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.davis_club",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.krackhardt_centrality",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.krackhardt_centrality",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n__date__ = \"$Date: 2005-05-12 14:33:11 -0600 (Thu, 12 May 2005) $\"\n__credits__ = \"\"\"\"\"\"\n__revision__ = \"$Revision: 998 $\"\n#    Copyright (C) 2004 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "__date__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.krackhardt_centrality",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.krackhardt_centrality",
        "peekOfCode": "__date__ = \"$Date: 2005-05-12 14:33:11 -0600 (Thu, 12 May 2005) $\"\n__credits__ = \"\"\"\"\"\"\n__revision__ = \"$Revision: 998 $\"\n#    Copyright (C) 2004 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nfrom networkx import *",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "__credits__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.krackhardt_centrality",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.krackhardt_centrality",
        "peekOfCode": "__credits__ = \"\"\"\"\"\"\n__revision__ = \"$Revision: 998 $\"\n#    Copyright (C) 2004 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nfrom networkx import *\nG=krackhardt_kite_graph()",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "__revision__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.krackhardt_centrality",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.krackhardt_centrality",
        "peekOfCode": "__revision__ = \"$Revision: 998 $\"\n#    Copyright (C) 2004 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nfrom networkx import *\nG=krackhardt_kite_graph()\nprint(\"Betweenness\")",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "rcm",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.rcm",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.rcm",
        "peekOfCode": "rcm = list(reverse_cuthill_mckee_ordering(G))    \nprint(\"ordering\",rcm)\nprint(\"unordered Laplacian matrix\")\nA = nx.laplacian_matrix(G)\nx,y = np.nonzero(A)\n#print(\"lower bandwidth:\",(y-x).max())\n#print(\"upper bandwidth:\",(x-y).max())\nprint(\"bandwidth: %d\"%((y-x).max()+(x-y).max()+1))\nprint(A)\nB = nx.laplacian_matrix(G,nodelist=rcm)",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.rcm",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.rcm",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.rcm",
        "peekOfCode": "A = nx.laplacian_matrix(G)\nx,y = np.nonzero(A)\n#print(\"lower bandwidth:\",(y-x).max())\n#print(\"upper bandwidth:\",(x-y).max())\nprint(\"bandwidth: %d\"%((y-x).max()+(x-y).max()+1))\nprint(A)\nB = nx.laplacian_matrix(G,nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx,y = np.nonzero(B)\n#print(\"lower bandwidth:\",(y-x).max())",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.rcm",
        "documentation": {}
    },
    {
        "label": "x,y",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.rcm",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.rcm",
        "peekOfCode": "x,y = np.nonzero(A)\n#print(\"lower bandwidth:\",(y-x).max())\n#print(\"upper bandwidth:\",(x-y).max())\nprint(\"bandwidth: %d\"%((y-x).max()+(x-y).max()+1))\nprint(A)\nB = nx.laplacian_matrix(G,nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx,y = np.nonzero(B)\n#print(\"lower bandwidth:\",(y-x).max())\n#print(\"upper bandwidth:\",(x-y).max())",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.rcm",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.rcm",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.rcm",
        "peekOfCode": "B = nx.laplacian_matrix(G,nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx,y = np.nonzero(B)\n#print(\"lower bandwidth:\",(y-x).max())\n#print(\"upper bandwidth:\",(x-y).max())\nprint(\"bandwidth: %d\"%((y-x).max()+(x-y).max()+1))\nprint(B)",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.rcm",
        "documentation": {}
    },
    {
        "label": "x,y",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.algorithms.rcm",
        "description": "env.share.doc.networkx-1.9.1.examples.algorithms.rcm",
        "peekOfCode": "x,y = np.nonzero(B)\n#print(\"lower bandwidth:\",(y-x).max())\n#print(\"upper bandwidth:\",(x-y).max())\nprint(\"bandwidth: %d\"%((y-x).max()+(x-y).max()+1))\nprint(B)",
        "detail": "env.share.doc.networkx-1.9.1.examples.algorithms.rcm",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.basic.properties",
        "description": "env.share.doc.networkx-1.9.1.examples.basic.properties",
        "peekOfCode": "G = lollipop_graph(4,6)\npathlengths=[]\nprint(\"source vertex {target:length, }\")\nfor v in G.nodes():\n    spl=single_source_shortest_path_length(G,v)\n    print('%s %s' % (v,spl))\n    for p in spl.values():\n        pathlengths.append(p)\nprint('')\nprint(\"average shortest path length %s\" % (sum(pathlengths)/len(pathlengths)))",
        "detail": "env.share.doc.networkx-1.9.1.examples.basic.properties",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.basic.read_write",
        "description": "env.share.doc.networkx-1.9.1.examples.basic.read_write",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n#    Copyright (C) 2004-2006 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nfrom networkx import *\nimport sys\nG=grid_2d_graph(5,5)  # 5x5 grid",
        "detail": "env.share.doc.networkx-1.9.1.examples.basic.read_write",
        "documentation": {}
    },
    {
        "label": "atlas6",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.drawing.atlas",
        "description": "env.share.doc.networkx-1.9.1.examples.drawing.atlas",
        "peekOfCode": "def atlas6():\n    \"\"\" Return the atlas of all connected graphs of 6 nodes or less.\n        Attempt to check for isomorphisms and remove.\n    \"\"\"\n    Atlas=graph_atlas_g()[0:208] # 208\n    # remove isolated nodes, only connected graphs are left\n    U=nx.Graph() # graph for union of all graphs in atlas\n    for G in Atlas: \n        zerodegree=[n for n in G if G.degree(n)==0]\n        for n in zerodegree:",
        "detail": "env.share.doc.networkx-1.9.1.examples.drawing.atlas",
        "documentation": {}
    },
    {
        "label": "iso",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.drawing.atlas",
        "description": "env.share.doc.networkx-1.9.1.examples.drawing.atlas",
        "peekOfCode": "def iso(G1, glist):\n    \"\"\"Quick and dirty nonisomorphism checker used to check isomorphisms.\"\"\"\n    for G2 in glist:\n        if isomorphic(G1,G2):\n            return True\n    return False        \nif __name__ == '__main__':\n    import networkx as nx\n    G=atlas6()\n    print(\"graph has %d nodes with %d edges\"\\",
        "detail": "env.share.doc.networkx-1.9.1.examples.drawing.atlas",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.drawing.atlas",
        "description": "env.share.doc.networkx-1.9.1.examples.drawing.atlas",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n#    Copyright (C) 2004 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nimport networkx as nx\nfrom networkx.generators.atlas import *\nfrom networkx.algorithms.isomorphism.isomorph import graph_could_be_isomorphic as isomorphic",
        "detail": "env.share.doc.networkx-1.9.1.examples.drawing.atlas",
        "documentation": {}
    },
    {
        "label": "chess_pgn_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.drawing.chess_masters",
        "description": "env.share.doc.networkx-1.9.1.examples.drawing.chess_masters",
        "peekOfCode": "def chess_pgn_graph(pgn_file=\"chess_masters_WCC.pgn.bz2\"):\n    \"\"\"Read chess games in pgn format in pgn_file.\n    Filenames ending in .gz or .bz2 will be uncompressed.\n    Return the MultiDiGraph of players connected by a chess game.\n    Edges contain game data in a dict.\n    \"\"\"\n    import bz2\n    G=nx.MultiDiGraph()\n    game={}\n    datafile = bz2.BZ2File(pgn_file)",
        "detail": "env.share.doc.networkx-1.9.1.examples.drawing.chess_masters",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.drawing.degree_histogram",
        "description": "env.share.doc.networkx-1.9.1.examples.drawing.degree_histogram",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg <aric.hagberg@gmail.com>\"\"\"\nimport networkx as nx\nimport matplotlib.pyplot as plt\nG = nx.gnp_random_graph(100,0.02)\ndegree_sequence=sorted(nx.degree(G).values(),reverse=True) # degree sequence\n#print \"Degree sequence\", degree_sequence\ndmax=max(degree_sequence)\nplt.loglog(degree_sequence,'b-',marker='o')\nplt.title(\"Degree rank plot\")\nplt.ylabel(\"degree\")",
        "detail": "env.share.doc.networkx-1.9.1.examples.drawing.degree_histogram",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.drawing.degree_histogram",
        "description": "env.share.doc.networkx-1.9.1.examples.drawing.degree_histogram",
        "peekOfCode": "G = nx.gnp_random_graph(100,0.02)\ndegree_sequence=sorted(nx.degree(G).values(),reverse=True) # degree sequence\n#print \"Degree sequence\", degree_sequence\ndmax=max(degree_sequence)\nplt.loglog(degree_sequence,'b-',marker='o')\nplt.title(\"Degree rank plot\")\nplt.ylabel(\"degree\")\nplt.xlabel(\"rank\")\n# draw graph in inset \nplt.axes([0.45,0.45,0.45,0.45])",
        "detail": "env.share.doc.networkx-1.9.1.examples.drawing.degree_histogram",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.drawing.edge_colormap",
        "description": "env.share.doc.networkx-1.9.1.examples.drawing.edge_colormap",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\ntry:\n    import matplotlib.pyplot as plt\nexcept:\n    raise\nimport networkx as nx\nG=nx.star_graph(20)  \npos=nx.spring_layout(G)\ncolors=range(20) \nnx.draw(G,pos,node_color='#A0CBE2',edge_color=colors,width=4,edge_cmap=plt.cm.Blues,with_labels=False)",
        "detail": "env.share.doc.networkx-1.9.1.examples.drawing.edge_colormap",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.drawing.four_grids",
        "description": "env.share.doc.networkx-1.9.1.examples.drawing.four_grids",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n#    Copyright (C) 2004-2008\n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\ntry:\n    import matplotlib.pyplot as plt\nexcept:",
        "detail": "env.share.doc.networkx-1.9.1.examples.drawing.four_grids",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.drawing.house_with_colors",
        "description": "env.share.doc.networkx-1.9.1.examples.drawing.house_with_colors",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\ntry:\n    import matplotlib.pyplot as plt\nexcept:\n    raise\nimport networkx as nx\nG=nx.house_graph()\n# explicitly set positions\npos={0:(0,0),\n     1:(1,0),",
        "detail": "env.share.doc.networkx-1.9.1.examples.drawing.house_with_colors",
        "documentation": {}
    },
    {
        "label": "miles_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.drawing.knuth_miles",
        "description": "env.share.doc.networkx-1.9.1.examples.drawing.knuth_miles",
        "peekOfCode": "def miles_graph():\n    \"\"\" Return the cites example graph in miles_dat.txt\n        from the Stanford GraphBase.\n    \"\"\"\n    # open file miles_dat.txt.gz (or miles_dat.txt)\n    import gzip\n    fh = gzip.open('knuth_miles.txt.gz','r')\n    G=nx.Graph()\n    G.position={}\n    G.population={}",
        "detail": "env.share.doc.networkx-1.9.1.examples.drawing.knuth_miles",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.drawing.knuth_miles",
        "description": "env.share.doc.networkx-1.9.1.examples.drawing.knuth_miles",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n#    Copyright (C) 2004-2006 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nimport networkx as nx\ndef miles_graph():\n    \"\"\" Return the cites example graph in miles_dat.txt",
        "detail": "env.share.doc.networkx-1.9.1.examples.drawing.knuth_miles",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.drawing.labels_and_colors",
        "description": "env.share.doc.networkx-1.9.1.examples.drawing.labels_and_colors",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\nimport matplotlib.pyplot as plt\nimport networkx as nx\nG=nx.cubical_graph() \npos=nx.spring_layout(G) # positions for all nodes\n# nodes\nnx.draw_networkx_nodes(G,pos,\n                       nodelist=[0,1,2,3],\n                       node_color='r',\n                       node_size=500,",
        "detail": "env.share.doc.networkx-1.9.1.examples.drawing.labels_and_colors",
        "documentation": {}
    },
    {
        "label": "lanl_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.drawing.lanl_routes",
        "description": "env.share.doc.networkx-1.9.1.examples.drawing.lanl_routes",
        "peekOfCode": "def lanl_graph():\n    \"\"\" Return the lanl internet view graph from lanl.edges\n    \"\"\"\n    import networkx as nx\n    try:\n        fh=open('lanl_routes.edgelist','r')\n    except IOError:\n        print(\"lanl.edges not found\")\n        raise\n    G=nx.Graph()",
        "detail": "env.share.doc.networkx-1.9.1.examples.drawing.lanl_routes",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.drawing.lanl_routes",
        "description": "env.share.doc.networkx-1.9.1.examples.drawing.lanl_routes",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n#    Copyright (C) 2004-2008\n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\ndef lanl_graph():\n    \"\"\" Return the lanl internet view graph from lanl.edges\n    \"\"\"",
        "detail": "env.share.doc.networkx-1.9.1.examples.drawing.lanl_routes",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.drawing.node_colormap",
        "description": "env.share.doc.networkx-1.9.1.examples.drawing.node_colormap",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\ntry:\n    import matplotlib.pyplot as plt\nexcept:\n    raise \nimport networkx as nx\nG=nx.cycle_graph(24)\npos=nx.spring_layout(G,iterations=200)\nnx.draw(G,pos,node_color=range(24),node_size=800,cmap=plt.cm.Blues)\nplt.savefig(\"node_colormap.png\") # save as png",
        "detail": "env.share.doc.networkx-1.9.1.examples.drawing.node_colormap",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.drawing.sampson",
        "description": "env.share.doc.networkx-1.9.1.examples.drawing.sampson",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n#    Copyright (C) 2010 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nimport zipfile, cStringIO\nimport networkx as nx\nimport matplotlib.pyplot as plt",
        "detail": "env.share.doc.networkx-1.9.1.examples.drawing.sampson",
        "documentation": {}
    },
    {
        "label": "zf",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.drawing.sampson",
        "description": "env.share.doc.networkx-1.9.1.examples.drawing.sampson",
        "peekOfCode": "zf = zipfile.ZipFile('sampson_data.zip') # zipfile object\ne1=cStringIO.StringIO(zf.read('samplike1.txt')) # read info file\ne2=cStringIO.StringIO(zf.read('samplike2.txt')) # read info file\ne3=cStringIO.StringIO(zf.read('samplike3.txt')) # read info file\nG1=nx.read_edgelist(e1,delimiter='\\t')\nG2=nx.read_edgelist(e2,delimiter='\\t')\nG3=nx.read_edgelist(e3,delimiter='\\t')\npos=nx.spring_layout(G3,iterations=100)\nplt.clf()\nplt.subplot(221)",
        "detail": "env.share.doc.networkx-1.9.1.examples.drawing.sampson",
        "documentation": {}
    },
    {
        "label": "msgfactory",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.drawing.unix_email",
        "description": "env.share.doc.networkx-1.9.1.examples.drawing.unix_email",
        "peekOfCode": "def msgfactory(fp):\n    try:\n        return email.message_from_file(fp)\n    except email.Errors.MessageParseError:\n        # Don't return None since that will stop the mailbox iterator\n        return ''\nif __name__ == '__main__':\n    import networkx as nx\n    try: \n        import matplotlib.pyplot as plt",
        "detail": "env.share.doc.networkx-1.9.1.examples.drawing.unix_email",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.drawing.unix_email",
        "description": "env.share.doc.networkx-1.9.1.examples.drawing.unix_email",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n#    Copyright (C) 2005 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nimport email\nfrom email.utils import getaddresses,parseaddr\nimport mailbox",
        "detail": "env.share.doc.networkx-1.9.1.examples.drawing.unix_email",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.drawing.weighted_graph",
        "description": "env.share.doc.networkx-1.9.1.examples.drawing.weighted_graph",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\ntry:\n    import matplotlib.pyplot as plt\nexcept:\n    raise\nimport networkx as nx\nG=nx.Graph()\nG.add_edge('a','b',weight=0.6)\nG.add_edge('a','c',weight=0.2)\nG.add_edge('c','d',weight=0.1)",
        "detail": "env.share.doc.networkx-1.9.1.examples.drawing.weighted_graph",
        "documentation": {}
    },
    {
        "label": "atlas6",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.atlas",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.atlas",
        "peekOfCode": "def atlas6():\n    \"\"\" Return the atlas of all connected graphs of 6 nodes or less.\n        Attempt to check for isomorphisms and remove.\n    \"\"\"\n    Atlas=graph_atlas_g()[0:208] # 208\n    # remove isolated nodes, only connected graphs are left\n    U=nx.Graph() # graph for union of all graphs in atlas\n    for G in Atlas: \n        zerodegree=[n for n in G if G.degree(n)==0]\n        for n in zerodegree:",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.atlas",
        "documentation": {}
    },
    {
        "label": "iso",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.atlas",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.atlas",
        "peekOfCode": "def iso(G1, glist):\n    \"\"\"Quick and dirty nonisomorphism checker used to check isomorphisms.\"\"\"\n    for G2 in glist:\n        if isomorphic(G1,G2):\n            return True\n    return False        \nif __name__ == '__main__':\n    import networkx as nx\n    G=atlas6()\n    print(\"graph has %d nodes with %d edges\"\\",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.atlas",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.atlas",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.atlas",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n#    Copyright (C) 2004 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nimport networkx as nx\nfrom networkx.generators.atlas import *\nfrom networkx.algorithms.isomorphism.isomorph import graph_could_be_isomorphic as isomorphic",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.atlas",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.atlas2",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.atlas2",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n__date__ = \"$Date: 2005-05-19 14:23:02 -0600 (Thu, 19 May 2005) $\"\n__credits__ = \"\"\"\"\"\"\n__revision__ = \"\"\n#    Copyright (C) 2006 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.atlas2",
        "documentation": {}
    },
    {
        "label": "__date__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.atlas2",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.atlas2",
        "peekOfCode": "__date__ = \"$Date: 2005-05-19 14:23:02 -0600 (Thu, 19 May 2005) $\"\n__credits__ = \"\"\"\"\"\"\n__revision__ = \"\"\n#    Copyright (C) 2006 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nimport networkx as NX",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.atlas2",
        "documentation": {}
    },
    {
        "label": "__credits__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.atlas2",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.atlas2",
        "peekOfCode": "__credits__ = \"\"\"\"\"\"\n__revision__ = \"\"\n#    Copyright (C) 2006 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nimport networkx as NX\nfrom networkx.generators.atlas import *",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.atlas2",
        "documentation": {}
    },
    {
        "label": "__revision__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.atlas2",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.atlas2",
        "peekOfCode": "__revision__ = \"\"\n#    Copyright (C) 2006 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nimport networkx as NX\nfrom networkx.generators.atlas import *\nfrom pygraphviz import *",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.atlas2",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.degree_sequence",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.degree_sequence",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n__date__ = \"$Date: 2004-11-03 08:11:09 -0700 (Wed, 03 Nov 2004) $\"\n__credits__ = \"\"\"\"\"\"\n__revision__ = \"$Revision: 503 $\"\n#    Copyright (C) 2004 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.degree_sequence",
        "documentation": {}
    },
    {
        "label": "__date__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.degree_sequence",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.degree_sequence",
        "peekOfCode": "__date__ = \"$Date: 2004-11-03 08:11:09 -0700 (Wed, 03 Nov 2004) $\"\n__credits__ = \"\"\"\"\"\"\n__revision__ = \"$Revision: 503 $\"\n#    Copyright (C) 2004 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nfrom networkx import *",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.degree_sequence",
        "documentation": {}
    },
    {
        "label": "__credits__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.degree_sequence",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.degree_sequence",
        "peekOfCode": "__credits__ = \"\"\"\"\"\"\n__revision__ = \"$Revision: 503 $\"\n#    Copyright (C) 2004 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nfrom networkx import *\nz=[5,3,3,3,3,2,2,2,1,1,1]",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.degree_sequence",
        "documentation": {}
    },
    {
        "label": "__revision__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.degree_sequence",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.degree_sequence",
        "peekOfCode": "__revision__ = \"$Revision: 503 $\"\n#    Copyright (C) 2004 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nfrom networkx import *\nz=[5,3,3,3,3,2,2,2,1,1,1]\nprint(is_valid_degree_sequence(z))",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.degree_sequence",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.erdos_renyi",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.erdos_renyi",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n__credits__ = \"\"\"\"\"\"\n#    Copyright (C) 2004-2006 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nfrom networkx import *\nimport sys",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.erdos_renyi",
        "documentation": {}
    },
    {
        "label": "__credits__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.erdos_renyi",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.erdos_renyi",
        "peekOfCode": "__credits__ = \"\"\"\"\"\"\n#    Copyright (C) 2004-2006 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nfrom networkx import *\nimport sys\nn=10 # 10 nodes",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.erdos_renyi",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.expected_degree_sequence",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.expected_degree_sequence",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n#    Copyright (C) 2006 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nfrom networkx import *\nfrom networkx.generators.degree_seq import *\n# make a random graph of 500 nodes with expected degrees of 50",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.football",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.football",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n#    Copyright (C) 2007 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\ntry:\n    import pyparsing\nexcept ImportError as e:",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.football",
        "documentation": {}
    },
    {
        "label": "sock",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.football",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.football",
        "peekOfCode": "sock = urllib.urlopen(url)  # open URL\ns=io.BytesIO(sock.read()) # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s) # zipfile object\ntxt=zf.read('football.txt').decode() # read info file\ngml=zf.read('football.gml').decode() # read gml data\n# throw away bogus first line with # from mejn files\ngml=gml.split('\\n')[1:]\nG=parse_gml(gml) # parse gml data\nprint(txt)",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.football",
        "documentation": {}
    },
    {
        "label": "zf",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.football",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.football",
        "peekOfCode": "zf = zipfile.ZipFile(s) # zipfile object\ntxt=zf.read('football.txt').decode() # read info file\ngml=zf.read('football.gml').decode() # read gml data\n# throw away bogus first line with # from mejn files\ngml=gml.split('\\n')[1:]\nG=parse_gml(gml) # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n,d in G.degree_iter():\n    print('%s %d' % (n, d))",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.football",
        "documentation": {}
    },
    {
        "label": "miles_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.knuth_miles",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.knuth_miles",
        "peekOfCode": "def miles_graph():\n    \"\"\" Return the cites example graph in miles_dat.txt\n        from the Stanford GraphBase.\n    \"\"\"\n    # open file miles_dat.txt.gz (or miles_dat.txt)\n    import gzip\n    fh = gzip.open('knuth_miles.txt.gz','r')\n    G=nx.Graph()\n    G.position={}\n    G.population={}",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.knuth_miles",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.knuth_miles",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.knuth_miles",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n#    Copyright (C) 2004-2006 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nimport networkx as nx\ndef miles_graph():\n    \"\"\" Return the cites example graph in miles_dat.txt",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.knuth_miles",
        "documentation": {}
    },
    {
        "label": "minard_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.napoleon_russian_campaign",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.napoleon_russian_campaign",
        "peekOfCode": "def minard_graph():\n    data1=\"\"\"\\\n24.0,54.9,340000,A,1\n24.5,55.0,340000,A,1\n25.5,54.5,340000,A,1\n26.0,54.7,320000,A,1\n27.0,54.8,300000,A,1\n28.0,54.9,280000,A,1\n28.5,55.0,240000,A,1\n29.0,55.1,210000,A,1",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.napoleon_russian_campaign",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.napoleon_russian_campaign",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.napoleon_russian_campaign",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n#    Copyright (C) 2006 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nimport string\nimport networkx as nx\ndef minard_graph():",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.napoleon_russian_campaign",
        "documentation": {}
    },
    {
        "label": "roget_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.roget",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.roget",
        "peekOfCode": "def roget_graph():\n    \"\"\" Return the thesaurus graph from the roget.dat example in\n    the Stanford Graph Base.\n    \"\"\"\n    # open file roget_dat.txt.gz (or roget_dat.txt)\n    import gzip\n    fh=gzip.open('roget_dat.txt.gz','r')\n    G=DiGraph()\n    for line in fh.readlines():\n        line = line.decode()",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.roget",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.roget",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.roget",
        "peekOfCode": "__author__ = \"\"\"Brendt Wohlberg\\nAric Hagberg (hagberg@lanl.gov)\"\"\"\n__date__ = \"$Date: 2005-04-01 07:56:22 -0700 (Fri, 01 Apr 2005) $\"\n__credits__ = \"\"\"\"\"\"\n__revision__ = \"\"\n#    Copyright (C) 2004 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.roget",
        "documentation": {}
    },
    {
        "label": "__date__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.roget",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.roget",
        "peekOfCode": "__date__ = \"$Date: 2005-04-01 07:56:22 -0700 (Fri, 01 Apr 2005) $\"\n__credits__ = \"\"\"\"\"\"\n__revision__ = \"\"\n#    Copyright (C) 2004 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nfrom networkx import *",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.roget",
        "documentation": {}
    },
    {
        "label": "__credits__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.roget",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.roget",
        "peekOfCode": "__credits__ = \"\"\"\"\"\"\n__revision__ = \"\"\n#    Copyright (C) 2004 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nfrom networkx import *\nimport re",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.roget",
        "documentation": {}
    },
    {
        "label": "__revision__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.roget",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.roget",
        "peekOfCode": "__revision__ = \"\"\n#    Copyright (C) 2004 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nfrom networkx import *\nimport re\nimport sys",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.roget",
        "documentation": {}
    },
    {
        "label": "msgfactory",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.unix_email",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.unix_email",
        "peekOfCode": "def msgfactory(fp):\n    try:\n        return email.message_from_file(fp)\n    except email.Errors.MessageParseError:\n        # Don't return None since that will stop the mailbox iterator\n        return ''\nif __name__ == '__main__':\n    import networkx as nx\n    try: \n        import matplotlib.pyplot as plt",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.unix_email",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.unix_email",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.unix_email",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n#    Copyright (C) 2005 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nimport email\nfrom email.utils import getaddresses,parseaddr\nimport mailbox",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.unix_email",
        "documentation": {}
    },
    {
        "label": "generate_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.words",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.words",
        "peekOfCode": "def generate_graph(words):\n    from string import ascii_lowercase as lowercase\n    G = nx.Graph(name=\"words\")\n    lookup = dict((c,lowercase.index(c)) for c in lowercase)\n    def edit_distance_one(word):\n        for i in range(len(word)):\n            left, c, right = word[0:i], word[i], word[i+1:]\n            j = lookup[c] # lowercase.index(c)\n            for cc in lowercase[j+1:]:\n                yield left + cc + right",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.words",
        "documentation": {}
    },
    {
        "label": "words_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.words",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.words",
        "peekOfCode": "def words_graph():\n    \"\"\"Return the words example graph from the Stanford GraphBase\"\"\"\n    import gzip\n    fh=gzip.open('words_dat.txt.gz','r')\n    words=set()\n    for line in fh.readlines():\n        line = line.decode()\n        if line.startswith('*'):\n            continue\n        w=str(line[0:5])",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.words",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.graph.words",
        "description": "env.share.doc.networkx-1.9.1.examples.graph.words",
        "peekOfCode": "__author__ = \"\"\"\\n\"\"\".join(['Aric Hagberg (hagberg@lanl.gov)',\n                            'Brendt Wohlberg',\n                            'hughdbrown@yahoo.com'])\n#    Copyright (C) 2004-2010 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nimport networkx as nx",
        "detail": "env.share.doc.networkx-1.9.1.examples.graph.words",
        "documentation": {}
    },
    {
        "label": "chess_pgn_graph",
        "kind": 2,
        "importPath": "env.share.doc.networkx-1.9.1.examples.multigraph.chess_masters",
        "description": "env.share.doc.networkx-1.9.1.examples.multigraph.chess_masters",
        "peekOfCode": "def chess_pgn_graph(pgn_file=\"chess_masters_WCC.pgn.bz2\"):\n    \"\"\"Read chess games in pgn format in pgn_file.\n    Filenames ending in .gz or .bz2 will be uncompressed.\n    Return the MultiDiGraph of players connected by a chess game.\n    Edges contain game data in a dict.\n    \"\"\"\n    import bz2\n    G=nx.MultiDiGraph()\n    game={}\n    datafile = bz2.BZ2File(pgn_file)",
        "detail": "env.share.doc.networkx-1.9.1.examples.multigraph.chess_masters",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.pygraphviz.pygraphviz_attributes",
        "description": "env.share.doc.networkx-1.9.1.examples.pygraphviz.pygraphviz_attributes",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n#    Copyright (C) 2006-2010 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nimport networkx as nx\n# networkx graph\nG=nx.Graph()",
        "detail": "env.share.doc.networkx-1.9.1.examples.pygraphviz.pygraphviz_attributes",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.pygraphviz.pygraphviz_draw",
        "description": "env.share.doc.networkx-1.9.1.examples.pygraphviz.pygraphviz_draw",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n#    Copyright (C) 2006 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nfrom networkx import *\n# plain graph\nG=complete_graph(5)   # start with K5 in networkx",
        "detail": "env.share.doc.networkx-1.9.1.examples.pygraphviz.pygraphviz_draw",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.pygraphviz.pygraphviz_simple",
        "description": "env.share.doc.networkx-1.9.1.examples.pygraphviz.pygraphviz_simple",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n#    Copyright (C) 2006 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nfrom networkx import *\n# plain graph\nG=complete_graph(5)   # start with K5 in networkx",
        "detail": "env.share.doc.networkx-1.9.1.examples.pygraphviz.pygraphviz_simple",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "env.share.doc.networkx-1.9.1.examples.pygraphviz.write_dotfile",
        "description": "env.share.doc.networkx-1.9.1.examples.pygraphviz.write_dotfile",
        "peekOfCode": "__author__ = \"\"\"Aric Hagberg (hagberg@lanl.gov)\"\"\"\n#    Copyright (C) 2004-2006 by \n#    Aric Hagberg <hagberg@lanl.gov>\n#    Dan Schult <dschult@colgate.edu>\n#    Pieter Swart <swart@lanl.gov>\n#    All rights reserved.\n#    BSD license.\nimport networkx as NX\n# and the following code block is not needed\n# but we want to see which module is used and",
        "detail": "env.share.doc.networkx-1.9.1.examples.pygraphviz.write_dotfile",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.file_upload_buffer",
        "description": "env.share.doc.pycurl.examples.quickstart.file_upload_buffer",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'https://httpbin.org/post')\nc.setopt(c.HTTPPOST, [\n    ('fileupload', (\n        c.FORM_BUFFER, 'readme.txt',\n        c.FORM_BUFFERPTR, 'This is a fancy readme file',\n    )),\n])\nc.perform()\nc.close()",
        "detail": "env.share.doc.pycurl.examples.quickstart.file_upload_buffer",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.file_upload_real",
        "description": "env.share.doc.pycurl.examples.quickstart.file_upload_real",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'https://httpbin.org/post')\nc.setopt(c.HTTPPOST, [\n    ('fileupload', (\n        # upload the contents of this file\n        c.FORM_FILE, __file__,\n    )),\n])\nc.perform()\nc.close()",
        "detail": "env.share.doc.pycurl.examples.quickstart.file_upload_real",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.file_upload_real_fancy",
        "description": "env.share.doc.pycurl.examples.quickstart.file_upload_real_fancy",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'https://httpbin.org/post')\nc.setopt(c.HTTPPOST, [\n    ('fileupload', (\n        # upload the contents of this file\n        c.FORM_FILE, __file__,\n        # specify a different file name for the upload\n        c.FORM_FILENAME, 'helloworld.py',\n        # specify a different content type\n        c.FORM_CONTENTTYPE, 'application/x-python',",
        "detail": "env.share.doc.pycurl.examples.quickstart.file_upload_real_fancy",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.follow_redirect",
        "description": "env.share.doc.pycurl.examples.quickstart.follow_redirect",
        "peekOfCode": "c = pycurl.Curl()\n# Redirects to https://www.python.org/.\nc.setopt(c.URL, 'http://www.python.org/')\n# Follow redirect.\nc.setopt(c.FOLLOWLOCATION, True)\nc.perform()\nc.close()",
        "detail": "env.share.doc.pycurl.examples.quickstart.follow_redirect",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.form_post",
        "description": "env.share.doc.pycurl.examples.quickstart.form_post",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'https://httpbin.org/post')\npost_data = {'field': 'value'}\n# Form data must be provided already urlencoded.\npostfields = urlencode(post_data)\n# Sets request method to POST,\n# Content-Type header to application/x-www-form-urlencoded\n# and data to send in request body.\nc.setopt(c.POSTFIELDS, postfields)\nc.perform()",
        "detail": "env.share.doc.pycurl.examples.quickstart.form_post",
        "documentation": {}
    },
    {
        "label": "post_data",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.form_post",
        "description": "env.share.doc.pycurl.examples.quickstart.form_post",
        "peekOfCode": "post_data = {'field': 'value'}\n# Form data must be provided already urlencoded.\npostfields = urlencode(post_data)\n# Sets request method to POST,\n# Content-Type header to application/x-www-form-urlencoded\n# and data to send in request body.\nc.setopt(c.POSTFIELDS, postfields)\nc.perform()\nc.close()",
        "detail": "env.share.doc.pycurl.examples.quickstart.form_post",
        "documentation": {}
    },
    {
        "label": "postfields",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.form_post",
        "description": "env.share.doc.pycurl.examples.quickstart.form_post",
        "peekOfCode": "postfields = urlencode(post_data)\n# Sets request method to POST,\n# Content-Type header to application/x-www-form-urlencoded\n# and data to send in request body.\nc.setopt(c.POSTFIELDS, postfields)\nc.perform()\nc.close()",
        "detail": "env.share.doc.pycurl.examples.quickstart.form_post",
        "documentation": {}
    },
    {
        "label": "buffer",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.get",
        "description": "env.share.doc.pycurl.examples.quickstart.get",
        "peekOfCode": "buffer = BytesIO()\nc = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\n# For older PycURL versions:\n#c.setopt(c.WRITEFUNCTION, buffer.write)\nc.perform()\nc.close()\nbody = buffer.getvalue()\n# Body is a string on Python 2 and a byte string on Python 3.",
        "detail": "env.share.doc.pycurl.examples.quickstart.get",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.get",
        "description": "env.share.doc.pycurl.examples.quickstart.get",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\n# For older PycURL versions:\n#c.setopt(c.WRITEFUNCTION, buffer.write)\nc.perform()\nc.close()\nbody = buffer.getvalue()\n# Body is a string on Python 2 and a byte string on Python 3.\n# If we know the encoding, we can always decode the body and",
        "detail": "env.share.doc.pycurl.examples.quickstart.get",
        "documentation": {}
    },
    {
        "label": "body",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.get",
        "description": "env.share.doc.pycurl.examples.quickstart.get",
        "peekOfCode": "body = buffer.getvalue()\n# Body is a string on Python 2 and a byte string on Python 3.\n# If we know the encoding, we can always decode the body and\n# end up with a Unicode string.\nprint(body.decode('iso-8859-1'))",
        "detail": "env.share.doc.pycurl.examples.quickstart.get",
        "documentation": {}
    },
    {
        "label": "buffer",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.get_python2",
        "description": "env.share.doc.pycurl.examples.quickstart.get_python2",
        "peekOfCode": "buffer = StringIO()\nc = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\n# For older PycURL versions:\n#c.setopt(c.WRITEFUNCTION, buffer.write)\nc.perform()\nc.close()\nbody = buffer.getvalue()\n# Body is a string in some encoding.",
        "detail": "env.share.doc.pycurl.examples.quickstart.get_python2",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.get_python2",
        "description": "env.share.doc.pycurl.examples.quickstart.get_python2",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\n# For older PycURL versions:\n#c.setopt(c.WRITEFUNCTION, buffer.write)\nc.perform()\nc.close()\nbody = buffer.getvalue()\n# Body is a string in some encoding.\n# In Python 2, we can print it without knowing what the encoding is.",
        "detail": "env.share.doc.pycurl.examples.quickstart.get_python2",
        "documentation": {}
    },
    {
        "label": "body",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.get_python2",
        "description": "env.share.doc.pycurl.examples.quickstart.get_python2",
        "peekOfCode": "body = buffer.getvalue()\n# Body is a string in some encoding.\n# In Python 2, we can print it without knowing what the encoding is.\nprint(body)",
        "detail": "env.share.doc.pycurl.examples.quickstart.get_python2",
        "documentation": {}
    },
    {
        "label": "buffer",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.get_python2_https",
        "description": "env.share.doc.pycurl.examples.quickstart.get_python2_https",
        "peekOfCode": "buffer = StringIO()\nc = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\n# For older PycURL versions:\n#c.setopt(c.WRITEFUNCTION, buffer.write)\nc.setopt(c.CAINFO, certifi.where())\nc.perform()\nc.close()\nbody = buffer.getvalue()",
        "detail": "env.share.doc.pycurl.examples.quickstart.get_python2_https",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.get_python2_https",
        "description": "env.share.doc.pycurl.examples.quickstart.get_python2_https",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\n# For older PycURL versions:\n#c.setopt(c.WRITEFUNCTION, buffer.write)\nc.setopt(c.CAINFO, certifi.where())\nc.perform()\nc.close()\nbody = buffer.getvalue()\n# Body is a string in some encoding.",
        "detail": "env.share.doc.pycurl.examples.quickstart.get_python2_https",
        "documentation": {}
    },
    {
        "label": "body",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.get_python2_https",
        "description": "env.share.doc.pycurl.examples.quickstart.get_python2_https",
        "peekOfCode": "body = buffer.getvalue()\n# Body is a string in some encoding.\n# In Python 2, we can print it without knowing what the encoding is.\nprint(body)",
        "detail": "env.share.doc.pycurl.examples.quickstart.get_python2_https",
        "documentation": {}
    },
    {
        "label": "buffer",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.get_python3",
        "description": "env.share.doc.pycurl.examples.quickstart.get_python3",
        "peekOfCode": "buffer = BytesIO()\nc = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\nc.perform()\nc.close()\nbody = buffer.getvalue()\n# Body is a byte string.\n# We have to know the encoding in order to print it to a text file\n# such as standard output.",
        "detail": "env.share.doc.pycurl.examples.quickstart.get_python3",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.get_python3",
        "description": "env.share.doc.pycurl.examples.quickstart.get_python3",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\nc.perform()\nc.close()\nbody = buffer.getvalue()\n# Body is a byte string.\n# We have to know the encoding in order to print it to a text file\n# such as standard output.\nprint(body.decode('iso-8859-1'))",
        "detail": "env.share.doc.pycurl.examples.quickstart.get_python3",
        "documentation": {}
    },
    {
        "label": "body",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.get_python3",
        "description": "env.share.doc.pycurl.examples.quickstart.get_python3",
        "peekOfCode": "body = buffer.getvalue()\n# Body is a byte string.\n# We have to know the encoding in order to print it to a text file\n# such as standard output.\nprint(body.decode('iso-8859-1'))",
        "detail": "env.share.doc.pycurl.examples.quickstart.get_python3",
        "documentation": {}
    },
    {
        "label": "buffer",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.get_python3_https",
        "description": "env.share.doc.pycurl.examples.quickstart.get_python3_https",
        "peekOfCode": "buffer = BytesIO()\nc = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\nc.setopt(c.CAINFO, certifi.where())\nc.perform()\nc.close()\nbody = buffer.getvalue()\n# Body is a byte string.\n# We have to know the encoding in order to print it to a text file",
        "detail": "env.share.doc.pycurl.examples.quickstart.get_python3_https",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.get_python3_https",
        "description": "env.share.doc.pycurl.examples.quickstart.get_python3_https",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\nc.setopt(c.CAINFO, certifi.where())\nc.perform()\nc.close()\nbody = buffer.getvalue()\n# Body is a byte string.\n# We have to know the encoding in order to print it to a text file\n# such as standard output.",
        "detail": "env.share.doc.pycurl.examples.quickstart.get_python3_https",
        "documentation": {}
    },
    {
        "label": "body",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.get_python3_https",
        "description": "env.share.doc.pycurl.examples.quickstart.get_python3_https",
        "peekOfCode": "body = buffer.getvalue()\n# Body is a byte string.\n# We have to know the encoding in order to print it to a text file\n# such as standard output.\nprint(body.decode('iso-8859-1'))",
        "detail": "env.share.doc.pycurl.examples.quickstart.get_python3_https",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.put_buffer",
        "description": "env.share.doc.pycurl.examples.quickstart.put_buffer",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'https://httpbin.org/put')\nc.setopt(c.UPLOAD, 1)\ndata = '{\"json\":true}'\n# READDATA requires an IO-like object; a string is not accepted\n# encode() is necessary for Python 3\nbuffer = BytesIO(data.encode('utf-8'))\nc.setopt(c.READDATA, buffer)\nc.perform()\nc.close()",
        "detail": "env.share.doc.pycurl.examples.quickstart.put_buffer",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.put_buffer",
        "description": "env.share.doc.pycurl.examples.quickstart.put_buffer",
        "peekOfCode": "data = '{\"json\":true}'\n# READDATA requires an IO-like object; a string is not accepted\n# encode() is necessary for Python 3\nbuffer = BytesIO(data.encode('utf-8'))\nc.setopt(c.READDATA, buffer)\nc.perform()\nc.close()",
        "detail": "env.share.doc.pycurl.examples.quickstart.put_buffer",
        "documentation": {}
    },
    {
        "label": "buffer",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.put_buffer",
        "description": "env.share.doc.pycurl.examples.quickstart.put_buffer",
        "peekOfCode": "buffer = BytesIO(data.encode('utf-8'))\nc.setopt(c.READDATA, buffer)\nc.perform()\nc.close()",
        "detail": "env.share.doc.pycurl.examples.quickstart.put_buffer",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.put_file",
        "description": "env.share.doc.pycurl.examples.quickstart.put_file",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'https://httpbin.org/put')\nc.setopt(c.UPLOAD, 1)\nfile = open(__file__)\nc.setopt(c.READDATA, file)\nc.perform()\nc.close()\n# File must be kept open while Curl object is using it\nfile.close()",
        "detail": "env.share.doc.pycurl.examples.quickstart.put_file",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.put_file",
        "description": "env.share.doc.pycurl.examples.quickstart.put_file",
        "peekOfCode": "file = open(__file__)\nc.setopt(c.READDATA, file)\nc.perform()\nc.close()\n# File must be kept open while Curl object is using it\nfile.close()",
        "detail": "env.share.doc.pycurl.examples.quickstart.put_file",
        "documentation": {}
    },
    {
        "label": "header_function",
        "kind": 2,
        "importPath": "env.share.doc.pycurl.examples.quickstart.response_headers",
        "description": "env.share.doc.pycurl.examples.quickstart.response_headers",
        "peekOfCode": "def header_function(header_line):\n    # HTTP standard specifies that headers are encoded in iso-8859-1.\n    # On Python 2, decoding step can be skipped.\n    # On Python 3, decoding step is required.\n    header_line = header_line.decode('iso-8859-1')\n    # Header lines include the first status line (HTTP/1.x ...).\n    # We are going to ignore all lines that don't have a colon in them.\n    # This will botch headers that are split on multiple lines...\n    if ':' not in header_line:\n        return",
        "detail": "env.share.doc.pycurl.examples.quickstart.response_headers",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.response_headers",
        "description": "env.share.doc.pycurl.examples.quickstart.response_headers",
        "peekOfCode": "headers = {}\ndef header_function(header_line):\n    # HTTP standard specifies that headers are encoded in iso-8859-1.\n    # On Python 2, decoding step can be skipped.\n    # On Python 3, decoding step is required.\n    header_line = header_line.decode('iso-8859-1')\n    # Header lines include the first status line (HTTP/1.x ...).\n    # We are going to ignore all lines that don't have a colon in them.\n    # This will botch headers that are split on multiple lines...\n    if ':' not in header_line:",
        "detail": "env.share.doc.pycurl.examples.quickstart.response_headers",
        "documentation": {}
    },
    {
        "label": "buffer",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.response_headers",
        "description": "env.share.doc.pycurl.examples.quickstart.response_headers",
        "peekOfCode": "buffer = BytesIO()\nc = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io')\nc.setopt(c.WRITEFUNCTION, buffer.write)\n# Set our header function.\nc.setopt(c.HEADERFUNCTION, header_function)\nc.perform()\nc.close()\n# Figure out what encoding was sent with the response, if any.\n# Check against lowercased header name.",
        "detail": "env.share.doc.pycurl.examples.quickstart.response_headers",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.response_headers",
        "description": "env.share.doc.pycurl.examples.quickstart.response_headers",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io')\nc.setopt(c.WRITEFUNCTION, buffer.write)\n# Set our header function.\nc.setopt(c.HEADERFUNCTION, header_function)\nc.perform()\nc.close()\n# Figure out what encoding was sent with the response, if any.\n# Check against lowercased header name.\nencoding = None",
        "detail": "env.share.doc.pycurl.examples.quickstart.response_headers",
        "documentation": {}
    },
    {
        "label": "encoding",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.response_headers",
        "description": "env.share.doc.pycurl.examples.quickstart.response_headers",
        "peekOfCode": "encoding = None\nif 'content-type' in headers:\n    content_type = headers['content-type'].lower()\n    match = re.search('charset=(\\S+)', content_type)\n    if match:\n        encoding = match.group(1)\n        print('Decoding using %s' % encoding)\nif encoding is None:\n    # Default encoding for HTML is iso-8859-1.\n    # Other content types may have different default encoding,",
        "detail": "env.share.doc.pycurl.examples.quickstart.response_headers",
        "documentation": {}
    },
    {
        "label": "body",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.response_headers",
        "description": "env.share.doc.pycurl.examples.quickstart.response_headers",
        "peekOfCode": "body = buffer.getvalue()\n# Decode using the encoding we figured out.\nprint(body.decode(encoding))",
        "detail": "env.share.doc.pycurl.examples.quickstart.response_headers",
        "documentation": {}
    },
    {
        "label": "buffer",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.response_info",
        "description": "env.share.doc.pycurl.examples.quickstart.response_info",
        "peekOfCode": "buffer = BytesIO()\nc = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\nc.perform()\n# HTTP response code, e.g. 200.\nprint('Status: %d' % c.getinfo(c.RESPONSE_CODE))\n# Elapsed time for the transfer.\nprint('Time: %f' % c.getinfo(c.TOTAL_TIME))\n# getinfo must be called before close.",
        "detail": "env.share.doc.pycurl.examples.quickstart.response_info",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.quickstart.response_info",
        "description": "env.share.doc.pycurl.examples.quickstart.response_info",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io/')\nc.setopt(c.WRITEDATA, buffer)\nc.perform()\n# HTTP response code, e.g. 200.\nprint('Status: %d' % c.getinfo(c.RESPONSE_CODE))\n# Elapsed time for the transfer.\nprint('Time: %f' % c.getinfo(c.TOTAL_TIME))\n# getinfo must be called before close.\nc.close()",
        "detail": "env.share.doc.pycurl.examples.quickstart.response_info",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "env.share.doc.pycurl.examples.basicfirst",
        "description": "env.share.doc.pycurl.examples.basicfirst",
        "peekOfCode": "class Test:\n    def __init__(self):\n        self.contents = ''\n        if PY3:\n            self.contents = self.contents.encode('ascii')\n    def body_callback(self, buf):\n        self.contents = self.contents + buf\nsys.stderr.write(\"Testing %s\\n\" % pycurl.version)\nt = Test()\nc = pycurl.Curl()",
        "detail": "env.share.doc.pycurl.examples.basicfirst",
        "documentation": {}
    },
    {
        "label": "PY3",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.basicfirst",
        "description": "env.share.doc.pycurl.examples.basicfirst",
        "peekOfCode": "PY3 = sys.version_info[0] > 2\nclass Test:\n    def __init__(self):\n        self.contents = ''\n        if PY3:\n            self.contents = self.contents.encode('ascii')\n    def body_callback(self, buf):\n        self.contents = self.contents + buf\nsys.stderr.write(\"Testing %s\\n\" % pycurl.version)\nt = Test()",
        "detail": "env.share.doc.pycurl.examples.basicfirst",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.basicfirst",
        "description": "env.share.doc.pycurl.examples.basicfirst",
        "peekOfCode": "t = Test()\nc = pycurl.Curl()\nc.setopt(c.URL, 'https://curl.haxx.se/dev/')\nc.setopt(c.WRITEFUNCTION, t.body_callback)\nc.perform()\nc.close()\nprint(t.contents)",
        "detail": "env.share.doc.pycurl.examples.basicfirst",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.basicfirst",
        "description": "env.share.doc.pycurl.examples.basicfirst",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'https://curl.haxx.se/dev/')\nc.setopt(c.WRITEFUNCTION, t.body_callback)\nc.perform()\nc.close()\nprint(t.contents)",
        "detail": "env.share.doc.pycurl.examples.basicfirst",
        "documentation": {}
    },
    {
        "label": "FileReader",
        "kind": 6,
        "importPath": "env.share.doc.pycurl.examples.file_upload",
        "description": "env.share.doc.pycurl.examples.file_upload",
        "peekOfCode": "class FileReader:\n    def __init__(self, fp):\n        self.fp = fp\n    def read_callback(self, size):\n        return self.fp.read(size)\n# Check commandline arguments\nif len(sys.argv) < 3:\n    print(\"Usage: %s <url> <file to upload>\" % sys.argv[0])\n    raise SystemExit\nurl = sys.argv[1]",
        "detail": "env.share.doc.pycurl.examples.file_upload",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.file_upload",
        "description": "env.share.doc.pycurl.examples.file_upload",
        "peekOfCode": "url = sys.argv[1]\nfilename = sys.argv[2]\nif not os.path.exists(filename):\n    print(\"Error: the file '%s' does not exist\" % filename)\n    raise SystemExit\n# Initialize pycurl\nc = pycurl.Curl()\nc.setopt(pycurl.URL, url)\nc.setopt(pycurl.UPLOAD, 1)\n# Two versions with the same semantics here, but the filereader version",
        "detail": "env.share.doc.pycurl.examples.file_upload",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.file_upload",
        "description": "env.share.doc.pycurl.examples.file_upload",
        "peekOfCode": "filename = sys.argv[2]\nif not os.path.exists(filename):\n    print(\"Error: the file '%s' does not exist\" % filename)\n    raise SystemExit\n# Initialize pycurl\nc = pycurl.Curl()\nc.setopt(pycurl.URL, url)\nc.setopt(pycurl.UPLOAD, 1)\n# Two versions with the same semantics here, but the filereader version\n# is useful when you have to process the data which is read before returning",
        "detail": "env.share.doc.pycurl.examples.file_upload",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.file_upload",
        "description": "env.share.doc.pycurl.examples.file_upload",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(pycurl.URL, url)\nc.setopt(pycurl.UPLOAD, 1)\n# Two versions with the same semantics here, but the filereader version\n# is useful when you have to process the data which is read before returning\nif 1:\n    c.setopt(pycurl.READFUNCTION, FileReader(open(filename, 'rb')).read_callback)\nelse:\n    c.setopt(pycurl.READFUNCTION, open(filename, 'rb').read)\n# Set size of file to be uploaded.",
        "detail": "env.share.doc.pycurl.examples.file_upload",
        "documentation": {}
    },
    {
        "label": "filesize",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.file_upload",
        "description": "env.share.doc.pycurl.examples.file_upload",
        "peekOfCode": "filesize = os.path.getsize(filename)\nc.setopt(pycurl.INFILESIZE, filesize)\n# Start transfer\nprint('Uploading file %s to url %s' % (filename, url))\nc.perform()\nc.close()",
        "detail": "env.share.doc.pycurl.examples.file_upload",
        "documentation": {}
    },
    {
        "label": "LinksysError",
        "kind": 6,
        "importPath": "env.share.doc.pycurl.examples.linksys",
        "description": "env.share.doc.pycurl.examples.linksys",
        "peekOfCode": "class LinksysError(exceptions.Exception):\n    def __init__(self, *args):\n        self.args = args\nclass LinksysSession:\n    months = 'Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec'\n    WAN_CONNECT_AUTO = '1'\n    WAN_CONNECT_STATIC = '2'\n    WAN_CONNECT_PPOE = '3'\n    WAN_CONNECT_RAS = '4'\n    WAN_CONNECT_PPTP = '5'",
        "detail": "env.share.doc.pycurl.examples.linksys",
        "documentation": {}
    },
    {
        "label": "LinksysSession",
        "kind": 6,
        "importPath": "env.share.doc.pycurl.examples.linksys",
        "description": "env.share.doc.pycurl.examples.linksys",
        "peekOfCode": "class LinksysSession:\n    months = 'Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec'\n    WAN_CONNECT_AUTO = '1'\n    WAN_CONNECT_STATIC = '2'\n    WAN_CONNECT_PPOE = '3'\n    WAN_CONNECT_RAS = '4'\n    WAN_CONNECT_PPTP = '5'\n    WAN_CONNECT_HEARTBEAT = '6'\n    # Substrings to check for on each page load.\n    # This may enable us to detect when a firmware change has hosed us.",
        "detail": "env.share.doc.pycurl.examples.linksys",
        "documentation": {}
    },
    {
        "label": "print_stderr",
        "kind": 2,
        "importPath": "env.share.doc.pycurl.examples.linksys",
        "description": "env.share.doc.pycurl.examples.linksys",
        "peekOfCode": "def print_stderr(arg):\n    sys.stderr.write(arg)\n    sys.stderr.write(\"\\n\")\nclass LinksysError(exceptions.Exception):\n    def __init__(self, *args):\n        self.args = args\nclass LinksysSession:\n    months = 'Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec'\n    WAN_CONNECT_AUTO = '1'\n    WAN_CONNECT_STATIC = '2'",
        "detail": "env.share.doc.pycurl.examples.linksys",
        "documentation": {}
    },
    {
        "label": "ConnectionRejected",
        "kind": 6,
        "importPath": "env.share.doc.pycurl.examples.opensocketexception",
        "description": "env.share.doc.pycurl.examples.opensocketexception",
        "peekOfCode": "class ConnectionRejected(Exception):\n    pass\ndef opensocket(curl, purpose, curl_address):\n    if random.random() < 0.5:\n        curl.exception = ConnectionRejected('Rejecting connection attempt in opensocket callback')\n        return pycurl.SOCKET_BAD\n    family, socktype, protocol, address = curl_address\n    s = socket.socket(family, socktype, protocol)\n    s.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\n    return s",
        "detail": "env.share.doc.pycurl.examples.opensocketexception",
        "documentation": {}
    },
    {
        "label": "opensocket",
        "kind": 2,
        "importPath": "env.share.doc.pycurl.examples.opensocketexception",
        "description": "env.share.doc.pycurl.examples.opensocketexception",
        "peekOfCode": "def opensocket(curl, purpose, curl_address):\n    if random.random() < 0.5:\n        curl.exception = ConnectionRejected('Rejecting connection attempt in opensocket callback')\n        return pycurl.SOCKET_BAD\n    family, socktype, protocol, address = curl_address\n    s = socket.socket(family, socktype, protocol)\n    s.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\n    return s\nc = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io')",
        "detail": "env.share.doc.pycurl.examples.opensocketexception",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.opensocketexception",
        "description": "env.share.doc.pycurl.examples.opensocketexception",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, 'http://pycurl.io')\nc.exception = None\nc.setopt(c.OPENSOCKETFUNCTION,\n    lambda purpose, address: opensocket(c, purpose, address))\ntry:\n    c.perform()\nexcept pycurl.error as e:\n    if e.args[0] == pycurl.E_COULDNT_CONNECT and c.exception:\n        print(c.exception)",
        "detail": "env.share.doc.pycurl.examples.opensocketexception",
        "documentation": {}
    },
    {
        "label": "c.exception",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.opensocketexception",
        "description": "env.share.doc.pycurl.examples.opensocketexception",
        "peekOfCode": "c.exception = None\nc.setopt(c.OPENSOCKETFUNCTION,\n    lambda purpose, address: opensocket(c, purpose, address))\ntry:\n    c.perform()\nexcept pycurl.error as e:\n    if e.args[0] == pycurl.E_COULDNT_CONNECT and c.exception:\n        print(c.exception)\n    else:\n        print(e)",
        "detail": "env.share.doc.pycurl.examples.opensocketexception",
        "documentation": {}
    },
    {
        "label": "num_conn",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.retriever-multi",
        "description": "env.share.doc.pycurl.examples.retriever-multi",
        "peekOfCode": "num_conn = 10\ntry:\n    if sys.argv[1] == \"-\":\n        urls = sys.stdin.readlines()\n    else:\n        urls = open(sys.argv[1]).readlines()\n    if len(sys.argv) >= 3:\n        num_conn = int(sys.argv[2])\nexcept:\n    print(\"Usage: %s <file with URLs to fetch> [<# of concurrent connections>]\" % sys.argv[0])",
        "detail": "env.share.doc.pycurl.examples.retriever-multi",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.retriever-multi",
        "description": "env.share.doc.pycurl.examples.retriever-multi",
        "peekOfCode": "queue = []\nfor url in urls:\n    url = url.strip()\n    if not url or url[0] == \"#\":\n        continue\n    filename = \"doc_%03d.dat\" % (len(queue) + 1)\n    queue.append((url, filename))\n# Check args\nassert queue, \"no URLs given\"\nnum_urls = len(queue)",
        "detail": "env.share.doc.pycurl.examples.retriever-multi",
        "documentation": {}
    },
    {
        "label": "num_urls",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.retriever-multi",
        "description": "env.share.doc.pycurl.examples.retriever-multi",
        "peekOfCode": "num_urls = len(queue)\nnum_conn = min(num_conn, num_urls)\nassert 1 <= num_conn <= 10000, \"invalid number of concurrent connections\"\nprint(\"PycURL %s (compiled against 0x%x)\" % (pycurl.version, pycurl.COMPILE_LIBCURL_VERSION_NUM))\nprint(\"----- Getting\", num_urls, \"URLs using\", num_conn, \"connections -----\")\n# Pre-allocate a list of curl objects\nm = pycurl.CurlMulti()\nm.handles = []\nfor i in range(num_conn):\n    c = pycurl.Curl()",
        "detail": "env.share.doc.pycurl.examples.retriever-multi",
        "documentation": {}
    },
    {
        "label": "num_conn",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.retriever-multi",
        "description": "env.share.doc.pycurl.examples.retriever-multi",
        "peekOfCode": "num_conn = min(num_conn, num_urls)\nassert 1 <= num_conn <= 10000, \"invalid number of concurrent connections\"\nprint(\"PycURL %s (compiled against 0x%x)\" % (pycurl.version, pycurl.COMPILE_LIBCURL_VERSION_NUM))\nprint(\"----- Getting\", num_urls, \"URLs using\", num_conn, \"connections -----\")\n# Pre-allocate a list of curl objects\nm = pycurl.CurlMulti()\nm.handles = []\nfor i in range(num_conn):\n    c = pycurl.Curl()\n    c.fp = None",
        "detail": "env.share.doc.pycurl.examples.retriever-multi",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.retriever-multi",
        "description": "env.share.doc.pycurl.examples.retriever-multi",
        "peekOfCode": "m = pycurl.CurlMulti()\nm.handles = []\nfor i in range(num_conn):\n    c = pycurl.Curl()\n    c.fp = None\n    c.setopt(pycurl.FOLLOWLOCATION, 1)\n    c.setopt(pycurl.MAXREDIRS, 5)\n    c.setopt(pycurl.CONNECTTIMEOUT, 30)\n    c.setopt(pycurl.TIMEOUT, 300)\n    c.setopt(pycurl.NOSIGNAL, 1)",
        "detail": "env.share.doc.pycurl.examples.retriever-multi",
        "documentation": {}
    },
    {
        "label": "m.handles",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.retriever-multi",
        "description": "env.share.doc.pycurl.examples.retriever-multi",
        "peekOfCode": "m.handles = []\nfor i in range(num_conn):\n    c = pycurl.Curl()\n    c.fp = None\n    c.setopt(pycurl.FOLLOWLOCATION, 1)\n    c.setopt(pycurl.MAXREDIRS, 5)\n    c.setopt(pycurl.CONNECTTIMEOUT, 30)\n    c.setopt(pycurl.TIMEOUT, 300)\n    c.setopt(pycurl.NOSIGNAL, 1)\n    m.handles.append(c)",
        "detail": "env.share.doc.pycurl.examples.retriever-multi",
        "documentation": {}
    },
    {
        "label": "freelist",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.retriever-multi",
        "description": "env.share.doc.pycurl.examples.retriever-multi",
        "peekOfCode": "freelist = m.handles[:]\nnum_processed = 0\nwhile num_processed < num_urls:\n    # If there is an url to process and a free curl object, add to multi stack\n    while queue and freelist:\n        url, filename = queue.pop(0)\n        c = freelist.pop()\n        c.fp = open(filename, \"wb\")\n        c.setopt(pycurl.URL, url)\n        c.setopt(pycurl.WRITEDATA, c.fp)",
        "detail": "env.share.doc.pycurl.examples.retriever-multi",
        "documentation": {}
    },
    {
        "label": "num_processed",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.retriever-multi",
        "description": "env.share.doc.pycurl.examples.retriever-multi",
        "peekOfCode": "num_processed = 0\nwhile num_processed < num_urls:\n    # If there is an url to process and a free curl object, add to multi stack\n    while queue and freelist:\n        url, filename = queue.pop(0)\n        c = freelist.pop()\n        c.fp = open(filename, \"wb\")\n        c.setopt(pycurl.URL, url)\n        c.setopt(pycurl.WRITEDATA, c.fp)\n        m.add_handle(c)",
        "detail": "env.share.doc.pycurl.examples.retriever-multi",
        "documentation": {}
    },
    {
        "label": "WorkerThread",
        "kind": 6,
        "importPath": "env.share.doc.pycurl.examples.retriever",
        "description": "env.share.doc.pycurl.examples.retriever",
        "peekOfCode": "class WorkerThread(threading.Thread):\n    def __init__(self, queue):\n        threading.Thread.__init__(self)\n        self.queue = queue\n    def run(self):\n        while 1:\n            try:\n                url, filename = self.queue.get_nowait()\n            except Queue.Empty:\n                raise SystemExit",
        "detail": "env.share.doc.pycurl.examples.retriever",
        "documentation": {}
    },
    {
        "label": "num_conn",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.retriever",
        "description": "env.share.doc.pycurl.examples.retriever",
        "peekOfCode": "num_conn = 10\ntry:\n    if sys.argv[1] == \"-\":\n        urls = sys.stdin.readlines()\n    else:\n        urls = open(sys.argv[1]).readlines()\n    if len(sys.argv) >= 3:\n        num_conn = int(sys.argv[2])\nexcept:\n    print(\"Usage: %s <file with URLs to fetch> [<# of concurrent connections>]\" % sys.argv[0])",
        "detail": "env.share.doc.pycurl.examples.retriever",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.retriever",
        "description": "env.share.doc.pycurl.examples.retriever",
        "peekOfCode": "queue = Queue.Queue()\nfor url in urls:\n    url = url.strip()\n    if not url or url[0] == \"#\":\n        continue\n    filename = \"doc_%03d.dat\" % (len(queue.queue) + 1)\n    queue.put((url, filename))\n# Check args\nassert queue.queue, \"no URLs given\"\nnum_urls = len(queue.queue)",
        "detail": "env.share.doc.pycurl.examples.retriever",
        "documentation": {}
    },
    {
        "label": "num_urls",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.retriever",
        "description": "env.share.doc.pycurl.examples.retriever",
        "peekOfCode": "num_urls = len(queue.queue)\nnum_conn = min(num_conn, num_urls)\nassert 1 <= num_conn <= 10000, \"invalid number of concurrent connections\"\nprint(\"PycURL %s (compiled against 0x%x)\" % (pycurl.version, pycurl.COMPILE_LIBCURL_VERSION_NUM))\nprint(\"----- Getting\", num_urls, \"URLs using\", num_conn, \"connections -----\")\nclass WorkerThread(threading.Thread):\n    def __init__(self, queue):\n        threading.Thread.__init__(self)\n        self.queue = queue\n    def run(self):",
        "detail": "env.share.doc.pycurl.examples.retriever",
        "documentation": {}
    },
    {
        "label": "num_conn",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.retriever",
        "description": "env.share.doc.pycurl.examples.retriever",
        "peekOfCode": "num_conn = min(num_conn, num_urls)\nassert 1 <= num_conn <= 10000, \"invalid number of concurrent connections\"\nprint(\"PycURL %s (compiled against 0x%x)\" % (pycurl.version, pycurl.COMPILE_LIBCURL_VERSION_NUM))\nprint(\"----- Getting\", num_urls, \"URLs using\", num_conn, \"connections -----\")\nclass WorkerThread(threading.Thread):\n    def __init__(self, queue):\n        threading.Thread.__init__(self)\n        self.queue = queue\n    def run(self):\n        while 1:",
        "detail": "env.share.doc.pycurl.examples.retriever",
        "documentation": {}
    },
    {
        "label": "threads",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.retriever",
        "description": "env.share.doc.pycurl.examples.retriever",
        "peekOfCode": "threads = []\nfor dummy in range(num_conn):\n    t = WorkerThread(queue)\n    t.start()\n    threads.append(t)\n# Wait for all threads to finish\nfor thread in threads:\n    thread.join()",
        "detail": "env.share.doc.pycurl.examples.retriever",
        "documentation": {}
    },
    {
        "label": "SourceForgeUserSession",
        "kind": 6,
        "importPath": "env.share.doc.pycurl.examples.sfquery",
        "description": "env.share.doc.pycurl.examples.sfquery",
        "peekOfCode": "class SourceForgeUserSession(curl.Curl):\n    # SourceForge-specific methods.  Sensitive to changes in site design.\n    def login(self, name, password):\n        \"Establish a login session.\"\n        self.post(\"account/login.php\", ((\"form_loginname\", name),\n                                        (\"form_pw\", password),\n                                        (\"return_to\", \"\"),\n                                        (\"stay_in_ssl\", \"1\"),\n                                        (\"login\", \"Login With SSL\")))\n    def logout(self):",
        "detail": "env.share.doc.pycurl.examples.sfquery",
        "documentation": {}
    },
    {
        "label": "PY3",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.smtp",
        "description": "env.share.doc.pycurl.examples.smtp",
        "peekOfCode": "PY3 = sys.version_info[0] > 2\nmail_server = 'smtp://%s' % localhost\nmail_from = 'sender@example.org'\nmail_to = 'addressee@example.net'\nc = pycurl.Curl()\nc.setopt(c.URL, mail_server)\nc.setopt(c.MAIL_FROM, mail_from)\nc.setopt(c.MAIL_RCPT, [mail_to])\nmessage = '''\\\nFrom: %s",
        "detail": "env.share.doc.pycurl.examples.smtp",
        "documentation": {}
    },
    {
        "label": "mail_server",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.smtp",
        "description": "env.share.doc.pycurl.examples.smtp",
        "peekOfCode": "mail_server = 'smtp://%s' % localhost\nmail_from = 'sender@example.org'\nmail_to = 'addressee@example.net'\nc = pycurl.Curl()\nc.setopt(c.URL, mail_server)\nc.setopt(c.MAIL_FROM, mail_from)\nc.setopt(c.MAIL_RCPT, [mail_to])\nmessage = '''\\\nFrom: %s\nTo: %s",
        "detail": "env.share.doc.pycurl.examples.smtp",
        "documentation": {}
    },
    {
        "label": "mail_from",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.smtp",
        "description": "env.share.doc.pycurl.examples.smtp",
        "peekOfCode": "mail_from = 'sender@example.org'\nmail_to = 'addressee@example.net'\nc = pycurl.Curl()\nc.setopt(c.URL, mail_server)\nc.setopt(c.MAIL_FROM, mail_from)\nc.setopt(c.MAIL_RCPT, [mail_to])\nmessage = '''\\\nFrom: %s\nTo: %s\nSubject: PycURL SMTP example",
        "detail": "env.share.doc.pycurl.examples.smtp",
        "documentation": {}
    },
    {
        "label": "mail_to",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.smtp",
        "description": "env.share.doc.pycurl.examples.smtp",
        "peekOfCode": "mail_to = 'addressee@example.net'\nc = pycurl.Curl()\nc.setopt(c.URL, mail_server)\nc.setopt(c.MAIL_FROM, mail_from)\nc.setopt(c.MAIL_RCPT, [mail_to])\nmessage = '''\\\nFrom: %s\nTo: %s\nSubject: PycURL SMTP example\nSMTP example via PycURL",
        "detail": "env.share.doc.pycurl.examples.smtp",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.smtp",
        "description": "env.share.doc.pycurl.examples.smtp",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, mail_server)\nc.setopt(c.MAIL_FROM, mail_from)\nc.setopt(c.MAIL_RCPT, [mail_to])\nmessage = '''\\\nFrom: %s\nTo: %s\nSubject: PycURL SMTP example\nSMTP example via PycURL\n''' % (mail_from, mail_to)",
        "detail": "env.share.doc.pycurl.examples.smtp",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.smtp",
        "description": "env.share.doc.pycurl.examples.smtp",
        "peekOfCode": "message = '''\\\nFrom: %s\nTo: %s\nSubject: PycURL SMTP example\nSMTP example via PycURL\n''' % (mail_from, mail_to)\nif PY3:\n    message = message.encode('ascii')\n# libcurl does not perform buffering, therefore\n# we need to wrap the message string into a BytesIO or StringIO.",
        "detail": "env.share.doc.pycurl.examples.smtp",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.smtp",
        "description": "env.share.doc.pycurl.examples.smtp",
        "peekOfCode": "io = BytesIO(message)\nc.setopt(c.READDATA, io)\n# If UPLOAD is not set, libcurl performs SMTP VRFY.\n# Setting UPLOAD to True sends a message.\nc.setopt(c.UPLOAD, True)\n# Observe SMTP conversation.\nc.setopt(c.VERBOSE, True)\nc.perform()",
        "detail": "env.share.doc.pycurl.examples.smtp",
        "documentation": {}
    },
    {
        "label": "keyfunction",
        "kind": 2,
        "importPath": "env.share.doc.pycurl.examples.ssh_keyfunction",
        "description": "env.share.doc.pycurl.examples.ssh_keyfunction",
        "peekOfCode": "def keyfunction(known_key, found_key, match):\n    return c.KHSTAT_FINE\nc.setopt(c.SSH_KNOWNHOSTS, '.known_hosts')\nc.setopt(c.SSH_KEYFUNCTION, keyfunction)\nc.perform()",
        "detail": "env.share.doc.pycurl.examples.ssh_keyfunction",
        "documentation": {}
    },
    {
        "label": "sftp_server",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.ssh_keyfunction",
        "description": "env.share.doc.pycurl.examples.ssh_keyfunction",
        "peekOfCode": "sftp_server = 'sftp://web.sourceforge.net'\nc = pycurl.Curl()\nc.setopt(c.URL, sftp_server)\nc.setopt(c.VERBOSE, True)\ndef keyfunction(known_key, found_key, match):\n    return c.KHSTAT_FINE\nc.setopt(c.SSH_KNOWNHOSTS, '.known_hosts')\nc.setopt(c.SSH_KEYFUNCTION, keyfunction)\nc.perform()",
        "detail": "env.share.doc.pycurl.examples.ssh_keyfunction",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.ssh_keyfunction",
        "description": "env.share.doc.pycurl.examples.ssh_keyfunction",
        "peekOfCode": "c = pycurl.Curl()\nc.setopt(c.URL, sftp_server)\nc.setopt(c.VERBOSE, True)\ndef keyfunction(known_key, found_key, match):\n    return c.KHSTAT_FINE\nc.setopt(c.SSH_KNOWNHOSTS, '.known_hosts')\nc.setopt(c.SSH_KEYFUNCTION, keyfunction)\nc.perform()",
        "detail": "env.share.doc.pycurl.examples.ssh_keyfunction",
        "documentation": {}
    },
    {
        "label": "CURLTransport",
        "kind": 6,
        "importPath": "env.share.doc.pycurl.examples.xmlrpc_curl",
        "description": "env.share.doc.pycurl.examples.xmlrpc_curl",
        "peekOfCode": "class CURLTransport(xmlrpclib.Transport):\n    \"\"\"Handles a cURL HTTP transaction to an XML-RPC server.\"\"\"\n    xmlrpc_h = [ \"Content-Type: text/xml\" ]\n    def __init__(self, username=None, password=None):\n        self.c = pycurl.Curl()\n        self.c.setopt(pycurl.POST, 1)\n        self.c.setopt(pycurl.NOSIGNAL, 1)\n        self.c.setopt(pycurl.CONNECTTIMEOUT, 30)\n        self.c.setopt(pycurl.HTTPHEADER, self.xmlrpc_h)\n        if username != None and password != None:",
        "detail": "env.share.doc.pycurl.examples.xmlrpc_curl",
        "documentation": {}
    },
    {
        "label": "PY3",
        "kind": 5,
        "importPath": "env.share.doc.pycurl.examples.xmlrpc_curl",
        "description": "env.share.doc.pycurl.examples.xmlrpc_curl",
        "peekOfCode": "PY3 = sys.version_info[0] > 2\nclass CURLTransport(xmlrpclib.Transport):\n    \"\"\"Handles a cURL HTTP transaction to an XML-RPC server.\"\"\"\n    xmlrpc_h = [ \"Content-Type: text/xml\" ]\n    def __init__(self, username=None, password=None):\n        self.c = pycurl.Curl()\n        self.c.setopt(pycurl.POST, 1)\n        self.c.setopt(pycurl.NOSIGNAL, 1)\n        self.c.setopt(pycurl.CONNECTTIMEOUT, 30)\n        self.c.setopt(pycurl.HTTPHEADER, self.xmlrpc_h)",
        "detail": "env.share.doc.pycurl.examples.xmlrpc_curl",
        "documentation": {}
    }
]